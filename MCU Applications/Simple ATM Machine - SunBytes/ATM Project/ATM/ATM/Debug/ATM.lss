
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004218  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000050e  00800060  00004218  000042ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000017b  0080056e  0080056e  000047ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000047ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000047ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f8  00000000  00000000  00004828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007809  00000000  00000000  00004f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e86  00000000  00000000  0000c729  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000476e  00000000  00000000  0000e5af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016c8  00000000  00000000  00012d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c91  00000000  00000000  000143e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000625c  00000000  00000000  00017079  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000608  00000000  00000000  0001d2d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__vector_1>
       8:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__vector_2>
       c:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__vector_3>
      10:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <__vector_4>
      14:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <__vector_5>
      18:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__vector_6>
      1c:	0c 94 03 17 	jmp	0x2e06	; 0x2e06 <__vector_7>
      20:	0c 94 28 17 	jmp	0x2e50	; 0x2e50 <__vector_8>
      24:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__vector_9>
      28:	0c 94 94 16 	jmp	0x2d28	; 0x2d28 <__vector_10>
      2c:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__vector_11>
      30:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__vector_12>
      34:	0c 94 16 1e 	jmp	0x3c2c	; 0x3c2c <__vector_13>
      38:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__vector_14>
      3c:	0c 94 ef 1d 	jmp	0x3bde	; 0x3bde <__vector_15>
      40:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__vector_16>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	a2 1c       	adc	r10, r2
      56:	ae 1c       	adc	r10, r14
      58:	a5 1c       	adc	r10, r5
      5a:	a8 1c       	adc	r10, r8
      5c:	ab 1c       	adc	r10, r11
      5e:	a2 1c       	adc	r10, r2
      60:	a2 1c       	adc	r10, r2

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	15 e0       	ldi	r17, 0x05	; 5
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e8 e1       	ldi	r30, 0x18	; 24
      76:	f2 e4       	ldi	r31, 0x42	; 66
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	ae 36       	cpi	r26, 0x6E	; 110
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	26 e0       	ldi	r18, 0x06	; 6
      86:	ae e6       	ldi	r26, 0x6E	; 110
      88:	b5 e0       	ldi	r27, 0x05	; 5
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a9 3e       	cpi	r26, 0xE9	; 233
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 2a 11 	call	0x2254	; 0x2254 <main>
      98:	0c 94 0a 21 	jmp	0x4214	; 0x4214 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <AppADMIN_searchPan>:
* Parameters (out): None
* Return value: sint16_t - return the index of the Customer in DB
* Description: Function to search for a customer's PAN if existed in DB.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
sint16_t AppADMIN_searchPan(uint8_t* pu8_data)
{
      a0:	0f 93       	push	r16
      a2:	1f 93       	push	r17
      a4:	cf 93       	push	r28
      a6:	df 93       	push	r29
      a8:	cd b7       	in	r28, 0x3d	; 61
      aa:	de b7       	in	r29, 0x3e	; 62
      ac:	2a 97       	sbiw	r28, 0x0a	; 10
      ae:	0f b6       	in	r0, 0x3f	; 63
      b0:	f8 94       	cli
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	0f be       	out	0x3f, r0	; 63
      b6:	cd bf       	out	0x3d, r28	; 61
      b8:	8c 01       	movw	r16, r24
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
      ba:	fe 01       	movw	r30, r28
      bc:	31 96       	adiw	r30, 0x01	; 1
      be:	8a e0       	ldi	r24, 0x0A	; 10
      c0:	df 01       	movw	r26, r30
      c2:	1d 92       	st	X+, r1
      c4:	8a 95       	dec	r24
      c6:	e9 f7       	brne	.-6      	; 0xc2 <AppADMIN_searchPan+0x22>
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
      c8:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <gu8_clientIndex>
      cc:	1f c0       	rjmp	.+62     	; 0x10c <AppADMIN_searchPan+0x6c>
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	01 96       	adiw	r24, 0x01	; 1
      d2:	82 95       	swap	r24
      d4:	88 0f       	add	r24, r24
      d6:	80 7e       	andi	r24, 0xE0	; 224
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
      d8:	4a e0       	ldi	r20, 0x0A	; 10
      da:	50 e0       	ldi	r21, 0x00	; 0
      dc:	be 01       	movw	r22, r28
      de:	6f 5f       	subi	r22, 0xFF	; 255
      e0:	7f 4f       	sbci	r23, 0xFF	; 255
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <Eeprom_24_readPacket>
      e8:	81 30       	cpi	r24, 0x01	; 1
      ea:	c9 f4       	brne	.+50     	; 0x11e <AppADMIN_searchPan+0x7e>
		return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, pu8_data) == 1)
      ec:	b8 01       	movw	r22, r16
      ee:	ce 01       	movw	r24, r28
      f0:	01 96       	adiw	r24, 0x01	; 1
      f2:	0e 94 c5 19 	call	0x338a	; 0x338a <stringCompare>
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	21 f4       	brne	.+8      	; 0x102 <AppADMIN_searchPan+0x62>
		{
			return gu8_clientIndex;
      fa:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <gu8_clientIndex>
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	10 c0       	rjmp	.+32     	; 0x122 <AppADMIN_searchPan+0x82>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
sint16_t AppADMIN_searchPan(uint8_t* pu8_data)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     102:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <gu8_clientIndex>
     106:	8f 5f       	subi	r24, 0xFF	; 255
     108:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <gu8_clientIndex>
     10c:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <gu8_clientIndex>
     110:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <gu8_registeredAccNum>
     114:	89 17       	cp	r24, r25
     116:	d8 f2       	brcs	.-74     	; 0xce <AppADMIN_searchPan+0x2e>
		if(stringCompare(au8_clientPAN, pu8_data) == 1)
		{
			return gu8_clientIndex;
		}
	}
	return -1;
     118:	8f ef       	ldi	r24, 0xFF	; 255
     11a:	9f ef       	ldi	r25, 0xFF	; 255
     11c:	02 c0       	rjmp	.+4      	; 0x122 <AppADMIN_searchPan+0x82>
	uint8_t au8_clientPAN[10] = {0};
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	90 e0       	ldi	r25, 0x00	; 0
		{
			return gu8_clientIndex;
		}
	}
	return -1;
}
     122:	2a 96       	adiw	r28, 0x0a	; 10
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	de bf       	out	0x3e, r29	; 62
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	cd bf       	out	0x3d, r28	; 61
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	1f 91       	pop	r17
     134:	0f 91       	pop	r16
     136:	08 95       	ret

00000138 <AppUSER_displayTemp>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to display the temperature.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_displayTemp(void)
{
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	1f 92       	push	r1
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_currentTemp=0;
     142:	19 82       	std	Y+1, r1	; 0x01
	gu8_displayFlag = DISPLAY_TEMP;
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <gu8_displayFlag>
	Lcd_clear();
     14a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Lcd_setCursor>
     156:	81 30       	cpi	r24, 0x01	; 1
     158:	f9 f4       	brne	.+62     	; 0x198 <AppUSER_displayTemp+0x60>
	return APP_STATUS_ERROR_NOK;
	if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
     15a:	84 ee       	ldi	r24, 0xE4	; 228
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Lcd_printString>
     162:	81 30       	cpi	r24, 0x01	; 1
     164:	d9 f4       	brne	.+54     	; 0x19c <AppUSER_displayTemp+0x64>
	return APP_STATUS_ERROR_NOK;
	if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
     166:	ce 01       	movw	r24, r28
     168:	01 96       	adiw	r24, 0x01	; 1
     16a:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LM35_readTemp>
     16e:	81 30       	cpi	r24, 0x01	; 1
     170:	59 f4       	brne	.+22     	; 0x188 <AppUSER_displayTemp+0x50>
	{
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Lcd_setCursor>
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	91 f4       	brne	.+36     	; 0x1a0 <AppUSER_displayTemp+0x68>
		return APP_STATUS_ERROR_NOK;
		if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <Lcd_printDecimal>
     184:	81 30       	cpi	r24, 0x01	; 1
     186:	71 f4       	brne	.+28     	; 0x1a4 <AppUSER_displayTemp+0x6c>
		return APP_STATUS_ERROR_NOK;
	}
	if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
     188:	85 ef       	ldi	r24, 0xF5	; 245
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Lcd_printString>
     190:	81 30       	cpi	r24, 0x01	; 1
     192:	51 f0       	breq	.+20     	; 0x1a8 <AppUSER_displayTemp+0x70>
	return APP_STATUS_ERROR_NOK;
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	09 c0       	rjmp	.+18     	; 0x1aa <AppUSER_displayTemp+0x72>
{
	uint8_t u8_currentTemp=0;
	gu8_displayFlag = DISPLAY_TEMP;
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	07 c0       	rjmp	.+14     	; 0x1aa <AppUSER_displayTemp+0x72>
	if(Lcd_printString((uint8_t*)"Current Temp is:") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	05 c0       	rjmp	.+10     	; 0x1aa <AppUSER_displayTemp+0x72>
	if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
	{
		if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	03 c0       	rjmp	.+6      	; 0x1aa <AppUSER_displayTemp+0x72>
		if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	01 c0       	rjmp	.+2      	; 0x1aa <AppUSER_displayTemp+0x72>
	}
	if(Lcd_printString((uint8_t*)"   '-' To Exit") != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
	return APP_STATUS_ERROR_OK;
     1a8:	81 e0       	ldi	r24, 0x01	; 1
}
     1aa:	0f 90       	pop	r0
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <AppUSER_checkPan>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
     1b2:	1f 93       	push	r17
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	2a 97       	sbiw	r28, 0x0a	; 10
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	f8 94       	cli
     1c2:	de bf       	out	0x3e, r29	; 62
     1c4:	0f be       	out	0x3f, r0	; 63
     1c6:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
     1c8:	fe 01       	movw	r30, r28
     1ca:	31 96       	adiw	r30, 0x01	; 1
     1cc:	8a e0       	ldi	r24, 0x0A	; 10
     1ce:	df 01       	movw	r26, r30
     1d0:	1d 92       	st	X+, r1
     1d2:	8a 95       	dec	r24
     1d4:	e9 f7       	brne	.-6      	; 0x1d0 <AppUSER_checkPan+0x1e>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     1d6:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <gu8_clientIndex>
     1da:	1c c0       	rjmp	.+56     	; 0x214 <AppUSER_checkPan+0x62>
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	01 96       	adiw	r24, 0x01	; 1
     1e0:	82 95       	swap	r24
     1e2:	88 0f       	add	r24, r24
     1e4:	80 7e       	andi	r24, 0xE0	; 224
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     1e6:	4a e0       	ldi	r20, 0x0A	; 10
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	be 01       	movw	r22, r28
     1ec:	6f 5f       	subi	r22, 0xFF	; 255
     1ee:	7f 4f       	sbci	r23, 0xFF	; 255
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 c8 0c 	call	0x1990	; 0x1990 <Eeprom_24_readPacket>
     1f6:	81 30       	cpi	r24, 0x01	; 1
     1f8:	81 f5       	brne	.+96     	; 0x25a <AppUSER_checkPan+0xa8>
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
     1fa:	67 ea       	ldi	r22, 0xA7	; 167
     1fc:	75 e0       	ldi	r23, 0x05	; 5
     1fe:	ce 01       	movw	r24, r28
     200:	01 96       	adiw	r24, 0x01	; 1
     202:	0e 94 c5 19 	call	0x338a	; 0x338a <stringCompare>
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	69 f0       	breq	.+26     	; 0x224 <AppUSER_checkPan+0x72>
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
     20a:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <gu8_clientIndex>
     20e:	8f 5f       	subi	r24, 0xFF	; 255
     210:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <gu8_clientIndex>
     214:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <gu8_clientIndex>
     218:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <gu8_registeredAccNum>
     21c:	89 17       	cp	r24, r25
     21e:	f0 f2       	brcs	.-68     	; 0x1dc <AppUSER_checkPan+0x2a>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPan(void)
{
	uint8_t u8_clientPanAddr = 0;
	uint8_t au8_clientPAN[10] = {0};
	uint8_t u8_panFound = 0;
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	01 c0       	rjmp	.+2      	; 0x226 <AppUSER_checkPan+0x74>
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		if(stringCompare(au8_clientPAN, gstr_userCardData.au8_primaryAccountNumber) == 1)
		{
			u8_panFound = 1;
     224:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
	
	if(u8_panFound == 1)
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	d1 f4       	brne	.+52     	; 0x25e <AppUSER_checkPan+0xac>
	{
		uint8_t u8_clientBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     22a:	10 91 7b 05 	lds	r17, 0x057B	; 0x80057b <gu8_clientIndex>
     22e:	12 95       	swap	r17
     230:	11 0f       	add	r17, r17
     232:	10 7e       	andi	r17, 0xE0	; 224
     234:	10 5d       	subi	r17, 0xD0	; 208
			
		stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
     236:	6b e8       	ldi	r22, 0x8B	; 139
     238:	75 e0       	ldi	r23, 0x05	; 5
     23a:	ce 01       	movw	r24, r28
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	0e 94 04 1a 	call	0x3408	; 0x3408 <stringCopy>
			
		if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
     242:	48 e0       	ldi	r20, 0x08	; 8
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	65 e9       	ldi	r22, 0x95	; 149
     248:	75 e0       	ldi	r23, 0x05	; 5
     24a:	81 2f       	mov	r24, r17
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <Eeprom_24_readPacket>
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	31 f0       	breq	.+12     	; 0x262 <AppUSER_checkPan+0xb0>
			return APP_STATUS_ERROR_NOK;
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	05 c0       	rjmp	.+10     	; 0x264 <AppUSER_checkPan+0xb2>
	uint8_t u8_panFound = 0;
	for (gu8_clientIndex=0; gu8_clientIndex<gu8_registeredAccNum; gu8_clientIndex++)
	{
		u8_clientPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
		if(Eeprom_24_readPacket(u8_clientPanAddr, au8_clientPAN, MAX_PAN_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	03 c0       	rjmp	.+6      	; 0x264 <AppUSER_checkPan+0xb2>
			return APP_STATUS_ERROR_NOK;
			
		return APP_STATUS_PAN_FOUND;
	}

	return APP_STATUS_PAN_NOT_FOUND;
     25e:	8b e0       	ldi	r24, 0x0B	; 11
     260:	01 c0       	rjmp	.+2      	; 0x264 <AppUSER_checkPan+0xb2>
		stringCopy(au8_clientPAN, gstr_clientdata.au8_PAN);
			
		if(Eeprom_24_readPacket(u8_clientBalAddr, gstr_clientdata.au8_Balance, MAX_BAL_LENGTH+1) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
			
		return APP_STATUS_PAN_FOUND;
     262:	8a e0       	ldi	r24, 0x0A	; 10
	}

	return APP_STATUS_PAN_NOT_FOUND;
}
     264:	2a 96       	adiw	r28, 0x0a	; 10
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	f8 94       	cli
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	cd bf       	out	0x3d, r28	; 61
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	1f 91       	pop	r17
     276:	08 95       	ret

00000278 <AppUSER_ReportKeypad>:
* Parameters (out): pu8_key - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the value pressed in the keypad.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_ReportKeypad(uint8_t* pu8_key)
{
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	ec 01       	movw	r28, r24
	static uint8_t u8_index = 0;
	static uint8_t sau8_data[10]={0};
	enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&sau8_data[u8_index]);
     27e:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <u8_index.2293>
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	81 59       	subi	r24, 0x91	; 145
     286:	9a 4f       	sbci	r25, 0xFA	; 250
     288:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <Keypad_readKey>
		
	if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
     28c:	86 30       	cpi	r24, 0x06	; 6
     28e:	09 f0       	breq	.+2      	; 0x292 <AppUSER_ReportKeypad+0x1a>
     290:	74 c0       	rjmp	.+232    	; 0x37a <AppUSER_ReportKeypad+0x102>
	{
		if(sau8_data[u8_index] == '=')
     292:	60 91 79 05 	lds	r22, 0x0579	; 0x800579 <u8_index.2293>
     296:	86 2f       	mov	r24, r22
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	fc 01       	movw	r30, r24
     29c:	e1 59       	subi	r30, 0x91	; 145
     29e:	fa 4f       	sbci	r31, 0xFA	; 250
     2a0:	20 81       	ld	r18, Z
     2a2:	2d 33       	cpi	r18, 0x3D	; 61
     2a4:	09 f5       	brne	.+66     	; 0x2e8 <AppUSER_ReportKeypad+0x70>
		{
			sau8_data[u8_index] = '\0';
     2a6:	fc 01       	movw	r30, r24
     2a8:	e1 59       	subi	r30, 0x91	; 145
     2aa:	fa 4f       	sbci	r31, 0xFA	; 250
     2ac:	10 82       	st	Z, r1
			u8_index = 0;
     2ae:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <u8_index.2293>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     2b2:	66 e0       	ldi	r22, 0x06	; 6
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Lcd_setCursor>
     2ba:	81 30       	cpi	r24, 0x01	; 1
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <AppUSER_ReportKeypad+0x48>
     2be:	5f c0       	rjmp	.+190    	; 0x37e <AppUSER_ReportKeypad+0x106>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
     2c0:	84 e0       	ldi	r24, 0x04	; 4
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Lcd_printString>
     2c8:	81 30       	cpi	r24, 0x01	; 1
     2ca:	09 f0       	breq	.+2      	; 0x2ce <AppUSER_ReportKeypad+0x56>
     2cc:	5a c0       	rjmp	.+180    	; 0x382 <AppUSER_ReportKeypad+0x10a>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     2ce:	66 e0       	ldi	r22, 0x06	; 6
     2d0:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Lcd_setCursor>
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	09 f0       	breq	.+2      	; 0x2da <AppUSER_ReportKeypad+0x62>
     2d8:	56 c0       	rjmp	.+172    	; 0x386 <AppUSER_ReportKeypad+0x10e>
			return APP_STATUS_ERROR_NOK;
			stringCopy(sau8_data, pu8_key);
     2da:	be 01       	movw	r22, r28
     2dc:	8f e6       	ldi	r24, 0x6F	; 111
     2de:	95 e0       	ldi	r25, 0x05	; 5
     2e0:	0e 94 04 1a 	call	0x3408	; 0x3408 <stringCopy>
			return APP_STATUS_KPD_NUM;
     2e4:	87 e0       	ldi	r24, 0x07	; 7
     2e6:	5a c0       	rjmp	.+180    	; 0x39c <AppUSER_ReportKeypad+0x124>
		}else if(sau8_data[u8_index] == '-')
     2e8:	2d 32       	cpi	r18, 0x2D	; 45
     2ea:	b1 f4       	brne	.+44     	; 0x318 <AppUSER_ReportKeypad+0xa0>
		{
			u8_index--;
     2ec:	ef ef       	ldi	r30, 0xFF	; 255
     2ee:	e6 0f       	add	r30, r22
     2f0:	e0 93 79 05 	sts	0x0579, r30	; 0x800579 <u8_index.2293>
			sau8_data[u8_index] = '\0';
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	e1 59       	subi	r30, 0x91	; 145
     2f8:	fa 4f       	sbci	r31, 0xFA	; 250
     2fa:	10 82       	st	Z, r1
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     2fc:	6b 5f       	subi	r22, 0xFB	; 251
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Lcd_setCursor>
     304:	81 30       	cpi	r24, 0x01	; 1
     306:	09 f0       	breq	.+2      	; 0x30a <AppUSER_ReportKeypad+0x92>
     308:	40 c0       	rjmp	.+128    	; 0x38a <AppUSER_ReportKeypad+0x112>
			return APP_STATUS_ERROR_NOK;
			if(Lcd_printChar(' ') != LCD_STATUS_ERROR_OK)
     30a:	80 e2       	ldi	r24, 0x20	; 32
     30c:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <Lcd_printChar>
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	e9 f1       	breq	.+122    	; 0x38e <AppUSER_ReportKeypad+0x116>
			return APP_STATUS_ERROR_NOK;
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	42 c0       	rjmp	.+132    	; 0x39c <AppUSER_ReportKeypad+0x124>
		}else if((sau8_data[u8_index] != '+') || (sau8_data[u8_index] != 'x'))
		{
			if(u8_index!=10)
     318:	6a 30       	cpi	r22, 0x0A	; 10
     31a:	49 f1       	breq	.+82     	; 0x36e <AppUSER_ReportKeypad+0xf6>
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
     31c:	6a 5f       	subi	r22, 0xFA	; 250
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Lcd_setCursor>
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	a9 f5       	brne	.+106    	; 0x392 <AppUSER_ReportKeypad+0x11a>
					return APP_STATUS_ERROR_NOK;
				if(Kpd_enablePass == 0)
     328:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <Kpd_enablePass>
     32c:	81 11       	cpse	r24, r1
     32e:	0b c0       	rjmp	.+22     	; 0x346 <AppUSER_ReportKeypad+0xce>
				{
					if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
     330:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <u8_index.2293>
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	e1 59       	subi	r30, 0x91	; 145
     338:	fa 4f       	sbci	r31, 0xFA	; 250
     33a:	80 81       	ld	r24, Z
     33c:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <Lcd_printChar>
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	49 f5       	brne	.+82     	; 0x396 <AppUSER_ReportKeypad+0x11e>
     344:	0d c0       	rjmp	.+26     	; 0x360 <AppUSER_ReportKeypad+0xe8>
						return APP_STATUS_ERROR_NOK;
				}
				else
				{
					if(u8_index < 4)
     346:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <u8_index.2293>
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	30 f4       	brcc	.+12     	; 0x35a <AppUSER_ReportKeypad+0xe2>
					{
						if(Lcd_printChar('*') != LCD_STATUS_ERROR_OK)
     34e:	8a e2       	ldi	r24, 0x2A	; 42
     350:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <Lcd_printChar>
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	09 f5       	brne	.+66     	; 0x39a <AppUSER_ReportKeypad+0x122>
     358:	03 c0       	rjmp	.+6      	; 0x360 <AppUSER_ReportKeypad+0xe8>
							return APP_STATUS_ERROR_NOK;
					}else
					{
						u8_index--;
     35a:	81 50       	subi	r24, 0x01	; 1
     35c:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <u8_index.2293>
					}
				}
				u8_index++;
     360:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <u8_index.2293>
     364:	8f 5f       	subi	r24, 0xFF	; 255
     366:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <u8_index.2293>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	17 c0       	rjmp	.+46     	; 0x39c <AppUSER_ReportKeypad+0x124>
					}
				}
				u8_index++;
			}else
			{
				sau8_data[u8_index] = '\0';
     36e:	fc 01       	movw	r30, r24
     370:	e1 59       	subi	r30, 0x91	; 145
     372:	fa 4f       	sbci	r31, 0xFA	; 250
     374:	10 82       	st	Z, r1
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	11 c0       	rjmp	.+34     	; 0x39c <AppUSER_ReportKeypad+0x124>
			}
				
		}
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	0f c0       	rjmp	.+30     	; 0x39c <AppUSER_ReportKeypad+0x124>
		if(sau8_data[u8_index] == '=')
		{
			sau8_data[u8_index] = '\0';
			u8_index = 0;
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	0d c0       	rjmp	.+26     	; 0x39c <AppUSER_ReportKeypad+0x124>
			if(Lcd_printString((uint8_t*)"  ") != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	0b c0       	rjmp	.+22     	; 0x39c <AppUSER_ReportKeypad+0x124>
			if(Lcd_setCursor(LCD_IN_POS_X, LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	09 c0       	rjmp	.+18     	; 0x39c <AppUSER_ReportKeypad+0x124>
		}else if(sau8_data[u8_index] == '-')
		{
			u8_index--;
			sau8_data[u8_index] = '\0';
			if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	07 c0       	rjmp	.+14     	; 0x39c <AppUSER_ReportKeypad+0x124>
	}else if(enuKeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	05 c0       	rjmp	.+10     	; 0x39c <AppUSER_ReportKeypad+0x124>
		}else if((sau8_data[u8_index] != '+') || (sau8_data[u8_index] != 'x'))
		{
			if(u8_index!=10)
			{
				if(Lcd_setCursor(LCD_IN_POS_X, u8_index+LCD_IN_POS_Y) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	03 c0       	rjmp	.+6      	; 0x39c <AppUSER_ReportKeypad+0x124>
				if(Kpd_enablePass == 0)
				{
					if(Lcd_printChar(sau8_data[u8_index]) != LCD_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	01 c0       	rjmp	.+2      	; 0x39c <AppUSER_ReportKeypad+0x124>
				else
				{
					if(u8_index < 4)
					{
						if(Lcd_printChar('*') != LCD_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
     39a:	80 e0       	ldi	r24, 0x00	; 0
	{
		return APP_STATUS_ERROR_OK;
	}
		
	return APP_STATUS_ERROR_OK;
}
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <AppUSER_startTransaction>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the card's pan if valid in DB or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startTransaction(void)
{
     3a2:	4f 92       	push	r4
     3a4:	5f 92       	push	r5
     3a6:	6f 92       	push	r6
     3a8:	7f 92       	push	r7
     3aa:	8f 92       	push	r8
     3ac:	9f 92       	push	r9
     3ae:	af 92       	push	r10
     3b0:	bf 92       	push	r11
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	1f 93       	push	r17
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
     3c4:	28 97       	sbiw	r28, 0x08	; 8
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_inputKPD[8] = {0};
     3d0:	fe 01       	movw	r30, r28
     3d2:	31 96       	adiw	r30, 0x01	; 1
     3d4:	88 e0       	ldi	r24, 0x08	; 8
     3d6:	df 01       	movw	r26, r30
     3d8:	1d 92       	st	X+, r1
     3da:	8a 95       	dec	r24
     3dc:	e9 f7       	brne	.-6      	; 0x3d8 <AppUSER_startTransaction+0x36>
	enuApp_Status_t KeypdaStatus = 0;
	float32_t f32_balance = stringToFloat(gstr_clientdata.au8_Balance);
     3de:	85 e9       	ldi	r24, 0x95	; 149
     3e0:	95 e0       	ldi	r25, 0x05	; 5
     3e2:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <stringToFloat>
     3e6:	2b 01       	movw	r4, r22
     3e8:	3c 01       	movw	r6, r24
	float32_t f32_maxAmount = stringToFloat(gau8_maxAmount);
     3ea:	8c e7       	ldi	r24, 0x7C	; 124
     3ec:	95 e0       	ldi	r25, 0x05	; 5
     3ee:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <stringToFloat>
     3f2:	4b 01       	movw	r8, r22
     3f4:	5c 01       	movw	r10, r24
	float32_t f32_amount = 0;
	while(1)
	{
		EmptyString(au8_inputKPD);
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     3fe:	ce 01       	movw	r24, r28
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	0e 94 3c 01 	call	0x278	; 0x278 <AppUSER_ReportKeypad>
		
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     406:	87 30       	cpi	r24, 0x07	; 7
     408:	09 f0       	breq	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     40a:	cf c0       	rjmp	.+414    	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
		{
			if((stringLength(au8_inputKPD) != MAX_BAL_LENGTH+1) || (au8_inputKPD[4] != '.'))
     40c:	ce 01       	movw	r24, r28
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
     414:	88 30       	cpi	r24, 0x08	; 8
     416:	19 f4       	brne	.+6      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     418:	8d 81       	ldd	r24, Y+5	; 0x05
     41a:	8e 32       	cpi	r24, 0x2E	; 46
     41c:	59 f0       	breq	.+22     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			{
// 				Lcd_printLCD((uint8_t*)"Invalid Balance", (uint8_t*)"Format = xxxx.xx");
				Lcd_clear();
     41e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Lcd_clear>
				Lcd_setCursor(0,0);
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Lcd_setCursor>
				Lcd_printString(cgau8_AMOUNTString);
     42a:	80 e6       	ldi	r24, 0x60	; 96
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Lcd_printString>
//  			Delay_ms(1000);
//  			Lcd_clear();
//  			Lcd_setCursor(0,0);
//  			Lcd_printString((uint8_t*)"Enter Amount");
				continue;
     432:	e1 cf       	rjmp	.-62     	; 0x3f6 <AppUSER_startTransaction+0x54>
			}
			f32_amount = stringToFloat(au8_inputKPD);
     434:	ce 01       	movw	r24, r28
     436:	01 96       	adiw	r24, 0x01	; 1
     438:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <stringToFloat>
     43c:	6b 01       	movw	r12, r22
     43e:	7c 01       	movw	r14, r24
			
			if(f32_maxAmount < f32_amount)
     440:	9b 01       	movw	r18, r22
     442:	ac 01       	movw	r20, r24
     444:	c5 01       	movw	r24, r10
     446:	b4 01       	movw	r22, r8
     448:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <__cmpsf2>
     44c:	88 23       	and	r24, r24
     44e:	0c f5       	brge	.+66     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
			{
				Lcd_printLCD((uint8_t*)"   Max Amount", (uint8_t*)"    Exceeded");
     450:	67 e0       	ldi	r22, 0x07	; 7
     452:	71 e0       	ldi	r23, 0x01	; 1
     454:	84 e1       	ldi	r24, 0x14	; 20
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
				
				Delay_ms(500);
     45c:	24 ef       	ldi	r18, 0xF4	; 244
     45e:	31 e0       	ldi	r19, 0x01	; 1
     460:	40 e0       	ldi	r20, 0x00	; 0
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
				
				Lcd_clear();
     470:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Lcd_setCursor>
     47c:	81 30       	cpi	r24, 0x01	; 1
     47e:	09 f0       	breq	.+2      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     480:	9f c0       	rjmp	.+318    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_printString(cgau8_AMOUNTString) != LCD_STATUS_ERROR_OK)
     482:	80 e6       	ldi	r24, 0x60	; 96
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Lcd_printString>
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	09 f4       	brne	.+2      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     48e:	8d c0       	rjmp	.+282    	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
     490:	99 c0       	rjmp	.+306    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
					return APP_STATUS_ERROR_NOK;
			}else
			{
			Lcd_printLCD((uint8_t*)"  Please Wait", (uint8_t*)" Processing....");
     492:	62 e2       	ldi	r22, 0x22	; 34
     494:	71 e0       	ldi	r23, 0x01	; 1
     496:	82 e3       	ldi	r24, 0x32	; 50
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
				
			if(f32_balance < f32_amount)
     49e:	a7 01       	movw	r20, r14
     4a0:	96 01       	movw	r18, r12
     4a2:	c3 01       	movw	r24, r6
     4a4:	b2 01       	movw	r22, r4
     4a6:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <__cmpsf2>
     4aa:	88 23       	and	r24, r24
     4ac:	0c f5       	brge	.+66     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
			{
				Lcd_printLCD((uint8_t*)"  Insufficient", (uint8_t*)"      Fund");
     4ae:	60 e4       	ldi	r22, 0x40	; 64
     4b0:	71 e0       	ldi	r23, 0x01	; 1
     4b2:	8b e4       	ldi	r24, 0x4B	; 75
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
					
				Delay_ms(500);
     4ba:	24 ef       	ldi	r18, 0xF4	; 244
     4bc:	31 e0       	ldi	r19, 0x01	; 1
     4be:	40 e0       	ldi	r20, 0x00	; 0
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
					
				Lcd_clear();
     4ce:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Lcd_setCursor>
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	09 f0       	breq	.+2      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
     4de:	74 c0       	rjmp	.+232    	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
				return APP_STATUS_ERROR_NOK;
				if(Lcd_printString(cgau8_AMOUNTString) != LCD_STATUS_ERROR_OK)
     4e0:	80 e6       	ldi	r24, 0x60	; 96
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Lcd_printString>
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	09 f4       	brne	.+2      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     4ec:	5e c0       	rjmp	.+188    	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
     4ee:	6e c0       	rjmp	.+220    	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
				return APP_STATUS_ERROR_NOK;
				}else/****************** Transaction Successfull ******************/
				{
					Lcd_printLCD((uint8_t*)"   Successful", (uint8_t*)"  Transaction");
     4f0:	6a e5       	ldi	r22, 0x5A	; 90
     4f2:	71 e0       	ldi	r23, 0x01	; 1
     4f4:	88 e6       	ldi	r24, 0x68	; 104
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
						
					Motor_run(MOTOR_CASH_ID, 100, MOTOR_DIR_CLK_WISE);
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	64 e6       	ldi	r22, 0x64	; 100
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 26 10 	call	0x204c	; 0x204c <Motor_run>
					Delay_ms(1000);
     506:	28 ee       	ldi	r18, 0xE8	; 232
     508:	33 e0       	ldi	r19, 0x03	; 3
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
					Motor_stop(MOTOR_CASH_ID);
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <Motor_stop>
					gu8_USER_Mode_State = USER_IDLE;
     520:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <gu8_USER_Mode_State>
						
					f32_balance -= f32_amount;
     524:	a7 01       	movw	r20, r14
     526:	96 01       	movw	r18, r12
     528:	c3 01       	movw	r24, r6
     52a:	b2 01       	movw	r22, r4
     52c:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__subsf3>
     530:	6b 01       	movw	r12, r22
     532:	7c 01       	movw	r14, r24
					EmptyString(gstr_clientdata.au8_Balance);
     534:	85 e9       	ldi	r24, 0x95	; 149
     536:	95 e0       	ldi	r25, 0x05	; 5
     538:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
     53c:	45 e9       	ldi	r20, 0x95	; 149
     53e:	55 e0       	ldi	r21, 0x05	; 5
     540:	c7 01       	movw	r24, r14
     542:	b6 01       	movw	r22, r12
     544:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <floatToString>
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
     548:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <gu8_clientIndex>
     54c:	82 95       	swap	r24
     54e:	88 0f       	add	r24, r24
     550:	80 7e       	andi	r24, 0xE0	; 224
     552:	10 e3       	ldi	r17, 0x30	; 48
     554:	18 0f       	add	r17, r24
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     556:	85 e9       	ldi	r24, 0x95	; 149
     558:	95 e0       	ldi	r25, 0x05	; 5
     55a:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
					f32_balance -= f32_amount;
					EmptyString(gstr_clientdata.au8_Balance);
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
     55e:	48 2f       	mov	r20, r24
     560:	50 e0       	ldi	r21, 0x00	; 0
     562:	65 e9       	ldi	r22, 0x95	; 149
     564:	75 e0       	ldi	r23, 0x05	; 5
     566:	81 2f       	mov	r24, r17
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 ef 0b 	call	0x17de	; 0x17de <Eeprom_24_writePacket>
     56e:	81 30       	cpi	r24, 0x01	; 1
     570:	79 f5       	brne	.+94     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
						
					Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
     572:	65 e9       	ldi	r22, 0x95	; 149
     574:	75 e0       	ldi	r23, 0x05	; 5
     576:	86 e7       	ldi	r24, 0x76	; 118
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
					Delay_ms(1000);
     57e:	28 ee       	ldi	r18, 0xE8	; 232
     580:	33 e0       	ldi	r19, 0x03	; 3
     582:	40 e0       	ldi	r20, 0x00	; 0
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH); //Card Out
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	82 e1       	ldi	r24, 0x12	; 18
     596:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     59a:	65 e8       	ldi	r22, 0x85	; 133
     59c:	71 e0       	ldi	r23, 0x01	; 1
     59e:	84 e9       	ldi	r24, 0x94	; 148
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
						
					return APP_STATUS_ERROR_OK;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	14 c0       	rjmp	.+40     	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
				}
			}
		}
		Delay_ms(200);
     5aa:	28 ec       	ldi	r18, 0xC8	; 200
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	40 e0       	ldi	r20, 0x00	; 0
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
     5be:	1b cf       	rjmp	.-458    	; 0x3f6 <AppUSER_startTransaction+0x54>
				
				Delay_ms(500);
				
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	07 c0       	rjmp	.+14     	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
				if(Lcd_printString(cgau8_AMOUNTString) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
					
				Delay_ms(500);
					
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
				if(Lcd_printString(cgau8_AMOUNTString) != LCD_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
					floatToString(f32_balance, gstr_clientdata.au8_Balance);
						
					uint8_t u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE;
					if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, \
					stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     5d0:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
		Delay_ms(200);
	}
}
     5d2:	28 96       	adiw	r28, 0x08	; 8
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	bf 90       	pop	r11
     5ee:	af 90       	pop	r10
     5f0:	9f 90       	pop	r9
     5f2:	8f 90       	pop	r8
     5f4:	7f 90       	pop	r7
     5f6:	6f 90       	pop	r6
     5f8:	5f 90       	pop	r5
     5fa:	4f 90       	pop	r4
     5fc:	08 95       	ret

000005fe <AppUSER_checkPin>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to check the user's input pin if right or not.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_checkPin(void)
{
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	00 d0       	rcall	.+0      	; 0x606 <AppUSER_checkPin+0x8>
     606:	00 d0       	rcall	.+0      	; 0x608 <AppUSER_checkPin+0xa>
     608:	1f 92       	push	r1
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_inputKPD[5] = {0};
     60e:	fe 01       	movw	r30, r28
     610:	31 96       	adiw	r30, 0x01	; 1
     612:	85 e0       	ldi	r24, 0x05	; 5
     614:	df 01       	movw	r26, r30
     616:	1d 92       	st	X+, r1
     618:	8a 95       	dec	r24
     61a:	e9 f7       	brne	.-6      	; 0x616 <AppUSER_checkPin+0x18>
	enuApp_Status_t KeypdaStatus = 0;
	Kpd_enablePass = 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <Kpd_enablePass>
	uint8_t u8_loopCounter = 0;
     622:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		EmptyString(au8_inputKPD);
     624:	ce 01       	movw	r24, r28
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
		KeypdaStatus = AppUSER_ReportKeypad(au8_inputKPD);
     62c:	ce 01       	movw	r24, r28
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	0e 94 3c 01 	call	0x278	; 0x278 <AppUSER_ReportKeypad>
			
		if(KeypdaStatus == APP_STATUS_KPD_NUM)
     634:	87 30       	cpi	r24, 0x07	; 7
     636:	09 f0       	breq	.+2      	; 0x63a <AppUSER_checkPin+0x3c>
     638:	5b c0       	rjmp	.+182    	; 0x6f0 <AppUSER_checkPin+0xf2>
		{
			u8_loopCounter++;
     63a:	1f 5f       	subi	r17, 0xFF	; 255
			if(stringCompare(au8_inputKPD, gstr_userCardData.au8_pinNum) != 1)
     63c:	61 eb       	ldi	r22, 0xB1	; 177
     63e:	75 e0       	ldi	r23, 0x05	; 5
     640:	ce 01       	movw	r24, r28
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	0e 94 c5 19 	call	0x338a	; 0x338a <stringCompare>
     648:	81 30       	cpi	r24, 0x01	; 1
     64a:	09 f4       	brne	.+2      	; 0x64e <AppUSER_checkPin+0x50>
     64c:	47 c0       	rjmp	.+142    	; 0x6dc <AppUSER_checkPin+0xde>
			{
				if(u8_loopCounter == MAX_PIN_TRIAL)
     64e:	13 30       	cpi	r17, 0x03	; 3
     650:	31 f5       	brne	.+76     	; 0x69e <AppUSER_checkPin+0xa0>
				{
					Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)" ");
     652:	65 e0       	ldi	r22, 0x05	; 5
     654:	71 e0       	ldi	r23, 0x01	; 1
     656:	82 ea       	ldi	r24, 0xA2	; 162
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
					Delay_ms(1000);
     65e:	28 ee       	ldi	r18, 0xE8	; 232
     660:	33 e0       	ldi	r19, 0x03	; 3
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
					Lcd_printLCD((uint8_t*)"Please Contact", (uint8_t*)"Customer Service");
     672:	61 eb       	ldi	r22, 0xB1	; 177
     674:	71 e0       	ldi	r23, 0x01	; 1
     676:	82 ec       	ldi	r24, 0xC2	; 194
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
					Delay_ms(1000);
     67e:	28 ee       	ldi	r18, 0xE8	; 232
     680:	33 e0       	ldi	r19, 0x03	; 3
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
					Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     692:	61 e0       	ldi	r22, 0x01	; 1
     694:	82 e1       	ldi	r24, 0x12	; 18
     696:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
					return APP_STATUS_PIN_NOT_CORRECT;
     69a:	89 e0       	ldi	r24, 0x09	; 9
     69c:	37 c0       	rjmp	.+110    	; 0x70c <AppUSER_checkPin+0x10e>
				}
				Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)"   Try Again");
     69e:	61 ed       	ldi	r22, 0xD1	; 209
     6a0:	71 e0       	ldi	r23, 0x01	; 1
     6a2:	82 ea       	ldi	r24, 0xA2	; 162
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
				Delay_ms(500);
     6aa:	24 ef       	ldi	r18, 0xF4	; 244
     6ac:	31 e0       	ldi	r19, 0x01	; 1
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
					
				Lcd_clear();
     6be:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Lcd_clear>
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Lcd_setCursor>
     6ca:	81 30       	cpi	r24, 0x01	; 1
     6cc:	e1 f4       	brne	.+56     	; 0x706 <AppUSER_checkPin+0x108>
					return APP_STATUS_ERROR_NOK;
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     6ce:	8e ed       	ldi	r24, 0xDE	; 222
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Lcd_printString>
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	59 f0       	breq	.+22     	; 0x6f0 <AppUSER_checkPin+0xf2>
     6da:	17 c0       	rjmp	.+46     	; 0x70a <AppUSER_checkPin+0x10c>
					return APP_STATUS_ERROR_NOK;
			}else
			{
				Lcd_printLCD((uint8_t*)"  Please Wait", (uint8_t*)" Processing....");
     6dc:	62 e2       	ldi	r22, 0x22	; 34
     6de:	71 e0       	ldi	r23, 0x01	; 1
     6e0:	82 e3       	ldi	r24, 0x32	; 50
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
					Kpd_enablePass = 0;
     6e8:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <Kpd_enablePass>
				return APP_STATUS_PIN_CORRECT;
     6ec:	88 e0       	ldi	r24, 0x08	; 8
     6ee:	0e c0       	rjmp	.+28     	; 0x70c <AppUSER_checkPin+0x10e>
			}
		}
		Delay_ms(200);
     6f0:	28 ec       	ldi	r18, 0xC8	; 200
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
	}
     704:	8f cf       	rjmp	.-226    	; 0x624 <AppUSER_checkPin+0x26>
				Lcd_printLCD((uint8_t*)" Incorrect PIN", (uint8_t*)"   Try Again");
				Delay_ms(500);
					
				Lcd_clear();
				if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	01 c0       	rjmp	.+2      	; 0x70c <AppUSER_checkPin+0x10e>
				if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
     70a:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		Delay_ms(200);
	}
	Kpd_enablePass = 0;
}
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	08 95       	ret

0000071e <AppUSER_startProcess>:
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to start processing the card.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
     71e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Lcd_setCursor>
     72a:	81 30       	cpi	r24, 0x01	; 1
     72c:	09 f0       	breq	.+2      	; 0x730 <AppUSER_startProcess+0x12>
     72e:	50 c0       	rjmp	.+160    	; 0x7d0 <AppUSER_startProcess+0xb2>
	return APP_STATUS_ERROR_NOK;
	enuApp_Status_t PAN_status = AppUSER_checkPan();
     730:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <AppUSER_checkPan>
	if(PAN_status == APP_STATUS_PAN_NOT_FOUND)
     734:	8b 30       	cpi	r24, 0x0B	; 11
     736:	61 f4       	brne	.+24     	; 0x750 <AppUSER_startProcess+0x32>
	{
		Lcd_printLCD((uint8_t*)"Your Card is not", (uint8_t*)"in the Database");
     738:	6d ee       	ldi	r22, 0xED	; 237
     73a:	71 e0       	ldi	r23, 0x01	; 1
     73c:	8d ef       	ldi	r24, 0xFD	; 253
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
		Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	82 e1       	ldi	r24, 0x12	; 18
     748:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
		return APP_STATUS_PAN_NOT_FOUND;
     74c:	8b e0       	ldi	r24, 0x0B	; 11
     74e:	08 95       	ret
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
     750:	8e ed       	ldi	r24, 0xDE	; 222
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Lcd_printString>
     758:	81 30       	cpi	r24, 0x01	; 1
     75a:	e1 f5       	brne	.+120    	; 0x7d4 <AppUSER_startProcess+0xb6>
		return APP_STATUS_ERROR_NOK;
	enuApp_Status_t PIN_status = AppUSER_checkPin();
     75c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <AppUSER_checkPin>
	if(PIN_status == APP_STATUS_PIN_NOT_CORRECT)
     760:	89 30       	cpi	r24, 0x09	; 9
     762:	d1 f1       	breq	.+116    	; 0x7d8 <AppUSER_startProcess+0xba>
	{
		return APP_STATUS_PIN_NOT_CORRECT;
	}else if(PIN_status != APP_STATUS_PIN_CORRECT)
     764:	88 30       	cpi	r24, 0x08	; 8
     766:	d1 f5       	brne	.+116    	; 0x7dc <AppUSER_startProcess+0xbe>
		return APP_STATUS_ERROR_NOK;
	
	
	Lcd_printLCD((uint8_t*)"    Welcome", (uint8_t*)"    Customer");
     768:	6e e0       	ldi	r22, 0x0E	; 14
     76a:	72 e0       	ldi	r23, 0x02	; 2
     76c:	8b e1       	ldi	r24, 0x1B	; 27
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
	Delay_ms(1000);
     774:	28 ee       	ldi	r18, 0xE8	; 232
     776:	33 e0       	ldi	r19, 0x03	; 3
     778:	40 e0       	ldi	r20, 0x00	; 0
     77a:	50 e0       	ldi	r21, 0x00	; 0
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
	
	Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
     788:	65 e9       	ldi	r22, 0x95	; 149
     78a:	75 e0       	ldi	r23, 0x05	; 5
     78c:	86 e7       	ldi	r24, 0x76	; 118
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
	Delay_ms(1000);
     794:	28 ee       	ldi	r18, 0xE8	; 232
     796:	33 e0       	ldi	r19, 0x03	; 3
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
	
	Lcd_clear();
     7a8:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Lcd_clear>
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Lcd_setCursor>
     7b4:	81 30       	cpi	r24, 0x01	; 1
     7b6:	a1 f4       	brne	.+40     	; 0x7e0 <AppUSER_startProcess+0xc2>
		return APP_STATUS_ERROR_NOK;
	if(Lcd_printString(cgau8_AMOUNTString) != LCD_STATUS_ERROR_OK)
     7b8:	80 e6       	ldi	r24, 0x60	; 96
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Lcd_printString>
     7c0:	81 30       	cpi	r24, 0x01	; 1
     7c2:	81 f4       	brne	.+32     	; 0x7e4 <AppUSER_startProcess+0xc6>
		return APP_STATUS_ERROR_NOK;
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
     7c4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <AppUSER_startTransaction>
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	69 f0       	breq	.+26     	; 0x7e6 <AppUSER_startProcess+0xc8>
		return APP_STATUS_ERROR_NOK;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	08 95       	ret
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_startProcess(strCardData_t* pstr_CardData)
{
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
	return APP_STATUS_ERROR_NOK;
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	08 95       	ret
		Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
		return APP_STATUS_PAN_NOT_FOUND;
	}
	
	if(Lcd_printString((uint8_t*)"Enter Your PIN") != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	08 95       	ret
	enuApp_Status_t PIN_status = AppUSER_checkPin();
	if(PIN_status == APP_STATUS_PIN_NOT_CORRECT)
	{
		return APP_STATUS_PIN_NOT_CORRECT;
     7d8:	89 e0       	ldi	r24, 0x09	; 9
     7da:	08 95       	ret
	}else if(PIN_status != APP_STATUS_PIN_CORRECT)
		return APP_STATUS_ERROR_NOK;
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	08 95       	ret
	Lcd_printLCD((uint8_t*)"  Your Balance", gstr_clientdata.au8_Balance);
	Delay_ms(1000);
	
	Lcd_clear();
	if(Lcd_setCursor(0, 0) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	08 95       	ret
	if(Lcd_printString(cgau8_AMOUNTString) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     7e4:	80 e0       	ldi	r24, 0x00	; 0
	if(AppUSER_startTransaction() != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     7e6:	08 95       	ret

000007e8 <AppUSER_getCardData>:
* Parameters (out): pstr_CardData - Structure to save the card's data in.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to save the Name, PAN and the PIN of the Card in the Card data Struct
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_getCardData(strCardData_t* pstr_CardData, uint8_t *pu8_dataString)
{
     7e8:	ac 01       	movw	r20, r24
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
     7ea:	20 e0       	ldi	r18, 0x00	; 0
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0a c0       	rjmp	.+20     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     7f0:	fb 01       	movw	r30, r22
     7f2:	e9 0f       	add	r30, r25
     7f4:	f1 1d       	adc	r31, r1
     7f6:	80 81       	ld	r24, Z
     7f8:	fa 01       	movw	r30, r20
     7fa:	e2 0f       	add	r30, r18
     7fc:	f1 1d       	adc	r31, r1
     7fe:	80 83       	st	Z, r24
		u8_dataIndex++;
     800:	2f 5f       	subi	r18, 0xFF	; 255
{
	
	uint8_t u8_frameIndex=0;
	uint8_t u8_dataIndex=0;
	/****************** Get Card Name **********************/
	for(u8_frameIndex=1; u8_frameIndex<MAX_NAME_LENGTH+1 ; u8_frameIndex++)
     802:	9f 5f       	subi	r25, 0xFF	; 255
     804:	9a 30       	cpi	r25, 0x0A	; 10
     806:	a0 f3       	brcs	.-24     	; 0x7f0 <AppUSER_getCardData+0x8>
	{
		pstr_CardData->au8_cardHolderName[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
     808:	fa 01       	movw	r30, r20
     80a:	e2 0f       	add	r30, r18
     80c:	f1 1d       	adc	r31, r1
     80e:	10 82       	st	Z, r1
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
     810:	20 e0       	ldi	r18, 0x00	; 0
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     812:	9b e0       	ldi	r25, 0x0B	; 11
     814:	0a c0       	rjmp	.+20     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     816:	fb 01       	movw	r30, r22
     818:	e9 0f       	add	r30, r25
     81a:	f1 1d       	adc	r31, r1
     81c:	80 81       	ld	r24, Z
     81e:	fa 01       	movw	r30, r20
     820:	e2 0f       	add	r30, r18
     822:	f1 1d       	adc	r31, r1
     824:	82 87       	std	Z+10, r24	; 0x0a
		u8_dataIndex++;
     826:	2f 5f       	subi	r18, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_cardHolderName[u8_dataIndex] = '\0';
	/****************** Get Card PAN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=11; u8_frameIndex<MAX_PAN_LENGTH+11 ; u8_frameIndex++)
     828:	9f 5f       	subi	r25, 0xFF	; 255
     82a:	94 31       	cpi	r25, 0x14	; 20
     82c:	a0 f3       	brcs	.-24     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
	{
		pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
     82e:	fa 01       	movw	r30, r20
     830:	e2 0f       	add	r30, r18
     832:	f1 1d       	adc	r31, r1
     834:	12 86       	std	Z+10, r1	; 0x0a
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
     836:	90 e0       	ldi	r25, 0x00	; 0
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     838:	85 e1       	ldi	r24, 0x15	; 21
     83a:	0a c0       	rjmp	.+20     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
     83c:	fb 01       	movw	r30, r22
     83e:	e8 0f       	add	r30, r24
     840:	f1 1d       	adc	r31, r1
     842:	20 81       	ld	r18, Z
     844:	fa 01       	movw	r30, r20
     846:	e9 0f       	add	r30, r25
     848:	f1 1d       	adc	r31, r1
     84a:	24 8b       	std	Z+20, r18	; 0x14
		u8_dataIndex++;
     84c:	9f 5f       	subi	r25, 0xFF	; 255
		u8_dataIndex++;
	}
	pstr_CardData->au8_primaryAccountNumber[u8_dataIndex] = '\0';
	/****************** Get Card PIN **********************/
	u8_dataIndex=0;
	for(u8_frameIndex=21; u8_frameIndex<MAX_PIN_LENGTH+21 ; u8_frameIndex++)
     84e:	8f 5f       	subi	r24, 0xFF	; 255
     850:	89 31       	cpi	r24, 0x19	; 25
     852:	a0 f3       	brcs	.-24     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
	{
		pstr_CardData->au8_pinNum[u8_dataIndex] = pu8_dataString[u8_frameIndex];
		u8_dataIndex++;
	}
	pstr_CardData->au8_pinNum[u8_dataIndex] = '\0';
     854:	fa 01       	movw	r30, r20
     856:	e9 0f       	add	r30, r25
     858:	f1 1d       	adc	r31, r1
     85a:	14 8a       	std	Z+20, r1	; 0x14
	return APP_STATUS_ERROR_OK;
}
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	08 95       	ret

00000860 <AppUSER_insertCard>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to run the Card Inserting Process.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppUSER_insertCard(void)
{
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	da 95       	dec	r29
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
	gu8_USER_Mode_State = USER_BUSY;
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <gu8_USER_Mode_State>
	uint8_t u8_buttonVal = PIN_LOW;
     87c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     87e:	fe 01       	movw	r30, r28
     880:	32 96       	adiw	r30, 0x02	; 2
     882:	8f ef       	ldi	r24, 0xFF	; 255
     884:	df 01       	movw	r26, r30
     886:	1d 92       	st	X+, r1
     888:	8a 95       	dec	r24
     88a:	e9 f7       	brne	.-6      	; 0x886 <AppUSER_insertCard+0x26>
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
     88c:	67 e2       	ldi	r22, 0x27	; 39
     88e:	72 e0       	ldi	r23, 0x02	; 2
     890:	86 e3       	ldi	r24, 0x36	; 54
     892:	92 e0       	ldi	r25, 0x02	; 2
     894:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
	while(u8_buttonVal == PIN_LOW)
     898:	0f c0       	rjmp	.+30     	; 0x8b8 <AppUSER_insertCard+0x58>
	{
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	0e 94 6f 0a 	call	0x14de	; 0x14de <Button_updateState>
     8a0:	81 30       	cpi	r24, 0x01	; 1
     8a2:	09 f0       	breq	.+2      	; 0x8a6 <AppUSER_insertCard+0x46>
     8a4:	85 c0       	rjmp	.+266    	; 0x9b0 <AppUSER_insertCard+0x150>
			return APP_STATUS_ERROR_NOK;
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
     8a6:	be 01       	movw	r22, r28
     8a8:	6f 5f       	subi	r22, 0xFF	; 255
     8aa:	7f 4f       	sbci	r23, 0xFF	; 255
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <Button_getState>
     8b2:	81 30       	cpi	r24, 0x01	; 1
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <AppUSER_insertCard+0x58>
     8b6:	7e c0       	rjmp	.+252    	; 0x9b4 <AppUSER_insertCard+0x154>
	gu8_USER_Mode_State = USER_BUSY;
	uint8_t u8_buttonVal = PIN_LOW;
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
	while(u8_buttonVal == PIN_LOW)
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	88 23       	and	r24, r24
     8bc:	71 f3       	breq	.-36     	; 0x89a <AppUSER_insertCard+0x3a>
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	}
	Lcd_printLCD((uint8_t*)"Button Pressed",(uint8_t*)"Receiving Data");
     8be:	67 e4       	ldi	r22, 0x47	; 71
     8c0:	72 e0       	ldi	r23, 0x02	; 2
     8c2:	86 e5       	ldi	r24, 0x56	; 86
     8c4:	92 e0       	ldi	r25, 0x02	; 2
     8c6:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	82 e1       	ldi	r24, 0x12	; 18
     8ce:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
	EmptyString(au8_inputString);
     8d2:	ce 01       	movw	r24, r28
     8d4:	02 96       	adiw	r24, 0x02	; 2
     8d6:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
	while (au8_inputString[0] != '#')
     8da:	3d c0       	rjmp	.+122    	; 0x956 <AppUSER_insertCard+0xf6>
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
     8dc:	6c e1       	ldi	r22, 0x1C	; 28
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	ce 01       	movw	r24, r28
     8e2:	02 96       	adiw	r24, 0x02	; 2
     8e4:	0e 94 65 19 	call	0x32ca	; 0x32ca <Spi_SlaveReceivePacket>
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	09 f0       	breq	.+2      	; 0x8ee <AppUSER_insertCard+0x8e>
     8ec:	65 c0       	rjmp	.+202    	; 0x9b8 <AppUSER_insertCard+0x158>
			return APP_STATUS_ERROR_NOK;
		if((au8_inputString[0] == '*') && (au8_inputString[1] == '*'))
     8ee:	8a 81       	ldd	r24, Y+2	; 0x02
     8f0:	8a 32       	cpi	r24, 0x2A	; 42
     8f2:	89 f5       	brne	.+98     	; 0x956 <AppUSER_insertCard+0xf6>
     8f4:	8b 81       	ldd	r24, Y+3	; 0x03
     8f6:	8a 32       	cpi	r24, 0x2A	; 42
     8f8:	71 f5       	brne	.+92     	; 0x956 <AppUSER_insertCard+0xf6>
		{
			Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_HIGH);
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	82 e1       	ldi	r24, 0x12	; 18
     8fe:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
			Lcd_printLCD((uint8_t*)"Card is not",(uint8_t*)"Programmed");
     902:	65 e6       	ldi	r22, 0x65	; 101
     904:	72 e0       	ldi	r23, 0x02	; 2
     906:	82 e0       	ldi	r24, 0x02	; 2
     908:	92 e0       	ldi	r25, 0x02	; 2
     90a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
			Delay_ms(1000);
     90e:	28 ee       	ldi	r18, 0xE8	; 232
     910:	33 e0       	ldi	r19, 0x03	; 3
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
			Lcd_printLCD((uint8_t*)"Please Contact",(uint8_t*)"Customer Service");
     922:	61 eb       	ldi	r22, 0xB1	; 177
     924:	71 e0       	ldi	r23, 0x01	; 1
     926:	82 ec       	ldi	r24, 0xC2	; 194
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
			Delay_ms(1000);
     92e:	28 ee       	ldi	r18, 0xE8	; 232
     930:	33 e0       	ldi	r19, 0x03	; 3
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
			gu8_USER_Mode_State = USER_IDLE;
     942:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <gu8_USER_Mode_State>
			Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     946:	65 e8       	ldi	r22, 0x85	; 133
     948:	71 e0       	ldi	r23, 0x01	; 1
     94a:	84 e9       	ldi	r24, 0x94	; 148
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
			return APP_STATUS_ERROR_OK;
     952:	11 e0       	ldi	r17, 0x01	; 1
     954:	34 c0       	rjmp	.+104    	; 0x9be <AppUSER_insertCard+0x15e>
			return APP_STATUS_ERROR_NOK;
	}
	Lcd_printLCD((uint8_t*)"Button Pressed",(uint8_t*)"Receiving Data");
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
	EmptyString(au8_inputString);
	while (au8_inputString[0] != '#')
     956:	8a 81       	ldd	r24, Y+2	; 0x02
     958:	83 32       	cpi	r24, 0x23	; 35
     95a:	09 f0       	breq	.+2      	; 0x95e <AppUSER_insertCard+0xfe>
     95c:	bf cf       	rjmp	.-130    	; 0x8dc <AppUSER_insertCard+0x7c>
			gu8_USER_Mode_State = USER_IDLE;
			Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
			return APP_STATUS_ERROR_OK;
		}
	}
	if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
     95e:	be 01       	movw	r22, r28
     960:	6e 5f       	subi	r22, 0xFE	; 254
     962:	7f 4f       	sbci	r23, 0xFF	; 255
     964:	8d e9       	ldi	r24, 0x9D	; 157
     966:	95 e0       	ldi	r25, 0x05	; 5
     968:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <AppUSER_getCardData>
     96c:	18 2f       	mov	r17, r24
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	29 f5       	brne	.+74     	; 0x9bc <AppUSER_insertCard+0x15c>
		return APP_STATUS_ERROR_NOK;
		
	enuApp_Status_t processState = AppUSER_startProcess(&gstr_userCardData);
     972:	8d e9       	ldi	r24, 0x9D	; 157
     974:	95 e0       	ldi	r25, 0x05	; 5
     976:	0e 94 8f 03 	call	0x71e	; 0x71e <AppUSER_startProcess>
	if((processState == APP_STATUS_PAN_NOT_FOUND) || (processState == APP_STATUS_PIN_NOT_CORRECT))
     97a:	8b 30       	cpi	r24, 0x0B	; 11
     97c:	11 f0       	breq	.+4      	; 0x982 <AppUSER_insertCard+0x122>
     97e:	89 30       	cpi	r24, 0x09	; 9
     980:	99 f4       	brne	.+38     	; 0x9a8 <AppUSER_insertCard+0x148>
	{
		Delay_ms(1000);
     982:	28 ee       	ldi	r18, 0xE8	; 232
     984:	33 e0       	ldi	r19, 0x03	; 3
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
		gu8_USER_Mode_State = USER_IDLE;
     996:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <gu8_USER_Mode_State>
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     99a:	65 e8       	ldi	r22, 0x85	; 133
     99c:	71 e0       	ldi	r23, 0x01	; 1
     99e:	84 e9       	ldi	r24, 0x94	; 148
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
     9a6:	0b c0       	rjmp	.+22     	; 0x9be <AppUSER_insertCard+0x15e>
	}else if (processState != APP_STATUS_ERROR_OK)
     9a8:	81 30       	cpi	r24, 0x01	; 1
     9aa:	49 f0       	breq	.+18     	; 0x9be <AppUSER_insertCard+0x15e>
		return APP_STATUS_ERROR_NOK;
     9ac:	10 e0       	ldi	r17, 0x00	; 0
     9ae:	07 c0       	rjmp	.+14     	; 0x9be <AppUSER_insertCard+0x15e>
	
	Lcd_printLCD((uint8_t*)"Waiting for Card", (uint8_t*)"  Press Button");
	while(u8_buttonVal == PIN_LOW)
	{
		if(Button_updateState(BUTTON_CARD)!=BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     9b0:	10 e0       	ldi	r17, 0x00	; 0
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <AppUSER_insertCard+0x15e>
		if(Button_getState(BUTTON_CARD, &u8_buttonVal) != BTTN_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     9b4:	10 e0       	ldi	r17, 0x00	; 0
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <AppUSER_insertCard+0x15e>
	Dio_writePin(DIO_SIG_CHANNEL_ID, PIN_LOW);
	EmptyString(au8_inputString);
	while (au8_inputString[0] != '#')
	{
		if(Spi_SlaveReceivePacket(au8_inputString, CARD_FRAME_LENGTH) != SPI_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     9b8:	10 e0       	ldi	r17, 0x00	; 0
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <AppUSER_insertCard+0x15e>
			Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
			return APP_STATUS_ERROR_OK;
		}
	}
	if(AppUSER_getCardData(&gstr_userCardData, au8_inputString) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     9bc:	10 e0       	ldi	r17, 0x00	; 0
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
	}else if (processState != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	
	return APP_STATUS_ERROR_OK;
}
     9be:	81 2f       	mov	r24, r17
     9c0:	d3 95       	inc	r29
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	08 95       	ret

000009d4 <App_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
     9d4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <enuCurrentAppStatus>
     9d8:	84 30       	cpi	r24, 0x04	; 4
     9da:	09 f4       	brne	.+2      	; 0x9de <App_init+0xa>
     9dc:	bd c0       	rjmp	.+378    	; 0xb58 <App_init+0x184>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(LCD_STATUS_ERROR_OK != Lcd_init())
     9de:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <Lcd_init>
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <App_init+0x14>
     9e6:	97 c0       	rjmp	.+302    	; 0xb16 <App_init+0x142>
		return APP_STATUS_ERROR_NOK;
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
     9e8:	0e 94 d7 10 	call	0x21ae	; 0x21ae <Terminal_init>
     9ec:	81 30       	cpi	r24, 0x01	; 1
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <App_init+0x1e>
     9f0:	94 c0       	rjmp	.+296    	; 0xb1a <App_init+0x146>
		return APP_STATUS_ERROR_NOK;
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
     9f2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <Eeprom_24_init>
     9f6:	81 30       	cpi	r24, 0x01	; 1
     9f8:	09 f0       	breq	.+2      	; 0x9fc <App_init+0x28>
     9fa:	91 c0       	rjmp	.+290    	; 0xb1e <App_init+0x14a>
		return APP_STATUS_ERROR_NOK;
	if(SPI_STATUS_ERROR_OK != Spi_init())
     9fc:	0e 94 37 19 	call	0x326e	; 0x326e <Spi_init>
     a00:	81 30       	cpi	r24, 0x01	; 1
     a02:	09 f0       	breq	.+2      	; 0xa06 <App_init+0x32>
     a04:	8e c0       	rjmp	.+284    	; 0xb22 <App_init+0x14e>
		return APP_STATUS_ERROR_NOK;
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
     a06:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <Keypad_init>
     a0a:	81 30       	cpi	r24, 0x01	; 1
     a0c:	09 f0       	breq	.+2      	; 0xa10 <App_init+0x3c>
     a0e:	8b c0       	rjmp	.+278    	; 0xb26 <App_init+0x152>
		return APP_STATUS_ERROR_NOK;
	if(LM35_STATUS_ERROR_OK != LM35_init())
     a10:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LM35_init>
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	09 f0       	breq	.+2      	; 0xa1a <App_init+0x46>
     a18:	88 c0       	rjmp	.+272    	; 0xb2a <App_init+0x156>
		return APP_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
     a1a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <Motor_init>
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	09 f0       	breq	.+2      	; 0xa24 <App_init+0x50>
     a22:	85 c0       	rjmp	.+266    	; 0xb2e <App_init+0x15a>
		return APP_STATUS_ERROR_NOK;
	if(BTTN_STATUS_ERROR_OK != Button_init())
     a24:	0e 94 4a 0a 	call	0x1494	; 0x1494 <Button_init>
     a28:	81 30       	cpi	r24, 0x01	; 1
     a2a:	09 f0       	breq	.+2      	; 0xa2e <App_init+0x5a>
     a2c:	82 c0       	rjmp	.+260    	; 0xb32 <App_init+0x15e>
	/* Only for Testing */
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
     a2e:	8e e4       	ldi	r24, 0x4E	; 78
     a30:	95 e0       	ldi	r25, 0x05	; 5
     a32:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Lcd_printString>
     a36:	81 30       	cpi	r24, 0x01	; 1
     a38:	09 f0       	breq	.+2      	; 0xa3c <App_init+0x68>
     a3a:	7d c0       	rjmp	.+250    	; 0xb36 <App_init+0x162>
		return APP_STATUS_ERROR_NOK;
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
     a3c:	80 e4       	ldi	r24, 0x40	; 64
     a3e:	95 e0       	ldi	r25, 0x05	; 5
     a40:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	09 f0       	breq	.+2      	; 0xa4a <App_init+0x76>
     a48:	78 c0       	rjmp	.+240    	; 0xb3a <App_init+0x166>
		return APP_STATUS_ERROR_NOK;
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
     a4a:	6a e8       	ldi	r22, 0x8A	; 138
     a4c:	75 e0       	ldi	r23, 0x05	; 5
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Eeprom_24_readByte>
     a56:	81 30       	cpi	r24, 0x01	; 1
     a58:	09 f0       	breq	.+2      	; 0xa5c <App_init+0x88>
     a5a:	71 c0       	rjmp	.+226    	; 0xb3e <App_init+0x16a>
		return APP_STATUS_ERROR_NOK;
	Delay_ms(10);
     a5c:	2a e0       	ldi	r18, 0x0A	; 10
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
	
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
     a70:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <gu8_initData>
     a74:	8a 3a       	cpi	r24, 0xAA	; 170
     a76:	f9 f0       	breq	.+62     	; 0xab6 <App_init+0xe2>
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
     a78:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <gu8_ATMMode>
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
     a7c:	88 e5       	ldi	r24, 0x58	; 88
     a7e:	95 e0       	ldi	r25, 0x05	; 5
     a80:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
	
	if(gu8_initData != ATM_DB_FLAG_SET_VAL)
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
     a84:	48 2f       	mov	r20, r24
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	68 e5       	ldi	r22, 0x58	; 88
     a8a:	75 e0       	ldi	r23, 0x05	; 5
     a8c:	8b e0       	ldi	r24, 0x0B	; 11
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 ef 0b 	call	0x17de	; 0x17de <Eeprom_24_writePacket>
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	09 f0       	breq	.+2      	; 0xa9a <App_init+0xc6>
     a98:	54 c0       	rjmp	.+168    	; 0xb42 <App_init+0x16e>
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
		/* Lock the ATM For the User */
		Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
     a9a:	60 e7       	ldi	r22, 0x70	; 112
     a9c:	72 e0       	ldi	r23, 0x02	; 2
     a9e:	81 e8       	ldi	r24, 0x81	; 129
     aa0:	92 e0       	ldi	r25, 0x02	; 2
     aa2:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
		
		if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
     aa6:	82 e9       	ldi	r24, 0x92	; 146
     aa8:	92 e0       	ldi	r25, 0x02	; 2
     aaa:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	09 f0       	breq	.+2      	; 0xab4 <App_init+0xe0>
     ab2:	49 c0       	rjmp	.+146    	; 0xb46 <App_init+0x172>
     ab4:	2b c0       	rjmp	.+86     	; 0xb0c <App_init+0x138>
			return APP_STATUS_ERROR_NOK;
	}else
	{ /* Case it was previously registered == Contains data in the DB */
		gu8_ATMMode = ATM_MODE_USER;
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <gu8_ATMMode>
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
     abc:	48 e0       	ldi	r20, 0x08	; 8
     abe:	50 e0       	ldi	r21, 0x00	; 0
     ac0:	6c e7       	ldi	r22, 0x7C	; 124
     ac2:	75 e0       	ldi	r23, 0x05	; 5
     ac4:	83 e0       	ldi	r24, 0x03	; 3
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <Eeprom_24_readPacket>
     acc:	81 30       	cpi	r24, 0x01	; 1
     ace:	e9 f5       	brne	.+122    	; 0xb4a <App_init+0x176>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     ad0:	69 e8       	ldi	r22, 0x89	; 137
     ad2:	75 e0       	ldi	r23, 0x05	; 5
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Eeprom_24_readByte>
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	b9 f5       	brne	.+110    	; 0xb4e <App_init+0x17a>
			return APP_STATUS_ERROR_NOK;
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
     ae0:	45 e0       	ldi	r20, 0x05	; 5
     ae2:	50 e0       	ldi	r21, 0x00	; 0
     ae4:	64 e8       	ldi	r22, 0x84	; 132
     ae6:	75 e0       	ldi	r23, 0x05	; 5
     ae8:	8b e0       	ldi	r24, 0x0B	; 11
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 c8 0c 	call	0x1990	; 0x1990 <Eeprom_24_readPacket>
     af0:	81 30       	cpi	r24, 0x01	; 1
     af2:	79 f5       	brne	.+94     	; 0xb52 <App_init+0x17e>
			return APP_STATUS_ERROR_NOK;
		
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
     af4:	65 e8       	ldi	r22, 0x85	; 133
     af6:	71 e0       	ldi	r23, 0x01	; 1
     af8:	84 e9       	ldi	r24, 0x94	; 148
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
			
		if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
     b00:	85 ea       	ldi	r24, 0xA5	; 165
     b02:	92 e0       	ldi	r25, 0x02	; 2
     b04:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	29 f5       	brne	.+74     	; 0xb56 <App_init+0x182>
			return APP_STATUS_ERROR_NOK;
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
     b0c:	84 e0       	ldi	r24, 0x04	; 4
     b0e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <enuCurrentAppStatus>
	return APP_STATUS_ERROR_OK;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize Used Modules */
	if(LCD_STATUS_ERROR_OK != Lcd_init())
		return APP_STATUS_ERROR_NOK;
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	08 95       	ret
	if(TERMINAL_STATUS_ERROR_OK != Terminal_init())
		return APP_STATUS_ERROR_NOK;
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	08 95       	ret
	if(EEPROM_24_STATUS_ERROR_OK != Eeprom_24_init())
		return APP_STATUS_ERROR_NOK;
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	08 95       	ret
	if(SPI_STATUS_ERROR_OK != Spi_init())
		return APP_STATUS_ERROR_NOK;
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	08 95       	ret
	if(KEYPAD_STATUS_ERROR_OK != Keypad_init())
		return APP_STATUS_ERROR_NOK;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	08 95       	ret
	if(LM35_STATUS_ERROR_OK != LM35_init())
		return APP_STATUS_ERROR_NOK;
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return APP_STATUS_ERROR_NOK;
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	08 95       	ret
	if(BTTN_STATUS_ERROR_OK != Button_init())
		return APP_STATUS_ERROR_NOK;
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	08 95       	ret
// 	if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, 0xFF) != EEPROM_24_STATUS_ERROR_OK)
// 		return APP_STATUS_ERROR_NOK;
// 	Delay_ms(10);
	/**************************/
	if(Lcd_printString((uint8_t*)cgau8_LoadingString) != LCD_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	08 95       	ret
	if(Terminal_Out((uint8_t*)cgau8_ATMString) != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	08 95       	ret
	
	/* Check if the ATM was previously registered and has its database in the eeprom */
	if(Eeprom_24_readByte(ATM_DB_FLAG_ADDR, &gu8_initData) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	08 95       	ret
	{ /* Case not previously registered */
		gu8_ATMMode = ATM_MODE_ADMIN; // Set in ADMIN mode
		/* Read the Admin PIN from the memory */
		if(Eeprom_24_writePacket(ATM_DB_ATM_PIN_ADDR, (uint8_t*)ATM_DB_ATM_PIN_VAL,\
								stringLength((uint8_t*)ATM_DB_ATM_PIN_VAL)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	08 95       	ret
		/* Lock the ATM For the User */
		Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
		
		if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	08 95       	ret
	}else
	{ /* Case it was previously registered == Contains data in the DB */
		gu8_ATMMode = ATM_MODE_USER;
		
		if(Eeprom_24_readPacket(ATM_DB_MAX_AMNT_ADDR, gau8_maxAmount, 8) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	08 95       	ret
		if(Eeprom_24_readByte(ATM_DB_ACC_NUM_ADDR, &gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	08 95       	ret
		if(Eeprom_24_readPacket(ATM_DB_ATM_PIN_ADDR, gu8_ATMPin, 5) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	08 95       	ret
		
		Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
			
		if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     b56:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
     b58:	08 95       	ret

00000b5a <App_ReportTerminal>:
* Parameters (out): pu8_data - Pointer to variable to hold the input by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to report the terminal's input.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_ReportTerminal(uint8_t* pu8_data)
{
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	cf 5f       	subi	r28, 0xFF	; 255
     b68:	d1 09       	sbc	r29, r1
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	8c 01       	movw	r16, r24
	uint8_t au8_inputString[MAX_INPUT_SIZE]={0};
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	2f ef       	ldi	r18, 0xFF	; 255
     b7c:	fc 01       	movw	r30, r24
     b7e:	11 92       	st	Z+, r1
     b80:	2a 95       	dec	r18
     b82:	e9 f7       	brne	.-6      	; 0xb7e <App_ReportTerminal+0x24>
	enuTerminal_Status_t enuTermStatus = Terminal_In(au8_inputString);
     b84:	0e 94 07 11 	call	0x220e	; 0x220e <Terminal_In>
	if (enuTermStatus == TERMINAL_STATUS_INPUT_CHANGED)
     b88:	85 30       	cpi	r24, 0x05	; 5
     b8a:	39 f4       	brne	.+14     	; 0xb9a <App_ReportTerminal+0x40>
	{
		stringCopy(au8_inputString, pu8_data);
     b8c:	b8 01       	movw	r22, r16
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 04 1a 	call	0x3408	; 0x3408 <stringCopy>
		return APP_STATUS_ERROR_OK;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	05 c0       	rjmp	.+10     	; 0xba4 <App_ReportTerminal+0x4a>
	}else if(enuTermStatus != TERMINAL_STATUS_ERROR_OK)
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	11 f0       	breq	.+4      	; 0xba2 <App_ReportTerminal+0x48>
		return APP_STATUS_ERROR_NOK;
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	01 c0       	rjmp	.+2      	; 0xba4 <App_ReportTerminal+0x4a>
	return APP_STATUS_NO_OP;
     ba2:	86 e0       	ldi	r24, 0x06	; 6
}
     ba4:	c1 50       	subi	r28, 0x01	; 1
     ba6:	df 4f       	sbci	r29, 0xFF	; 255
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	08 95       	ret

00000bbc <AppADMIN_getInput>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the ADMIN Input Choice.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getInput(uint8_t* pu8_data)
{
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nYour Input: ") != TERMINAL_STATUS_ERROR_OK)
     bc2:	81 eb       	ldi	r24, 0xB1	; 177
     bc4:	92 e0       	ldi	r25, 0x02	; 2
     bc6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	c1 f4       	brne	.+48     	; 0xbfe <AppADMIN_getInput+0x42>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     bce:	ce 01       	movw	r24, r28
     bd0:	0e 94 ad 05 	call	0xb5a	; 0xb5a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	29 f0       	breq	.+10     	; 0xbe2 <AppADMIN_getInput+0x26>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     bd8:	11 f0       	breq	.+4      	; 0xbde <AppADMIN_getInput+0x22>
     bda:	86 30       	cpi	r24, 0x06	; 6
     bdc:	91 f4       	brne	.+36     	; 0xc02 <AppADMIN_getInput+0x46>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     bde:	86 30       	cpi	r24, 0x06	; 6
     be0:	b1 f3       	breq	.-20     	; 0xbce <AppADMIN_getInput+0x12>
		
		if (pu8_data[1] == '\0')
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	88 23       	and	r24, r24
     be6:	79 f0       	breq	.+30     	; 0xc06 <AppADMIN_getInput+0x4a>
		break;
		EmptyString(pu8_data);
     be8:	ce 01       	movw	r24, r28
     bea:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
		if(Terminal_Out((uint8_t*)"\nInvalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
     bee:	8f eb       	ldi	r24, 0xBF	; 191
     bf0:	92 e0       	ldi	r25, 0x02	; 2
     bf2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
     bf6:	81 30       	cpi	r24, 0x01	; 1
     bf8:	21 f3       	breq	.-56     	; 0xbc2 <AppADMIN_getInput+0x6>
		return APP_STATUS_ERROR_NOK;
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	05 c0       	rjmp	.+10     	; 0xc08 <AppADMIN_getInput+0x4c>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nYour Input: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	03 c0       	rjmp	.+6      	; 0xc08 <AppADMIN_getInput+0x4c>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	01 c0       	rjmp	.+2      	; 0xc08 <AppADMIN_getInput+0x4c>
		break;
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid Choice, Only Choose from 1 to 3\r") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	} while (1);
	return APP_STATUS_ERROR_OK;
     c06:	81 e0       	ldi	r24, 0x01	; 1
}
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	08 95       	ret

00000c0e <AppADMIN_getnewMaxAmount>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getnewMaxAmount(uint8_t* pu8_data)
{
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nMax Amount: ") != TERMINAL_STATUS_ERROR_OK)
     c14:	89 ee       	ldi	r24, 0xE9	; 233
     c16:	92 e0       	ldi	r25, 0x02	; 2
     c18:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
     c1c:	81 30       	cpi	r24, 0x01	; 1
     c1e:	69 f5       	brne	.+90     	; 0xc7a <AppADMIN_getnewMaxAmount+0x6c>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     c20:	ce 01       	movw	r24, r28
     c22:	0e 94 ad 05 	call	0xb5a	; 0xb5a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	99 f0       	breq	.+38     	; 0xc50 <AppADMIN_getnewMaxAmount+0x42>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     c2a:	11 f0       	breq	.+4      	; 0xc30 <AppADMIN_getnewMaxAmount+0x22>
     c2c:	86 30       	cpi	r24, 0x06	; 6
     c2e:	39 f5       	brne	.+78     	; 0xc7e <AppADMIN_getnewMaxAmount+0x70>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     c30:	86 30       	cpi	r24, 0x06	; 6
     c32:	b1 f3       	breq	.-20     	; 0xc20 <AppADMIN_getnewMaxAmount+0x12>
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	0d c0       	rjmp	.+26     	; 0xc52 <AppADMIN_getnewMaxAmount+0x44>
		uint8_t u8_index=0;
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
		{
			if(((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0')) && (pu8_data[u8_index]!='.'))
     c38:	fe 01       	movw	r30, r28
     c3a:	e8 0f       	add	r30, r24
     c3c:	f1 1d       	adc	r31, r1
     c3e:	90 81       	ld	r25, Z
     c40:	20 ed       	ldi	r18, 0xD0	; 208
     c42:	29 0f       	add	r18, r25
     c44:	2a 30       	cpi	r18, 0x0A	; 10
     c46:	10 f0       	brcs	.+4      	; 0xc4c <AppADMIN_getnewMaxAmount+0x3e>
     c48:	9e 32       	cpi	r25, 0x2E	; 46
     c4a:	29 f4       	brne	.+10     	; 0xc56 <AppADMIN_getnewMaxAmount+0x48>
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		uint8_t u8_index=0;
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
     c4c:	8f 5f       	subi	r24, 0xFF	; 255
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <AppADMIN_getnewMaxAmount+0x44>
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	87 30       	cpi	r24, 0x07	; 7
     c54:	88 f3       	brcs	.-30     	; 0xc38 <AppADMIN_getnewMaxAmount+0x2a>
			if(((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0')) && (pu8_data[u8_index]!='.'))
			{
				break;
			}
		}
		if ((u8_index == MAX_BAL_LENGTH) && (pu8_data[u8_index] == '\0'))
     c56:	87 30       	cpi	r24, 0x07	; 7
     c58:	31 f4       	brne	.+12     	; 0xc66 <AppADMIN_getnewMaxAmount+0x58>
     c5a:	fe 01       	movw	r30, r28
     c5c:	e8 0f       	add	r30, r24
     c5e:	f1 1d       	adc	r31, r1
     c60:	80 81       	ld	r24, Z
     c62:	88 23       	and	r24, r24
     c64:	71 f0       	breq	.+28     	; 0xc82 <AppADMIN_getnewMaxAmount+0x74>
		{
			break;
		}
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
     c66:	87 ef       	ldi	r24, 0xF7	; 247
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
     c6e:	81 30       	cpi	r24, 0x01	; 1
     c70:	51 f4       	brne	.+20     	; 0xc86 <AppADMIN_getnewMaxAmount+0x78>
		return APP_STATUS_ERROR_NOK;
		EmptyString(pu8_data);
     c72:	ce 01       	movw	r24, r28
     c74:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
	} while (1);
     c78:	cd cf       	rjmp	.-102    	; 0xc14 <AppADMIN_getnewMaxAmount+0x6>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nMax Amount: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <AppADMIN_getnewMaxAmount+0x7a>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	03 c0       	rjmp	.+6      	; 0xc88 <AppADMIN_getnewMaxAmount+0x7a>
		}
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
		EmptyString(pu8_data);
	} while (1);
	return APP_STATUS_ERROR_OK;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	01 c0       	rjmp	.+2      	; 0xc88 <AppADMIN_getnewMaxAmount+0x7a>
		if ((u8_index == MAX_BAL_LENGTH) && (pu8_data[u8_index] == '\0'))
		{
			break;
		}
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     c86:	80 e0       	ldi	r24, 0x00	; 0
		EmptyString(pu8_data);
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <AppADMIN_getCustomerPAN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Customer's PAN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the customer's pan.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerPAN(uint8_t* pu8_data)
{
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nPAN: ") != TERMINAL_STATUS_ERROR_OK)
     c96:	81 e3       	ldi	r24, 0x31	; 49
     c98:	93 e0       	ldi	r25, 0x03	; 3
     c9a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	99 f5       	brne	.+102    	; 0xd08 <AppADMIN_getCustomerPAN+0x7a>
			return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     ca2:	ce 01       	movw	r24, r28
     ca4:	0e 94 ad 05 	call	0xb5a	; 0xb5a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	29 f0       	breq	.+10     	; 0xcb6 <AppADMIN_getCustomerPAN+0x28>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     cac:	11 f0       	breq	.+4      	; 0xcb2 <AppADMIN_getCustomerPAN+0x24>
     cae:	86 30       	cpi	r24, 0x06	; 6
     cb0:	69 f5       	brne	.+90     	; 0xd0c <AppADMIN_getCustomerPAN+0x7e>
				return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     cb2:	86 30       	cpi	r24, 0x06	; 6
     cb4:	b1 f3       	breq	.-20     	; 0xca2 <AppADMIN_getCustomerPAN+0x14>
		
		if(stringLength(pu8_data) != MAX_PAN_LENGTH+1)
     cb6:	ce 01       	movw	r24, r28
     cb8:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
     cbc:	8a 30       	cpi	r24, 0x0A	; 10
     cbe:	e9 f0       	breq	.+58     	; 0xcfa <AppADMIN_getCustomerPAN+0x6c>
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r") != TERMINAL_STATUS_ERROR_OK)
     cc0:	88 e3       	ldi	r24, 0x38	; 56
     cc2:	93 e0       	ldi	r25, 0x03	; 3
     cc4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	11 f5       	brne	.+68     	; 0xd10 <AppADMIN_getCustomerPAN+0x82>
				return APP_STATUS_ERROR_NOK;
			EmptyString(pu8_data);
     ccc:	ce 01       	movw	r24, r28
     cce:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
			continue;
     cd2:	e1 cf       	rjmp	.-62     	; 0xc96 <AppADMIN_getCustomerPAN+0x8>
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
     cd4:	fe 01       	movw	r30, r28
     cd6:	e1 0f       	add	r30, r17
     cd8:	f1 1d       	adc	r31, r1
     cda:	80 81       	ld	r24, Z
     cdc:	80 53       	subi	r24, 0x30	; 48
     cde:	8a 30       	cpi	r24, 0x0A	; 10
     ce0:	50 f0       	brcs	.+20     	; 0xcf6 <AppADMIN_getCustomerPAN+0x68>
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r") != TERMINAL_STATUS_ERROR_OK)
     ce2:	88 e3       	ldi	r24, 0x38	; 56
     ce4:	93 e0       	ldi	r25, 0x03	; 3
     ce6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	99 f4       	brne	.+38     	; 0xd14 <AppADMIN_getCustomerPAN+0x86>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
     cee:	ce 01       	movw	r24, r28
     cf0:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
				break;
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <AppADMIN_getCustomerPAN+0x72>
			EmptyString(pu8_data);
			continue;
		}
		uint8_t u8_index=0;
		
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
     cf6:	1f 5f       	subi	r17, 0xFF	; 255
     cf8:	01 c0       	rjmp	.+2      	; 0xcfc <AppADMIN_getCustomerPAN+0x6e>
     cfa:	10 e0       	ldi	r17, 0x00	; 0
     cfc:	19 30       	cpi	r17, 0x09	; 9
     cfe:	50 f3       	brcs	.-44     	; 0xcd4 <AppADMIN_getCustomerPAN+0x46>
				return APP_STATUS_ERROR_NOK;
				EmptyString(pu8_data);
				break;
			}
		}
		if (u8_index == MAX_PAN_LENGTH)
     d00:	19 30       	cpi	r17, 0x09	; 9
     d02:	49 f6       	brne	.-110    	; 0xc96 <AppADMIN_getCustomerPAN+0x8>
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	07 c0       	rjmp	.+14     	; 0xd16 <AppADMIN_getCustomerPAN+0x88>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nPAN: ") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	05 c0       	rjmp	.+10     	; 0xd16 <AppADMIN_getCustomerPAN+0x88>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	03 c0       	rjmp	.+6      	; 0xd16 <AppADMIN_getCustomerPAN+0x88>
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		if(stringLength(pu8_data) != MAX_PAN_LENGTH+1)
		{
			if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <AppADMIN_getCustomerPAN+0x88>
		for(u8_index=0; u8_index<MAX_PAN_LENGTH; u8_index++)
		{
			if((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0'))
			{
				if(Terminal_Out((uint8_t*)"\nInvalid PAN, PAN should be 9 numeric characters\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
     d14:	80 e0       	ldi	r24, 0x00	; 0
		{
			break;
		}
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	08 95       	ret

00000d1e <AppADMIN_getCustomerBalance>:
* Parameters (out): pu8_data - Pointer to variable to hold the input Balance by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the balance of the customer.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getCustomerBalance(uint8_t* pu8_data)
{
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nBalance: ") != TERMINAL_STATUS_ERROR_OK)
     d24:	8a e6       	ldi	r24, 0x6A	; 106
     d26:	93 e0       	ldi	r25, 0x03	; 3
     d28:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	69 f5       	brne	.+90     	; 0xd8a <AppADMIN_getCustomerBalance+0x6c>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
     d30:	ce 01       	movw	r24, r28
     d32:	0e 94 ad 05 	call	0xb5a	; 0xb5a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	99 f0       	breq	.+38     	; 0xd60 <AppADMIN_getCustomerBalance+0x42>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
     d3a:	11 f0       	breq	.+4      	; 0xd40 <AppADMIN_getCustomerBalance+0x22>
     d3c:	86 30       	cpi	r24, 0x06	; 6
     d3e:	39 f5       	brne	.+78     	; 0xd8e <AppADMIN_getCustomerBalance+0x70>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
     d40:	86 30       	cpi	r24, 0x06	; 6
     d42:	b1 f3       	breq	.-20     	; 0xd30 <AppADMIN_getCustomerBalance+0x12>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	0d c0       	rjmp	.+26     	; 0xd62 <AppADMIN_getCustomerBalance+0x44>
		
		uint8_t u8_index=0;
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
		{
			if(((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0')) && (pu8_data[u8_index]!='.'))
     d48:	fe 01       	movw	r30, r28
     d4a:	e8 0f       	add	r30, r24
     d4c:	f1 1d       	adc	r31, r1
     d4e:	90 81       	ld	r25, Z
     d50:	20 ed       	ldi	r18, 0xD0	; 208
     d52:	29 0f       	add	r18, r25
     d54:	2a 30       	cpi	r18, 0x0A	; 10
     d56:	10 f0       	brcs	.+4      	; 0xd5c <AppADMIN_getCustomerBalance+0x3e>
     d58:	9e 32       	cpi	r25, 0x2E	; 46
     d5a:	29 f4       	brne	.+10     	; 0xd66 <AppADMIN_getCustomerBalance+0x48>
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
		
		uint8_t u8_index=0;
		for(u8_index=0; u8_index<MAX_BAL_LENGTH; u8_index++)
     d5c:	8f 5f       	subi	r24, 0xFF	; 255
     d5e:	01 c0       	rjmp	.+2      	; 0xd62 <AppADMIN_getCustomerBalance+0x44>
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	87 30       	cpi	r24, 0x07	; 7
     d64:	88 f3       	brcs	.-30     	; 0xd48 <AppADMIN_getCustomerBalance+0x2a>
			if(((pu8_data[u8_index]>'9') || (pu8_data[u8_index]<'0')) && (pu8_data[u8_index]!='.'))
			{
				break;
			}
		}
		if ((u8_index == MAX_BAL_LENGTH) && (pu8_data[u8_index] == '\0'))
     d66:	87 30       	cpi	r24, 0x07	; 7
     d68:	31 f4       	brne	.+12     	; 0xd76 <AppADMIN_getCustomerBalance+0x58>
     d6a:	fe 01       	movw	r30, r28
     d6c:	e8 0f       	add	r30, r24
     d6e:	f1 1d       	adc	r31, r1
     d70:	80 81       	ld	r24, Z
     d72:	88 23       	and	r24, r24
     d74:	71 f0       	breq	.+28     	; 0xd92 <AppADMIN_getCustomerBalance+0x74>
		{
			break;
		}
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
     d76:	87 ef       	ldi	r24, 0xF7	; 247
     d78:	92 e0       	ldi	r25, 0x02	; 2
     d7a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	51 f4       	brne	.+20     	; 0xd96 <AppADMIN_getCustomerBalance+0x78>
		return APP_STATUS_ERROR_NOK;
		EmptyString(pu8_data);
     d82:	ce 01       	movw	r24, r28
     d84:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
	} while (1);
     d88:	cd cf       	rjmp	.-102    	; 0xd24 <AppADMIN_getCustomerBalance+0x6>
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	do
	{
		if(Terminal_Out((uint8_t*)"\nBalance: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	05 c0       	rjmp	.+10     	; 0xd98 <AppADMIN_getCustomerBalance+0x7a>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	03 c0       	rjmp	.+6      	; 0xd98 <AppADMIN_getCustomerBalance+0x7a>
		}
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
		EmptyString(pu8_data);
	} while (1);
	return APP_STATUS_ERROR_OK;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	01 c0       	rjmp	.+2      	; 0xd98 <AppADMIN_getCustomerBalance+0x7a>
		if ((u8_index == MAX_BAL_LENGTH) && (pu8_data[u8_index] == '\0'))
		{
			break;
		}
		if(Terminal_Out((uint8_t*)"\nInvalid Balance, Balance should be in (xxxx.xx) format\r\n") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     d96:	80 e0       	ldi	r24, 0x00	; 0
		EmptyString(pu8_data);
	} while (1);
	return APP_STATUS_ERROR_OK;
}
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	08 95       	ret

00000d9e <AppADMIN_processNewCustomer>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to process adding a new customer in the data base.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_processNewCustomer(void)
{
     d9e:	ef 92       	push	r14
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	64 97       	sbiw	r28, 0x14	; 20
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_tempPAN[10]={0};
     dba:	8e 01       	movw	r16, r28
     dbc:	0f 5f       	subi	r16, 0xFF	; 255
     dbe:	1f 4f       	sbci	r17, 0xFF	; 255
     dc0:	8a e0       	ldi	r24, 0x0A	; 10
     dc2:	d8 01       	movw	r26, r16
     dc4:	1d 92       	st	X+, r1
     dc6:	8a 95       	dec	r24
     dc8:	e9 f7       	brne	.-6      	; 0xdc4 <AppADMIN_processNewCustomer+0x26>
	uint8_t au8_tempBalance[8]={0};
     dca:	fe 01       	movw	r30, r28
     dcc:	3b 96       	adiw	r30, 0x0b	; 11
     dce:	88 e0       	ldi	r24, 0x08	; 8
     dd0:	df 01       	movw	r26, r30
     dd2:	1d 92       	st	X+, r1
     dd4:	8a 95       	dec	r24
     dd6:	e9 f7       	brne	.-6      	; 0xdd2 <AppADMIN_processNewCustomer+0x34>
	uint8_t au8_input[2]={0};
     dd8:	1c 8a       	std	Y+20, r1	; 0x14
     dda:	1b 8a       	std	Y+19, r1	; 0x13
	uint8_t u8_exist = 0;
	uint8_t u8_newCustomerPanAddr = 0;
	uint8_t u8_newCustomerBalAddr = 0;
	EmptyString(gstr_clientdata.au8_PAN);
     ddc:	8b e8       	ldi	r24, 0x8B	; 139
     dde:	95 e0       	ldi	r25, 0x05	; 5
     de0:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
	EmptyString(gstr_clientdata.au8_Balance);
     de4:	85 e9       	ldi	r24, 0x95	; 149
     de6:	95 e0       	ldi	r25, 0x05	; 5
     de8:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     dec:	c8 01       	movw	r24, r16
     dee:	0e 94 47 06 	call	0xc8e	; 0xc8e <AppADMIN_getCustomerPAN>
     df2:	18 2f       	mov	r17, r24
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	09 f0       	breq	.+2      	; 0xdfa <AppADMIN_processNewCustomer+0x5c>
     df8:	ae c0       	rjmp	.+348    	; 0xf56 <AppADMIN_processNewCustomer+0x1b8>
		return APP_STATUS_ERROR_NOK;
	
	sint16_t s16_clientIndex = AppADMIN_searchPan(au8_tempPAN);
     dfa:	ce 01       	movw	r24, r28
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	0e 94 50 00 	call	0xa0	; 0xa0 <AppADMIN_searchPan>
     e02:	7c 01       	movw	r14, r24
	
	if(s16_clientIndex != -1)
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	a9 f0       	breq	.+42     	; 0xe32 <AppADMIN_processNewCustomer+0x94>
	{
		Terminal_Out((uint8_t*)"This PAN is already existed in the Data Base\r\nDo you wish to update it?(y/n): ");
     e08:	85 e7       	ldi	r24, 0x75	; 117
     e0a:	93 e0       	ldi	r25, 0x03	; 3
     e0c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
		AppADMIN_getInput(au8_input);
     e10:	ce 01       	movw	r24, r28
     e12:	43 96       	adiw	r24, 0x13	; 19
     e14:	0e 94 de 05 	call	0xbbc	; 0xbbc <AppADMIN_getInput>
		if((au8_input[0] == 'y') || (au8_input[0] == 'Y'))
     e18:	8b 89       	ldd	r24, Y+19	; 0x13
     e1a:	89 37       	cpi	r24, 0x79	; 121
     e1c:	61 f0       	breq	.+24     	; 0xe36 <AppADMIN_processNewCustomer+0x98>
     e1e:	89 35       	cpi	r24, 0x59	; 89
     e20:	61 f0       	breq	.+24     	; 0xe3a <AppADMIN_processNewCustomer+0x9c>
		{
			u8_exist = 1;
		}else if((au8_input[0] == 'n') || (au8_input[0] == 'N'))
     e22:	8e 36       	cpi	r24, 0x6E	; 110
     e24:	09 f4       	brne	.+2      	; 0xe28 <AppADMIN_processNewCustomer+0x8a>
     e26:	a4 c0       	rjmp	.+328    	; 0xf70 <AppADMIN_processNewCustomer+0x1d2>
     e28:	8e 34       	cpi	r24, 0x4E	; 78
     e2a:	09 f4       	brne	.+2      	; 0xe2e <AppADMIN_processNewCustomer+0x90>
     e2c:	a1 c0       	rjmp	.+322    	; 0xf70 <AppADMIN_processNewCustomer+0x1d2>
enuApp_Status_t AppADMIN_processNewCustomer(void)
{
	uint8_t au8_tempPAN[10]={0};
	uint8_t au8_tempBalance[8]={0};
	uint8_t au8_input[2]={0};
	uint8_t u8_exist = 0;
     e2e:	00 e0       	ldi	r16, 0x00	; 0
     e30:	05 c0       	rjmp	.+10     	; 0xe3c <AppADMIN_processNewCustomer+0x9e>
     e32:	00 e0       	ldi	r16, 0x00	; 0
     e34:	03 c0       	rjmp	.+6      	; 0xe3c <AppADMIN_processNewCustomer+0x9e>
	{
		Terminal_Out((uint8_t*)"This PAN is already existed in the Data Base\r\nDo you wish to update it?(y/n): ");
		AppADMIN_getInput(au8_input);
		if((au8_input[0] == 'y') || (au8_input[0] == 'Y'))
		{
			u8_exist = 1;
     e36:	01 e0       	ldi	r16, 0x01	; 1
     e38:	01 c0       	rjmp	.+2      	; 0xe3c <AppADMIN_processNewCustomer+0x9e>
     e3a:	01 e0       	ldi	r16, 0x01	; 1
		}else if((au8_input[0] == 'n') || (au8_input[0] == 'N'))
		{
			return APP_STATUS_ERROR_OK; 
		}
	}
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
     e3c:	6b e8       	ldi	r22, 0x8B	; 139
     e3e:	75 e0       	ldi	r23, 0x05	; 5
     e40:	ce 01       	movw	r24, r28
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	0e 94 04 1a 	call	0x3408	; 0x3408 <stringCopy>
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
     e48:	ce 01       	movw	r24, r28
     e4a:	0b 96       	adiw	r24, 0x0b	; 11
     e4c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <AppADMIN_getCustomerBalance>
     e50:	18 2f       	mov	r17, r24
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	09 f0       	breq	.+2      	; 0xe58 <AppADMIN_processNewCustomer+0xba>
     e56:	81 c0       	rjmp	.+258    	; 0xf5a <AppADMIN_processNewCustomer+0x1bc>
		return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
     e58:	65 e9       	ldi	r22, 0x95	; 149
     e5a:	75 e0       	ldi	r23, 0x05	; 5
     e5c:	ce 01       	movw	r24, r28
     e5e:	0b 96       	adiw	r24, 0x0b	; 11
     e60:	0e 94 04 1a 	call	0x3408	; 0x3408 <stringCopy>
	
	if(u8_exist == 0)
     e64:	01 11       	cpse	r16, r1
     e66:	3c c0       	rjmp	.+120    	; 0xee0 <AppADMIN_processNewCustomer+0x142>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
     e68:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <gu8_registeredAccNum>
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	2f 5f       	subi	r18, 0xFF	; 255
     e72:	3f 4f       	sbci	r19, 0xFF	; 255
     e74:	f2 2e       	mov	r15, r18
     e76:	ff 0c       	add	r15, r15
     e78:	ff 0c       	add	r15, r15
     e7a:	ff 0c       	add	r15, r15
     e7c:	ff 0c       	add	r15, r15
     e7e:	ff 0c       	add	r15, r15
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
     e80:	82 95       	swap	r24
     e82:	88 0f       	add	r24, r24
     e84:	80 7e       	andi	r24, 0xE0	; 224
     e86:	00 e3       	ldi	r16, 0x30	; 48
     e88:	08 0f       	add	r16, r24
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
     e8a:	8b e8       	ldi	r24, 0x8B	; 139
     e8c:	95 e0       	ldi	r25, 0x05	; 5
     e8e:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
     e92:	48 2f       	mov	r20, r24
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	6b e8       	ldi	r22, 0x8B	; 139
     e98:	75 e0       	ldi	r23, 0x05	; 5
     e9a:	8f 2d       	mov	r24, r15
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 ef 0b 	call	0x17de	; 0x17de <Eeprom_24_writePacket>
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	09 f0       	breq	.+2      	; 0xea8 <AppADMIN_processNewCustomer+0x10a>
     ea6:	5b c0       	rjmp	.+182    	; 0xf5e <AppADMIN_processNewCustomer+0x1c0>
		return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     ea8:	85 e9       	ldi	r24, 0x95	; 149
     eaa:	95 e0       	ldi	r25, 0x05	; 5
     eac:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
     eb0:	48 2f       	mov	r20, r24
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	65 e9       	ldi	r22, 0x95	; 149
     eb6:	75 e0       	ldi	r23, 0x05	; 5
     eb8:	80 2f       	mov	r24, r16
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 ef 0b 	call	0x17de	; 0x17de <Eeprom_24_writePacket>
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	09 f0       	breq	.+2      	; 0xec6 <AppADMIN_processNewCustomer+0x128>
     ec4:	4e c0       	rjmp	.+156    	; 0xf62 <AppADMIN_processNewCustomer+0x1c4>
		return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
     ec6:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <gu8_registeredAccNum>
     eca:	6f 5f       	subi	r22, 0xFF	; 255
     ecc:	60 93 89 05 	sts	0x0589, r22	; 0x800589 <gu8_registeredAccNum>
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 00 0b 	call	0x1600	; 0x1600 <Eeprom_24_writeByte>
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	09 f0       	breq	.+2      	; 0xede <AppADMIN_processNewCustomer+0x140>
     edc:	44 c0       	rjmp	.+136    	; 0xf66 <AppADMIN_processNewCustomer+0x1c8>
     ede:	2b c0       	rjmp	.+86     	; 0xf36 <AppADMIN_processNewCustomer+0x198>
		return APP_STATUS_ERROR_NOK;
	}else
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
     ee0:	c7 01       	movw	r24, r14
     ee2:	01 96       	adiw	r24, 0x01	; 1
     ee4:	08 2f       	mov	r16, r24
     ee6:	02 95       	swap	r16
     ee8:	00 0f       	add	r16, r16
     eea:	00 7e       	andi	r16, 0xE0	; 224
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
     eec:	8e 2d       	mov	r24, r14
     eee:	82 95       	swap	r24
     ef0:	88 0f       	add	r24, r24
     ef2:	80 7e       	andi	r24, 0xE0	; 224
     ef4:	0f 2e       	mov	r0, r31
     ef6:	f0 e3       	ldi	r31, 0x30	; 48
     ef8:	ef 2e       	mov	r14, r31
     efa:	f0 2d       	mov	r31, r0
     efc:	e8 0e       	add	r14, r24
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
     efe:	8b e8       	ldi	r24, 0x8B	; 139
     f00:	95 e0       	ldi	r25, 0x05	; 5
     f02:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
     f06:	48 2f       	mov	r20, r24
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	6b e8       	ldi	r22, 0x8B	; 139
     f0c:	75 e0       	ldi	r23, 0x05	; 5
     f0e:	80 2f       	mov	r24, r16
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 ef 0b 	call	0x17de	; 0x17de <Eeprom_24_writePacket>
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	41 f5       	brne	.+80     	; 0xf6a <AppADMIN_processNewCustomer+0x1cc>
			return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
     f1a:	85 e9       	ldi	r24, 0x95	; 149
     f1c:	95 e0       	ldi	r25, 0x05	; 5
     f1e:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
     f22:	48 2f       	mov	r20, r24
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	65 e9       	ldi	r22, 0x95	; 149
     f28:	75 e0       	ldi	r23, 0x05	; 5
     f2a:	8e 2d       	mov	r24, r14
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 ef 0b 	call	0x17de	; 0x17de <Eeprom_24_writePacket>
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	e1 f4       	brne	.+56     	; 0xf6e <AppADMIN_processNewCustomer+0x1d0>
			return APP_STATUS_ERROR_NOK;
	}
	if(gu8_registeredAccNum == 1)
     f36:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <gu8_registeredAccNum>
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	c9 f4       	brne	.+50     	; 0xf70 <AppADMIN_processNewCustomer+0x1d2>
	{
		gu8_initData = ATM_DB_FLAG_SET_VAL;
     f3e:	8a ea       	ldi	r24, 0xAA	; 170
     f40:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <gu8_initData>
		if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
     f44:	6a ea       	ldi	r22, 0xAA	; 170
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 00 0b 	call	0x1600	; 0x1600 <Eeprom_24_writeByte>
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	79 f0       	breq	.+30     	; 0xf70 <AppADMIN_processNewCustomer+0x1d2>
			return APP_STATUS_ERROR_NOK;
     f52:	10 e0       	ldi	r17, 0x00	; 0
     f54:	0d c0       	rjmp	.+26     	; 0xf70 <AppADMIN_processNewCustomer+0x1d2>
	uint8_t u8_newCustomerBalAddr = 0;
	EmptyString(gstr_clientdata.au8_PAN);
	EmptyString(gstr_clientdata.au8_Balance);
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f56:	10 e0       	ldi	r17, 0x00	; 0
     f58:	0b c0       	rjmp	.+22     	; 0xf70 <AppADMIN_processNewCustomer+0x1d2>
	}
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f5a:	10 e0       	ldi	r17, 0x00	; 0
     f5c:	09 c0       	rjmp	.+18     	; 0xf70 <AppADMIN_processNewCustomer+0x1d2>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f5e:	10 e0       	ldi	r17, 0x00	; 0
     f60:	07 c0       	rjmp	.+14     	; 0xf70 <AppADMIN_processNewCustomer+0x1d2>
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	05 c0       	rjmp	.+10     	; 0xf70 <AppADMIN_processNewCustomer+0x1d2>
		
		if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     f66:	10 e0       	ldi	r17, 0x00	; 0
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <AppADMIN_processNewCustomer+0x1d2>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     f6a:	10 e0       	ldi	r17, 0x00	; 0
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <AppADMIN_processNewCustomer+0x1d2>
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
     f6e:	10 e0       	ldi	r17, 0x00	; 0
		gu8_initData = ATM_DB_FLAG_SET_VAL;
		if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	}
	return APP_STATUS_ERROR_OK;
}
     f70:	81 2f       	mov	r24, r17
     f72:	64 96       	adiw	r28, 0x14	; 20
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	08 95       	ret

00000f8c <AppADMIN_processExistingCustomer>:
* Parameters (out): None
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to process adding a new customer in the data base.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_processExistingCustomer(void)
{
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	64 97       	sbiw	r28, 0x14	; 20
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_tempPAN[10]={0};
     fa8:	8e 01       	movw	r16, r28
     faa:	0f 5f       	subi	r16, 0xFF	; 255
     fac:	1f 4f       	sbci	r17, 0xFF	; 255
     fae:	8a e0       	ldi	r24, 0x0A	; 10
     fb0:	d8 01       	movw	r26, r16
     fb2:	1d 92       	st	X+, r1
     fb4:	8a 95       	dec	r24
     fb6:	e9 f7       	brne	.-6      	; 0xfb2 <AppADMIN_processExistingCustomer+0x26>
	uint8_t au8_tempBalance[8]={0};
     fb8:	fe 01       	movw	r30, r28
     fba:	3b 96       	adiw	r30, 0x0b	; 11
     fbc:	88 e0       	ldi	r24, 0x08	; 8
     fbe:	df 01       	movw	r26, r30
     fc0:	1d 92       	st	X+, r1
     fc2:	8a 95       	dec	r24
     fc4:	e9 f7       	brne	.-6      	; 0xfc0 <AppADMIN_processExistingCustomer+0x34>
	uint8_t au8_input[2]={0};
     fc6:	1c 8a       	std	Y+20, r1	; 0x14
     fc8:	1b 8a       	std	Y+19, r1	; 0x13
	uint8_t u8_exist = 1;
	uint8_t u8_newCustomerPanAddr = 0;
	uint8_t u8_newCustomerBalAddr = 0;
	EmptyString(gstr_clientdata.au8_PAN);
     fca:	8b e8       	ldi	r24, 0x8B	; 139
     fcc:	95 e0       	ldi	r25, 0x05	; 5
     fce:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
	EmptyString(gstr_clientdata.au8_Balance);
     fd2:	85 e9       	ldi	r24, 0x95	; 149
     fd4:	95 e0       	ldi	r25, 0x05	; 5
     fd6:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
     fda:	c8 01       	movw	r24, r16
     fdc:	0e 94 47 06 	call	0xc8e	; 0xc8e <AppADMIN_getCustomerPAN>
     fe0:	18 2f       	mov	r17, r24
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <AppADMIN_processExistingCustomer+0x5c>
     fe6:	b0 c0       	rjmp	.+352    	; 0x1148 <AppADMIN_processExistingCustomer+0x1bc>
		return APP_STATUS_ERROR_NOK;
	
	sint16_t s16_clientIndex = AppADMIN_searchPan(au8_tempPAN);
     fe8:	ce 01       	movw	r24, r28
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	0e 94 50 00 	call	0xa0	; 0xa0 <AppADMIN_searchPan>
     ff0:	7c 01       	movw	r14, r24
	
	if(s16_clientIndex == -1)
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	a9 f4       	brne	.+42     	; 0x1020 <AppADMIN_processExistingCustomer+0x94>
	{
		Terminal_Out((uint8_t*)"This PAN is not existed in the Data Base\r\nDo you wish to add new?(y/n): ");
     ff6:	84 ec       	ldi	r24, 0xC4	; 196
     ff8:	93 e0       	ldi	r25, 0x03	; 3
     ffa:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
		AppADMIN_getInput(au8_input);
     ffe:	ce 01       	movw	r24, r28
    1000:	43 96       	adiw	r24, 0x13	; 19
    1002:	0e 94 de 05 	call	0xbbc	; 0xbbc <AppADMIN_getInput>
		if((au8_input[0] == 'y') || (au8_input[0] == 'Y'))
    1006:	8b 89       	ldd	r24, Y+19	; 0x13
    1008:	89 37       	cpi	r24, 0x79	; 121
    100a:	61 f0       	breq	.+24     	; 0x1024 <AppADMIN_processExistingCustomer+0x98>
    100c:	89 35       	cpi	r24, 0x59	; 89
    100e:	61 f0       	breq	.+24     	; 0x1028 <AppADMIN_processExistingCustomer+0x9c>
		{
			u8_exist = 0;
		}else if((au8_input[0] == 'n') || (au8_input[0] == 'N'))
    1010:	8e 36       	cpi	r24, 0x6E	; 110
    1012:	09 f4       	brne	.+2      	; 0x1016 <AppADMIN_processExistingCustomer+0x8a>
    1014:	a4 c0       	rjmp	.+328    	; 0x115e <AppADMIN_processExistingCustomer+0x1d2>
    1016:	8e 34       	cpi	r24, 0x4E	; 78
    1018:	09 f4       	brne	.+2      	; 0x101c <AppADMIN_processExistingCustomer+0x90>
    101a:	a1 c0       	rjmp	.+322    	; 0x115e <AppADMIN_processExistingCustomer+0x1d2>
enuApp_Status_t AppADMIN_processExistingCustomer(void)
{
	uint8_t au8_tempPAN[10]={0};
	uint8_t au8_tempBalance[8]={0};
	uint8_t au8_input[2]={0};
	uint8_t u8_exist = 1;
    101c:	01 e0       	ldi	r16, 0x01	; 1
    101e:	05 c0       	rjmp	.+10     	; 0x102a <AppADMIN_processExistingCustomer+0x9e>
    1020:	01 e0       	ldi	r16, 0x01	; 1
    1022:	03 c0       	rjmp	.+6      	; 0x102a <AppADMIN_processExistingCustomer+0x9e>
	{
		Terminal_Out((uint8_t*)"This PAN is not existed in the Data Base\r\nDo you wish to add new?(y/n): ");
		AppADMIN_getInput(au8_input);
		if((au8_input[0] == 'y') || (au8_input[0] == 'Y'))
		{
			u8_exist = 0;
    1024:	00 e0       	ldi	r16, 0x00	; 0
    1026:	01 c0       	rjmp	.+2      	; 0x102a <AppADMIN_processExistingCustomer+0x9e>
    1028:	00 e0       	ldi	r16, 0x00	; 0
		}else if((au8_input[0] == 'n') || (au8_input[0] == 'N'))
		{
			return APP_STATUS_ERROR_OK;
		}
	}
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
    102a:	6b e8       	ldi	r22, 0x8B	; 139
    102c:	75 e0       	ldi	r23, 0x05	; 5
    102e:	ce 01       	movw	r24, r28
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	0e 94 04 1a 	call	0x3408	; 0x3408 <stringCopy>
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
    1036:	ce 01       	movw	r24, r28
    1038:	0b 96       	adiw	r24, 0x0b	; 11
    103a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <AppADMIN_getCustomerBalance>
    103e:	18 2f       	mov	r17, r24
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	09 f0       	breq	.+2      	; 0x1046 <AppADMIN_processExistingCustomer+0xba>
    1044:	83 c0       	rjmp	.+262    	; 0x114c <AppADMIN_processExistingCustomer+0x1c0>
		return APP_STATUS_ERROR_NOK;
	stringCopy(au8_tempBalance, gstr_clientdata.au8_Balance);
    1046:	65 e9       	ldi	r22, 0x95	; 149
    1048:	75 e0       	ldi	r23, 0x05	; 5
    104a:	ce 01       	movw	r24, r28
    104c:	0b 96       	adiw	r24, 0x0b	; 11
    104e:	0e 94 04 1a 	call	0x3408	; 0x3408 <stringCopy>
	
	if(u8_exist == 0)
    1052:	01 11       	cpse	r16, r1
    1054:	4c c0       	rjmp	.+152    	; 0x10ee <AppADMIN_processExistingCustomer+0x162>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
    1056:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <gu8_registeredAccNum>
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	2f 5f       	subi	r18, 0xFF	; 255
    1060:	3f 4f       	sbci	r19, 0xFF	; 255
    1062:	f2 2e       	mov	r15, r18
    1064:	ff 0c       	add	r15, r15
    1066:	ff 0c       	add	r15, r15
    1068:	ff 0c       	add	r15, r15
    106a:	ff 0c       	add	r15, r15
    106c:	ff 0c       	add	r15, r15
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
    106e:	82 95       	swap	r24
    1070:	88 0f       	add	r24, r24
    1072:	80 7e       	andi	r24, 0xE0	; 224
    1074:	00 e3       	ldi	r16, 0x30	; 48
    1076:	08 0f       	add	r16, r24
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
    1078:	8b e8       	ldi	r24, 0x8B	; 139
    107a:	95 e0       	ldi	r25, 0x05	; 5
    107c:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
    1080:	48 2f       	mov	r20, r24
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	6b e8       	ldi	r22, 0x8B	; 139
    1086:	75 e0       	ldi	r23, 0x05	; 5
    1088:	8f 2d       	mov	r24, r15
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 ef 0b 	call	0x17de	; 0x17de <Eeprom_24_writePacket>
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	09 f0       	breq	.+2      	; 0x1096 <AppADMIN_processExistingCustomer+0x10a>
    1094:	5d c0       	rjmp	.+186    	; 0x1150 <AppADMIN_processExistingCustomer+0x1c4>
			return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
    1096:	85 e9       	ldi	r24, 0x95	; 149
    1098:	95 e0       	ldi	r25, 0x05	; 5
    109a:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
    109e:	48 2f       	mov	r20, r24
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	65 e9       	ldi	r22, 0x95	; 149
    10a4:	75 e0       	ldi	r23, 0x05	; 5
    10a6:	80 2f       	mov	r24, r16
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 ef 0b 	call	0x17de	; 0x17de <Eeprom_24_writePacket>
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <AppADMIN_processExistingCustomer+0x128>
    10b2:	50 c0       	rjmp	.+160    	; 0x1154 <AppADMIN_processExistingCustomer+0x1c8>
			return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
    10b4:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <gu8_registeredAccNum>
    10b8:	6f 5f       	subi	r22, 0xFF	; 255
    10ba:	60 93 89 05 	sts	0x0589, r22	; 0x800589 <gu8_registeredAccNum>
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 00 0b 	call	0x1600	; 0x1600 <Eeprom_24_writeByte>
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	09 f0       	breq	.+2      	; 0x10cc <AppADMIN_processExistingCustomer+0x140>
    10ca:	46 c0       	rjmp	.+140    	; 0x1158 <AppADMIN_processExistingCustomer+0x1cc>
			return APP_STATUS_ERROR_NOK;
			
		if(gu8_registeredAccNum == 1)
    10cc:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <gu8_registeredAccNum>
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <AppADMIN_processExistingCustomer+0x14a>
    10d4:	44 c0       	rjmp	.+136    	; 0x115e <AppADMIN_processExistingCustomer+0x1d2>
		{
			gu8_initData = ATM_DB_FLAG_SET_VAL;
    10d6:	8a ea       	ldi	r24, 0xAA	; 170
    10d8:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <gu8_initData>
			if(Eeprom_24_writeByte(ATM_DB_FLAG_ADDR, ATM_DB_FLAG_SET_VAL) != EEPROM_24_STATUS_ERROR_OK)
    10dc:	6a ea       	ldi	r22, 0xAA	; 170
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 00 0b 	call	0x1600	; 0x1600 <Eeprom_24_writeByte>
    10e6:	81 30       	cpi	r24, 0x01	; 1
    10e8:	d1 f1       	breq	.+116    	; 0x115e <AppADMIN_processExistingCustomer+0x1d2>
			return APP_STATUS_ERROR_NOK;
    10ea:	10 e0       	ldi	r17, 0x00	; 0
    10ec:	38 c0       	rjmp	.+112    	; 0x115e <AppADMIN_processExistingCustomer+0x1d2>
		}
	}else
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
    10ee:	c7 01       	movw	r24, r14
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	08 2f       	mov	r16, r24
    10f4:	02 95       	swap	r16
    10f6:	00 0f       	add	r16, r16
    10f8:	00 7e       	andi	r16, 0xE0	; 224
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
    10fa:	8e 2d       	mov	r24, r14
    10fc:	82 95       	swap	r24
    10fe:	88 0f       	add	r24, r24
    1100:	80 7e       	andi	r24, 0xE0	; 224
    1102:	0f 2e       	mov	r0, r31
    1104:	f0 e3       	ldi	r31, 0x30	; 48
    1106:	ef 2e       	mov	r14, r31
    1108:	f0 2d       	mov	r31, r0
    110a:	e8 0e       	add	r14, r24
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
    110c:	8b e8       	ldi	r24, 0x8B	; 139
    110e:	95 e0       	ldi	r25, 0x05	; 5
    1110:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
    1114:	48 2f       	mov	r20, r24
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	6b e8       	ldi	r22, 0x8B	; 139
    111a:	75 e0       	ldi	r23, 0x05	; 5
    111c:	80 2f       	mov	r24, r16
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 ef 0b 	call	0x17de	; 0x17de <Eeprom_24_writePacket>
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	d1 f4       	brne	.+52     	; 0x115c <AppADMIN_processExistingCustomer+0x1d0>
		return APP_STATUS_ERROR_NOK;
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
    1128:	85 e9       	ldi	r24, 0x95	; 149
    112a:	95 e0       	ldi	r25, 0x05	; 5
    112c:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
    1130:	48 2f       	mov	r20, r24
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	65 e9       	ldi	r22, 0x95	; 149
    1136:	75 e0       	ldi	r23, 0x05	; 5
    1138:	8e 2d       	mov	r24, r14
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 ef 0b 	call	0x17de	; 0x17de <Eeprom_24_writePacket>
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	69 f0       	breq	.+26     	; 0x115e <AppADMIN_processExistingCustomer+0x1d2>
		return APP_STATUS_ERROR_NOK;
    1144:	10 e0       	ldi	r17, 0x00	; 0
    1146:	0b c0       	rjmp	.+22     	; 0x115e <AppADMIN_processExistingCustomer+0x1d2>
	uint8_t u8_newCustomerBalAddr = 0;
	EmptyString(gstr_clientdata.au8_PAN);
	EmptyString(gstr_clientdata.au8_Balance);
	/* Get the Customer's Primary Account Number from the ADMIN Terminal */
	if(AppADMIN_getCustomerPAN(au8_tempPAN) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    1148:	10 e0       	ldi	r17, 0x00	; 0
    114a:	09 c0       	rjmp	.+18     	; 0x115e <AppADMIN_processExistingCustomer+0x1d2>
	}
	stringCopy(au8_tempPAN, gstr_clientdata.au8_PAN);
	
	/* Get the Customer's Balance from the ADMIN Terminal */
	if(AppADMIN_getCustomerBalance(au8_tempBalance) != APP_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    114c:	10 e0       	ldi	r17, 0x00	; 0
    114e:	07 c0       	rjmp	.+14     	; 0x115e <AppADMIN_processExistingCustomer+0x1d2>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + gu8_registeredAccNum*ATM_DB_CUSTOMER_DATA_SIZE ;
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    1150:	10 e0       	ldi	r17, 0x00	; 0
    1152:	05 c0       	rjmp	.+10     	; 0x115e <AppADMIN_processExistingCustomer+0x1d2>
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    1154:	10 e0       	ldi	r17, 0x00	; 0
    1156:	03 c0       	rjmp	.+6      	; 0x115e <AppADMIN_processExistingCustomer+0x1d2>
		
		if(Eeprom_24_writeByte(ATM_DB_ACC_NUM_ADDR, ++gu8_registeredAccNum) != EEPROM_24_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    1158:	10 e0       	ldi	r17, 0x00	; 0
    115a:	01 c0       	rjmp	.+2      	; 0x115e <AppADMIN_processExistingCustomer+0x1d2>
	{
		u8_newCustomerPanAddr = ATM_DB_CUSTOMER_PAN_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
		u8_newCustomerBalAddr = ATM_DB_CUSTOMER_BAL_BASE_ADDR + s16_clientIndex*ATM_DB_CUSTOMER_DATA_SIZE ;
		
		if(Eeprom_24_writePacket(u8_newCustomerPanAddr, gstr_clientdata.au8_PAN, stringLength(gstr_clientdata.au8_PAN)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    115c:	10 e0       	ldi	r17, 0x00	; 0
		
		if(Eeprom_24_writePacket(u8_newCustomerBalAddr, gstr_clientdata.au8_Balance, stringLength(gstr_clientdata.au8_Balance)) != EEPROM_24_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
	}
	return APP_STATUS_ERROR_OK;
}
    115e:	81 2f       	mov	r24, r17
    1160:	64 96       	adiw	r28, 0x14	; 20
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	f8 94       	cli
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	cd bf       	out	0x3d, r28	; 61
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	08 95       	ret

0000117a <AppADMIN_getAtmPIN>:
* Parameters (out): pu8_data - Pointer to variable to hold the input ATM PIN by terminal.
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the atm pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getAtmPIN(uint8_t* pu8_data)
{
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	ec 01       	movw	r28, r24
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t u8_counter=0;
	Terminal_enablePasswordMode();
    1182:	0e 94 22 11 	call	0x2244	; 0x2244 <Terminal_enablePasswordMode>
* Description: Function to get the atm pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t AppADMIN_getAtmPIN(uint8_t* pu8_data)
{
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t u8_counter=0;
    1186:	10 e0       	ldi	r17, 0x00	; 0
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"\nATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
    1188:	8d e0       	ldi	r24, 0x0D	; 13
    118a:	94 e0       	ldi	r25, 0x04	; 4
    118c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	b9 f5       	brne	.+110    	; 0x1202 <AppADMIN_getAtmPIN+0x88>
		return APP_STATUS_ERROR_NOK;
		
		do
		{
			App_terminalStatus = App_ReportTerminal(pu8_data);
    1194:	ce 01       	movw	r24, r28
    1196:	0e 94 ad 05 	call	0xb5a	; 0xb5a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	29 f0       	breq	.+10     	; 0x11a8 <AppADMIN_getAtmPIN+0x2e>
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
    119e:	11 f0       	breq	.+4      	; 0x11a4 <AppADMIN_getAtmPIN+0x2a>
    11a0:	86 30       	cpi	r24, 0x06	; 6
    11a2:	89 f5       	brne	.+98     	; 0x1206 <AppADMIN_getAtmPIN+0x8c>
			return APP_STATUS_ERROR_NOK;
		} while (App_terminalStatus == APP_STATUS_NO_OP);
    11a4:	86 30       	cpi	r24, 0x06	; 6
    11a6:	b1 f3       	breq	.-20     	; 0x1194 <AppADMIN_getAtmPIN+0x1a>
		
		if(stringCompare((uint8_t*)ATM_DB_ATM_PIN_VAL ,pu8_data) != 1)
    11a8:	be 01       	movw	r22, r28
    11aa:	88 e5       	ldi	r24, 0x58	; 88
    11ac:	95 e0       	ldi	r25, 0x05	; 5
    11ae:	0e 94 c5 19 	call	0x338a	; 0x338a <stringCompare>
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	e1 f0       	breq	.+56     	; 0x11ee <AppADMIN_getAtmPIN+0x74>
		{
			if(u8_counter == MAX_PIN_TRIAL)
    11b6:	13 30       	cpi	r17, 0x03	; 3
    11b8:	79 f4       	brne	.+30     	; 0x11d8 <AppADMIN_getAtmPIN+0x5e>
			{
				gu8_ATMMode = ATM_MODE_USER;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <gu8_ATMMode>
				Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
    11c0:	65 e8       	ldi	r22, 0x85	; 133
    11c2:	71 e0       	ldi	r23, 0x01	; 1
    11c4:	84 e9       	ldi	r24, 0x94	; 148
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
				Terminal_Out((uint8_t*)"Incorrect PIN\r\nPlease reach the Company\r\n");
    11cc:	88 e1       	ldi	r24, 0x18	; 24
    11ce:	94 e0       	ldi	r25, 0x04	; 4
    11d0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
				return APP_STATUS_PIN_NOT_CORRECT;
    11d4:	89 e0       	ldi	r24, 0x09	; 9
    11d6:	1c c0       	rjmp	.+56     	; 0x1210 <AppADMIN_getAtmPIN+0x96>
			}
			if(Terminal_Out((uint8_t*)"\nIncorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
    11d8:	82 e4       	ldi	r24, 0x42	; 66
    11da:	94 e0       	ldi	r25, 0x04	; 4
    11dc:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	99 f4       	brne	.+38     	; 0x120a <AppADMIN_getAtmPIN+0x90>
				return APP_STATUS_ERROR_NOK;
			u8_counter++;
    11e4:	1f 5f       	subi	r17, 0xFF	; 255
			EmptyString(pu8_data);
    11e6:	ce 01       	movw	r24, r28
    11e8:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
			break;
		}
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	} while (1);
    11ec:	cd cf       	rjmp	.-102    	; 0x1188 <AppADMIN_getAtmPIN+0xe>
			u8_counter++;
			EmptyString(pu8_data);
			continue;
		}else
		{
			if(Terminal_Out((uint8_t*)"\nLoading...\r") != TERMINAL_STATUS_ERROR_OK)
    11ee:	82 e5       	ldi	r24, 0x52	; 82
    11f0:	94 e0       	ldi	r25, 0x04	; 4
    11f2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	51 f4       	brne	.+20     	; 0x120e <AppADMIN_getAtmPIN+0x94>
		}
		EmptyString(pu8_data);
		if(Terminal_Out((uint8_t*)"\nInvalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
    11fa:	0e 94 26 11 	call	0x224c	; 0x224c <Terminal_disablePasswordMode>
	return APP_STATUS_PIN_CORRECT;
    11fe:	88 e0       	ldi	r24, 0x08	; 8
    1200:	07 c0       	rjmp	.+14     	; 0x1210 <AppADMIN_getAtmPIN+0x96>
	uint8_t u8_counter=0;
	Terminal_enablePasswordMode();
	do
	{
		if(Terminal_Out((uint8_t*)"\nATM PIN: ") != TERMINAL_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <AppADMIN_getAtmPIN+0x96>
			App_terminalStatus = App_ReportTerminal(pu8_data);
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
			{
				break;
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
			return APP_STATUS_ERROR_NOK;
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	03 c0       	rjmp	.+6      	; 0x1210 <AppADMIN_getAtmPIN+0x96>
				Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
				Terminal_Out((uint8_t*)"Incorrect PIN\r\nPlease reach the Company\r\n");
				return APP_STATUS_PIN_NOT_CORRECT;
			}
			if(Terminal_Out((uint8_t*)"\nIncorrect PIN\r") != TERMINAL_STATUS_ERROR_OK)
				return APP_STATUS_ERROR_NOK;
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	01 c0       	rjmp	.+2      	; 0x1210 <AppADMIN_getAtmPIN+0x96>
			EmptyString(pu8_data);
			continue;
		}else
		{
			if(Terminal_Out((uint8_t*)"\nLoading...\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
    120e:	80 e0       	ldi	r24, 0x00	; 0
		if(Terminal_Out((uint8_t*)"\nInvalid PIN, Only 4 characters\r") != TERMINAL_STATUS_ERROR_OK)
			return APP_STATUS_ERROR_NOK;
	} while (1);
	Terminal_disablePasswordMode();
	return APP_STATUS_PIN_CORRECT;
}
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	08 95       	ret

00001218 <App_update>:
* Parameters (out): None
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t App_update(void)
{
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	69 97       	sbiw	r28, 0x19	; 25
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
    122c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <enuCurrentAppStatus>
    1230:	84 30       	cpi	r24, 0x04	; 4
    1232:	09 f0       	breq	.+2      	; 0x1236 <App_update+0x1e>
    1234:	18 c1       	rjmp	.+560    	; 0x1466 <App_update+0x24e>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	enuApp_Status_t App_terminalStatus = APP_STATUS_ERROR_OK;
	uint8_t au8_termInput[10] = {0};
    1236:	fe 01       	movw	r30, r28
    1238:	31 96       	adiw	r30, 0x01	; 1
    123a:	8a e0       	ldi	r24, 0x0A	; 10
    123c:	df 01       	movw	r26, r30
    123e:	1d 92       	st	X+, r1
    1240:	8a 95       	dec	r24
    1242:	e9 f7       	brne	.-6      	; 0x123e <App_update+0x26>
	static uint8_t u8_passFlag = 0;
	if(gu8_ATMMode == ATM_MODE_ADMIN)
    1244:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gu8_ATMMode>
    1248:	81 11       	cpse	r24, r1
    124a:	8c c0       	rjmp	.+280    	; 0x1364 <App_update+0x14c>
	{ /**************** PROGRAMMING MODE ****************/
			uint8_t au8_Input[2]={0};
    124c:	19 8e       	std	Y+25, r1	; 0x19
    124e:	18 8e       	std	Y+24, r1	; 0x18
			uint8_t au8_tempPinNum[5]={0};
    1250:	72 96       	adiw	r30, 0x12	; 18
    1252:	85 e0       	ldi	r24, 0x05	; 5
    1254:	df 01       	movw	r26, r30
    1256:	1d 92       	st	X+, r1
    1258:	8a 95       	dec	r24
    125a:	e9 f7       	brne	.-6      	; 0x1256 <App_update+0x3e>
			uint8_t au8_tempMaxAmount[8]={0};
    125c:	38 97       	sbiw	r30, 0x08	; 8
    125e:	88 e0       	ldi	r24, 0x08	; 8
    1260:	df 01       	movw	r26, r30
    1262:	1d 92       	st	X+, r1
    1264:	8a 95       	dec	r24
    1266:	e9 f7       	brne	.-6      	; 0x1262 <App_update+0x4a>
			enuApp_Status_t PIN_Status = 0;
			if(u8_passFlag == 0)
    1268:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <__data_end>
    126c:	81 11       	cpse	r24, r1
    126e:	0d c0       	rjmp	.+26     	; 0x128a <App_update+0x72>
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				PIN_Status = AppADMIN_getAtmPIN(au8_tempPinNum);
    1270:	ce 01       	movw	r24, r28
    1272:	43 96       	adiw	r24, 0x13	; 19
    1274:	0e 94 bd 08 	call	0x117a	; 0x117a <AppADMIN_getAtmPIN>
				if(PIN_Status == APP_STATUS_PIN_NOT_CORRECT)
    1278:	89 30       	cpi	r24, 0x09	; 9
    127a:	09 f4       	brne	.+2      	; 0x127e <App_update+0x66>
    127c:	67 c0       	rjmp	.+206    	; 0x134c <App_update+0x134>
					return APP_STATUS_ERROR_OK;
				else if(PIN_Status != APP_STATUS_PIN_CORRECT)
    127e:	88 30       	cpi	r24, 0x08	; 8
    1280:	09 f0       	breq	.+2      	; 0x1284 <App_update+0x6c>
    1282:	66 c0       	rjmp	.+204    	; 0x1350 <App_update+0x138>
					return APP_STATUS_ERROR_NOK;
				u8_passFlag = 1;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <__data_end>
			}
			
			Terminal_Out((uint8_t*)"\n1.Add New Customer\n\r2.Update Existing Customer\n\r3.Update Max Amount\n\r4.Exit\r");
    128a:	8f e5       	ldi	r24, 0x5F	; 95
    128c:	94 e0       	ldi	r25, 0x04	; 4
    128e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
			
			AppADMIN_getInput(au8_Input);
    1292:	ce 01       	movw	r24, r28
    1294:	48 96       	adiw	r24, 0x18	; 24
    1296:	0e 94 de 05 	call	0xbbc	; 0xbbc <AppADMIN_getInput>
			if(au8_Input[0] == '1')//--------- New Customer OPTION -----------//
    129a:	88 8d       	ldd	r24, Y+24	; 0x18
    129c:	81 33       	cpi	r24, 0x31	; 49
    129e:	39 f4       	brne	.+14     	; 0x12ae <App_update+0x96>
			{
				AppADMIN_processNewCustomer();
    12a0:	0e 94 cf 06 	call	0xd9e	; 0xd9e <AppADMIN_processNewCustomer>
				EmptyString(au8_Input);
    12a4:	ce 01       	movw	r24, r28
    12a6:	48 96       	adiw	r24, 0x18	; 24
    12a8:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
    12ac:	d0 c0       	rjmp	.+416    	; 0x144e <App_update+0x236>

			}else if(au8_Input[0] == '2')//--------- Update Existing Customer OPTION -----------//
    12ae:	82 33       	cpi	r24, 0x32	; 50
    12b0:	39 f4       	brne	.+14     	; 0x12c0 <App_update+0xa8>
			{
				AppADMIN_processExistingCustomer();
    12b2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <AppADMIN_processExistingCustomer>
				EmptyString(au8_Input);
    12b6:	ce 01       	movw	r24, r28
    12b8:	48 96       	adiw	r24, 0x18	; 24
    12ba:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
    12be:	c7 c0       	rjmp	.+398    	; 0x144e <App_update+0x236>
			}else if(au8_Input[0] == '3')//--------- Max Amount OPTION -----------//
    12c0:	83 33       	cpi	r24, 0x33	; 51
    12c2:	d1 f4       	brne	.+52     	; 0x12f8 <App_update+0xe0>
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
    12c4:	ce 01       	movw	r24, r28
    12c6:	0b 96       	adiw	r24, 0x0b	; 11
    12c8:	0e 94 07 06 	call	0xc0e	; 0xc0e <AppADMIN_getnewMaxAmount>
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
    12cc:	ce 01       	movw	r24, r28
    12ce:	0b 96       	adiw	r24, 0x0b	; 11
    12d0:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
    12d4:	48 2f       	mov	r20, r24
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	be 01       	movw	r22, r28
    12da:	65 5f       	subi	r22, 0xF5	; 245
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	83 e0       	ldi	r24, 0x03	; 3
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 ef 0b 	call	0x17de	; 0x17de <Eeprom_24_writePacket>
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	a9 f5       	brne	.+106    	; 0x1354 <App_update+0x13c>
					return APP_STATUS_ERROR_NOK;
				stringCopy(au8_tempMaxAmount, gau8_maxAmount);	
    12ea:	6c e7       	ldi	r22, 0x7C	; 124
    12ec:	75 e0       	ldi	r23, 0x05	; 5
    12ee:	ce 01       	movw	r24, r28
    12f0:	0b 96       	adiw	r24, 0x0b	; 11
    12f2:	0e 94 04 1a 	call	0x3408	; 0x3408 <stringCopy>
    12f6:	ab c0       	rjmp	.+342    	; 0x144e <App_update+0x236>
			}else if(au8_Input[0] == '4')//--------- EXIT OPTION -----------//
    12f8:	84 33       	cpi	r24, 0x34	; 52
    12fa:	09 f5       	brne	.+66     	; 0x133e <App_update+0x126>
			{
				if(gu8_initData == ATM_DB_FLAG_SET_VAL)
    12fc:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <gu8_initData>
    1300:	8a 3a       	cpi	r24, 0xAA	; 170
    1302:	a9 f4       	brne	.+42     	; 0x132e <App_update+0x116>
				{
					u8_passFlag = 0;
    1304:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <__data_end>
					gu8_ATMMode = ATM_MODE_USER;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <gu8_ATMMode>
					Lcd_clear();
    130e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Lcd_clear>
					if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
    1312:	85 ea       	ldi	r24, 0xA5	; 165
    1314:	92 e0       	ldi	r25, 0x02	; 2
    1316:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	e9 f4       	brne	.+58     	; 0x1358 <App_update+0x140>
						return APP_STATUS_ERROR_NOK;
					
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
    131e:	65 e8       	ldi	r22, 0x85	; 133
    1320:	71 e0       	ldi	r23, 0x01	; 1
    1322:	84 e9       	ldi	r24, 0x94	; 148
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
					
					return APP_STATUS_ERROR_OK;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	9d c0       	rjmp	.+314    	; 0x1468 <App_update+0x250>
				}else
				{
					if(Terminal_Out((uint8_t*)"\nData Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
    132e:	8d ea       	ldi	r24, 0xAD	; 173
    1330:	94 e0       	ldi	r25, 0x04	; 4
    1332:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	89 f0       	breq	.+34     	; 0x135c <App_update+0x144>
						return APP_STATUS_ERROR_NOK;
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	95 c0       	rjmp	.+298    	; 0x1468 <App_update+0x250>
					return APP_STATUS_ERROR_OK;
				}
			}else
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Input!") != TERMINAL_STATUS_ERROR_OK)
    133e:	8b ee       	ldi	r24, 0xEB	; 235
    1340:	94 e0       	ldi	r25, 0x04	; 4
    1342:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	59 f4       	brne	.+22     	; 0x1360 <App_update+0x148>
    134a:	81 c0       	rjmp	.+258    	; 0x144e <App_update+0x236>
			if(u8_passFlag == 0)
			{
				/* Get the ATM PIN from the ADMIN Terminal and check if it's correct */
				PIN_Status = AppADMIN_getAtmPIN(au8_tempPinNum);
				if(PIN_Status == APP_STATUS_PIN_NOT_CORRECT)
					return APP_STATUS_ERROR_OK;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	8c c0       	rjmp	.+280    	; 0x1468 <App_update+0x250>
				else if(PIN_Status != APP_STATUS_PIN_CORRECT)
					return APP_STATUS_ERROR_NOK;
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	8a c0       	rjmp	.+276    	; 0x1468 <App_update+0x250>
				EmptyString(au8_Input);
			}else if(au8_Input[0] == '3')//--------- Max Amount OPTION -----------//
			{
				AppADMIN_getnewMaxAmount(au8_tempMaxAmount);
				if(Eeprom_24_writePacket(ATM_DB_MAX_AMNT_ADDR, au8_tempMaxAmount, stringLength(au8_tempMaxAmount)) != EEPROM_24_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	88 c0       	rjmp	.+272    	; 0x1468 <App_update+0x250>
				{
					u8_passFlag = 0;
					gu8_ATMMode = ATM_MODE_USER;
					Lcd_clear();
					if(Terminal_Out((uint8_t*)"\nUSER Mode\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	86 c0       	rjmp	.+268    	; 0x1468 <App_update+0x250>
					return APP_STATUS_ERROR_OK;
				}else
				{
					if(Terminal_Out((uint8_t*)"\nData Base is empty, you must register at least one customer\r") != TERMINAL_STATUS_ERROR_OK)
						return APP_STATUS_ERROR_NOK;
					return APP_STATUS_ERROR_OK;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	84 c0       	rjmp	.+264    	; 0x1468 <App_update+0x250>
				}
			}else
			{
				if(Terminal_Out((uint8_t*)"\nInvalid Input!") != TERMINAL_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	82 c0       	rjmp	.+260    	; 0x1468 <App_update+0x250>
	{							/************* User Mode **************/
		/********************************************************************************************/
		/************************************ ADMIN ENTERED ****************************************/
		/********************************************************************************************/
			/********************Handling ADMIN Requesting Programming Mode************************/
			if((gu8_ADMIN_Request == ADMIN_REQUESTED) && (gu8_USER_Mode_State == USER_IDLE))
    1364:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <gu8_ADMIN_Request>
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	31 f4       	brne	.+12     	; 0x1378 <App_update+0x160>
    136c:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <gu8_USER_Mode_State>
    1370:	81 11       	cpse	r24, r1
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <App_update+0x160>
			{
				gu8_ATMMode = ATM_MODE_ADMIN;
    1374:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <gu8_ATMMode>
			}
			App_terminalStatus = App_ReportTerminal(au8_termInput);
    1378:	ce 01       	movw	r24, r28
    137a:	01 96       	adiw	r24, 0x01	; 1
    137c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <App_ReportTerminal>
			if(App_terminalStatus == APP_STATUS_ERROR_OK)
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	31 f5       	brne	.+76     	; 0x13d0 <App_update+0x1b8>
			{
				if (stringCompare((uint8_t*) au8_termInput,(uint8_t*) cgau8_ADMIN_Word) == 1) /* User Wants to enter ADMIN Mode */
    1384:	6d e5       	ldi	r22, 0x5D	; 93
    1386:	75 e0       	ldi	r23, 0x05	; 5
    1388:	ce 01       	movw	r24, r28
    138a:	01 96       	adiw	r24, 0x01	; 1
    138c:	0e 94 c5 19 	call	0x338a	; 0x338a <stringCompare>
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	11 f5       	brne	.+68     	; 0x13d8 <App_update+0x1c0>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
    1394:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <gu8_USER_Mode_State>
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	51 f4       	brne	.+20     	; 0x13b0 <App_update+0x198>
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
    139c:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <gu8_ADMIN_Request>
						if(Terminal_Out((uint8_t*)"\nATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
    13a0:	8b ef       	ldi	r24, 0xFB	; 251
    13a2:	94 e0       	ldi	r25, 0x04	; 4
    13a4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	09 f0       	breq	.+2      	; 0x13ae <App_update+0x196>
    13ac:	4a c0       	rjmp	.+148    	; 0x1442 <App_update+0x22a>
    13ae:	14 c0       	rjmp	.+40     	; 0x13d8 <App_update+0x1c0>
							return APP_STATUS_ERROR_NOK;
					}else /* User Mode is Idle ==> The ATM is not used by User */
					{
						gu8_ATMMode = ATM_MODE_ADMIN;
    13b0:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <gu8_ATMMode>
						
						Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
    13b4:	60 e7       	ldi	r22, 0x70	; 112
    13b6:	72 e0       	ldi	r23, 0x02	; 2
    13b8:	81 e8       	ldi	r24, 0x81	; 129
    13ba:	92 e0       	ldi	r25, 0x02	; 2
    13bc:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
						
						if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
    13c0:	82 e9       	ldi	r24, 0x92	; 146
    13c2:	92 e0       	ldi	r25, 0x02	; 2
    13c4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Terminal_Out>
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	e9 f1       	breq	.+122    	; 0x1446 <App_update+0x22e>
							return APP_STATUS_ERROR_NOK;
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	4c c0       	rjmp	.+152    	; 0x1468 <App_update+0x250>
						return APP_STATUS_ERROR_OK;
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	11 f0       	breq	.+4      	; 0x13d8 <App_update+0x1c0>
    13d4:	86 30       	cpi	r24, 0x06	; 6
    13d6:	c9 f5       	brne	.+114    	; 0x144a <App_update+0x232>
				return APP_STATUS_ERROR_NOK;
			/****************************************************************/
			/********************** Getting Input from User ************************/
			uint8_t au8_data=0;
    13d8:	1b 8a       	std	Y+19, r1	; 0x13
			enuKeypad_Status_t enuKeypadStatus = Keypad_readKey(&au8_data);
    13da:	ce 01       	movw	r24, r28
    13dc:	43 96       	adiw	r24, 0x13	; 19
    13de:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <Keypad_readKey>
			if(enuKeypadStatus == KEYPAD_STATUS_PRESSED)
    13e2:	86 30       	cpi	r24, 0x06	; 6
    13e4:	b1 f4       	brne	.+44     	; 0x1412 <App_update+0x1fa>
			{
			/************************************ KEYPAD PRESSED ****************************************/
			/********* Insert Card Chosen ********/
				if(au8_data == '1') 
    13e6:	8b 89       	ldd	r24, Y+19	; 0x13
    13e8:	81 33       	cpi	r24, 0x31	; 49
    13ea:	19 f4       	brne	.+6      	; 0x13f2 <App_update+0x1da>
				{
					AppUSER_insertCard();
    13ec:	0e 94 30 04 	call	0x860	; 0x860 <AppUSER_insertCard>
    13f0:	2e c0       	rjmp	.+92     	; 0x144e <App_update+0x236>
			/******* Display Temp Chosen *******/
				}else if(au8_data == '2')
    13f2:	82 33       	cpi	r24, 0x32	; 50
    13f4:	19 f4       	brne	.+6      	; 0x13fc <App_update+0x1e4>
				{
					AppUSER_displayTemp();
    13f6:	0e 94 9c 00 	call	0x138	; 0x138 <AppUSER_displayTemp>
    13fa:	29 c0       	rjmp	.+82     	; 0x144e <App_update+0x236>
				}else if(au8_data == '-') 
    13fc:	8d 32       	cpi	r24, 0x2D	; 45
    13fe:	39 f5       	brne	.+78     	; 0x144e <App_update+0x236>
				{
					gu8_displayFlag = 0;
    1400:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <gu8_displayFlag>
					Lcd_printLCD((uint8_t*)"1.Insert Card", (uint8_t*)"2.Display Temp");
    1404:	65 e8       	ldi	r22, 0x85	; 133
    1406:	71 e0       	ldi	r23, 0x01	; 1
    1408:	84 e9       	ldi	r24, 0x94	; 148
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Lcd_printLCD>
    1410:	1e c0       	rjmp	.+60     	; 0x144e <App_update+0x236>
				}
			}else if(gu8_displayFlag == DISPLAY_TEMP) /* If in temperature screen >> Update the temp value */
    1412:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <gu8_displayFlag>
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	d1 f4       	brne	.+52     	; 0x144e <App_update+0x236>
			{
				uint8_t u8_currentTemp=0;
    141a:	1b 86       	std	Y+11, r1	; 0x0b
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
    141c:	ce 01       	movw	r24, r28
    141e:	0b 96       	adiw	r24, 0x0b	; 11
    1420:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LM35_readTemp>
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	99 f4       	brne	.+38     	; 0x144e <App_update+0x236>
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Lcd_setCursor>
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	31 f4       	brne	.+12     	; 0x143e <App_update+0x226>
					return APP_STATUS_ERROR_NOK;
					if(Lcd_printDecimal(u8_currentTemp) != LCD_STATUS_ERROR_OK)
    1432:	8b 85       	ldd	r24, Y+11	; 0x0b
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <Lcd_printDecimal>
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	41 f0       	breq	.+16     	; 0x144e <App_update+0x236>
			{
				uint8_t u8_currentTemp=0;
				if (LM35_readTemp(&u8_currentTemp) == LM35_STATUS_ERROR_OK)
				{
					if(Lcd_setCursor(1, 0) != LCD_STATUS_ERROR_OK)
					return APP_STATUS_ERROR_NOK;
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	13 c0       	rjmp	.+38     	; 0x1468 <App_update+0x250>
				{
					if(gu8_USER_Mode_State == USER_BUSY) /* CARD is Busy in transaction */
					{
						gu8_ADMIN_Request = ADMIN_REQUESTED;
						if(Terminal_Out((uint8_t*)"\nATM is Busy Now, Programming Mode will start after current Process\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	11 c0       	rjmp	.+34     	; 0x1468 <App_update+0x250>
						
						Lcd_printLCD((uint8_t*)"******ATM*******", (uint8_t*)"*****LOCKED*****");
						
						if(Terminal_Out((uint8_t*)"\nProgramming Mode\r") != TERMINAL_STATUS_ERROR_OK)
							return APP_STATUS_ERROR_NOK;
						return APP_STATUS_ERROR_OK;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	0f c0       	rjmp	.+30     	; 0x1468 <App_update+0x250>
					}
				}
			}else if((App_terminalStatus != APP_STATUS_ERROR_OK) && (App_terminalStatus != APP_STATUS_NO_OP))
				return APP_STATUS_ERROR_NOK;
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	0d c0       	rjmp	.+26     	; 0x1468 <App_update+0x250>
					return APP_STATUS_ERROR_NOK;
				}
			}
	/****************************************************************/
	}
	Delay_ms(100);
    144e:	24 e6       	ldi	r18, 0x64	; 100
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
	return APP_STATUS_ERROR_OK;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <App_update+0x250>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
    1466:	85 e0       	ldi	r24, 0x05	; 5
			}
	/****************************************************************/
	}
	Delay_ms(100);
	return APP_STATUS_ERROR_OK;
}
    1468:	69 96       	adiw	r28, 0x19	; 25
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	08 95       	ret

0000147a <App_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the application */
	if(App_init() != APP_STATUS_ERROR_OK)
    147a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <App_init>
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	39 f4       	brne	.+14     	; 0x1490 <App_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
    1482:	8f b7       	in	r24, 0x3f	; 63
    1484:	80 68       	ori	r24, 0x80	; 128
    1486:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the App Status */
		if(App_update() != APP_STATUS_ERROR_OK)
    1488:	0e 94 0c 09 	call	0x1218	; 0x1218 <App_update>
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	e1 f3       	breq	.-8      	; 0x1488 <App_start+0xe>
			return APP_STATUS_ERROR_NOK;
	}
}
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	08 95       	ret

00001494 <Button_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button module is already initialized */
	if (genu_BttnModuleState == BTTN_STATUS_INIT)
    1494:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <genu_BttnModuleState>
    1498:	85 30       	cpi	r24, 0x05	; 5
    149a:	71 f0       	breq	.+28     	; 0x14b8 <Button_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    149c:	82 e9       	ldi	r24, 0x92	; 146
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 8b 12 	call	0x2516	; 0x2516 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	11 f0       	breq	.+4      	; 0x14ac <Button_init+0x18>
    14a8:	87 30       	cpi	r24, 0x07	; 7
    14aa:	29 f4       	brne	.+10     	; 0x14b6 <Button_init+0x22>
		return BTTN_STATUS_ERROR_NOK;
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
    14ac:	85 e0       	ldi	r24, 0x05	; 5
    14ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <genu_BttnModuleState>
	return BTTN_STATUS_ERROR_OK;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return BTTN_STATUS_ERROR_NOK;
    14b6:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
	return BTTN_STATUS_ERROR_OK;
}
    14b8:	08 95       	ret

000014ba <Button_getState>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
    14ba:	82 30       	cpi	r24, 0x02	; 2
    14bc:	60 f4       	brcc	.+24     	; 0x14d6 <Button_getState+0x1c>
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
    14be:	61 15       	cp	r22, r1
    14c0:	71 05       	cpc	r23, r1
    14c2:	59 f0       	breq	.+22     	; 0x14da <Button_getState+0x20>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
    14c4:	e8 2f       	mov	r30, r24
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	e7 54       	subi	r30, 0x47	; 71
    14ca:	fa 4f       	sbci	r31, 0xFA	; 250
    14cc:	80 81       	ld	r24, Z
    14ce:	fb 01       	movw	r30, r22
    14d0:	80 83       	st	Z, r24
	return BTTN_STATUS_ERROR_OK;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
    14d6:	82 e0       	ldi	r24, 0x02	; 2
    14d8:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
	{
		return BTTN_STATUS_ERROR_NULL;
    14da:	83 e0       	ldi	r24, 0x03	; 3
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
	return BTTN_STATUS_ERROR_OK;
}
    14dc:	08 95       	ret

000014de <Button_updateState>:
* Parameters (out): None
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to update the state of the button (Pressed or Released) by reading the Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_updateState(uint8_t u8_bttnID)
{
    14de:	0f 93       	push	r16
    14e0:	1f 93       	push	r17
    14e2:	cf 93       	push	r28
    14e4:	df 93       	push	r29
    14e6:	1f 92       	push	r1
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <Button_updateState+0x14>
    14f0:	58 c0       	rjmp	.+176    	; 0x15a2 <Button_updateState+0xc4>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
    14f2:	19 82       	std	Y+1, r1	; 0x01
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
    14f4:	08 2f       	mov	r16, r24
    14f6:	10 e0       	ldi	r17, 0x00	; 0
    14f8:	f8 01       	movw	r30, r16
    14fa:	e0 59       	subi	r30, 0x90	; 144
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	be 01       	movw	r22, r28
    1500:	6f 5f       	subi	r22, 0xFF	; 255
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	80 81       	ld	r24, Z
    1506:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <Dio_readPin>
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	09 f0       	breq	.+2      	; 0x1510 <Button_updateState+0x32>
    150e:	4b c0       	rjmp	.+150    	; 0x15a6 <Button_updateState+0xc8>
		return BTTN_STATUS_ERROR_NOK;
	if(u8_valueTemp == PIN_HIGH)
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	09 f5       	brne	.+66     	; 0x1558 <Button_updateState+0x7a>
    1516:	04 c0       	rjmp	.+8      	; 0x1520 <Button_updateState+0x42>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	a1 1d       	adc	r26, r1
    151c:	b1 1d       	adc	r27, r1
    151e:	03 c0       	rjmp	.+6      	; 0x1526 <Button_updateState+0x48>
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	dc 01       	movw	r26, r24
    1526:	88 3b       	cpi	r24, 0xB8	; 184
    1528:	2b e0       	ldi	r18, 0x0B	; 11
    152a:	92 07       	cpc	r25, r18
    152c:	a1 05       	cpc	r26, r1
    152e:	b1 05       	cpc	r27, r1
    1530:	98 f3       	brcs	.-26     	; 0x1518 <Button_updateState+0x3a>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    1532:	be 01       	movw	r22, r28
    1534:	6f 5f       	subi	r22, 0xFF	; 255
    1536:	7f 4f       	sbci	r23, 0xFF	; 255
    1538:	f8 01       	movw	r30, r16
    153a:	e0 59       	subi	r30, 0x90	; 144
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	80 81       	ld	r24, Z
    1540:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <Dio_readPin>
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	89 f5       	brne	.+98     	; 0x15aa <Button_updateState+0xcc>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_HIGH)
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	81 f5       	brne	.+96     	; 0x15ae <Button_updateState+0xd0>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
    154e:	f8 01       	movw	r30, r16
    1550:	e7 54       	subi	r30, 0x47	; 71
    1552:	fa 4f       	sbci	r31, 0xFA	; 250
    1554:	80 83       	st	Z, r24
    1556:	30 c0       	rjmp	.+96     	; 0x15b8 <Button_updateState+0xda>
	}else if (u8_valueTemp == PIN_LOW)
    1558:	88 23       	and	r24, r24
    155a:	31 f0       	breq	.+12     	; 0x1568 <Button_updateState+0x8a>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	2c c0       	rjmp	.+88     	; 0x15b8 <Button_updateState+0xda>
		if(u8_valueTemp == PIN_HIGH)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
	}else if (u8_valueTemp == PIN_LOW)
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
    1560:	01 96       	adiw	r24, 0x01	; 1
    1562:	a1 1d       	adc	r26, r1
    1564:	b1 1d       	adc	r27, r1
    1566:	03 c0       	rjmp	.+6      	; 0x156e <Button_updateState+0x90>
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	dc 01       	movw	r26, r24
    156e:	88 3b       	cpi	r24, 0xB8	; 184
    1570:	2b e0       	ldi	r18, 0x0B	; 11
    1572:	92 07       	cpc	r25, r18
    1574:	a1 05       	cpc	r26, r1
    1576:	b1 05       	cpc	r27, r1
    1578:	98 f3       	brcs	.-26     	; 0x1560 <Button_updateState+0x82>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
    157a:	be 01       	movw	r22, r28
    157c:	6f 5f       	subi	r22, 0xFF	; 255
    157e:	7f 4f       	sbci	r23, 0xFF	; 255
    1580:	f8 01       	movw	r30, r16
    1582:	e0 59       	subi	r30, 0x90	; 144
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	80 81       	ld	r24, Z
    1588:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <Dio_readPin>
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	89 f4       	brne	.+34     	; 0x15b2 <Button_updateState+0xd4>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	81 11       	cpse	r24, r1
    1594:	10 c0       	rjmp	.+32     	; 0x15b6 <Button_updateState+0xd8>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
    1596:	f8 01       	movw	r30, r16
    1598:	e7 54       	subi	r30, 0x47	; 71
    159a:	fa 4f       	sbci	r31, 0xFA	; 250
    159c:	10 82       	st	Z, r1
	}
	return BTTN_STATUS_ERROR_OK;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	0b c0       	rjmp	.+22     	; 0x15b8 <Button_updateState+0xda>
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
		return BTTN_STATUS_ERROR_ID_INVALID;
    15a2:	82 e0       	ldi	r24, 0x02	; 2
    15a4:	09 c0       	rjmp	.+18     	; 0x15b8 <Button_updateState+0xda>
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
		return BTTN_STATUS_ERROR_NOK;
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	07 c0       	rjmp	.+14     	; 0x15b8 <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	05 c0       	rjmp	.+10     	; 0x15b8 <Button_updateState+0xda>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	03 c0       	rjmp	.+6      	; 0x15b8 <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	01 c0       	rjmp	.+2      	; 0x15b8 <Button_updateState+0xda>
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
}
    15b8:	0f 90       	pop	r0
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	1f 91       	pop	r17
    15c0:	0f 91       	pop	r16
    15c2:	08 95       	ret

000015c4 <EEPROM_getAddresses>:
*				given as argument.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
static enuEeprom_24_Status_t EEPROM_getAddresses(uint8_t *pu8_slaveAddress, uint8_t *pu8_wordAddress, uint16_t u16_location)
{
#if EEPROM_24_MODEL	== AT24C16B
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS | (uint8_t)((u16_location & 0x0700)>>7);
    15c4:	9a 01       	movw	r18, r20
    15c6:	22 27       	eor	r18, r18
    15c8:	37 70       	andi	r19, 0x07	; 7
    15ca:	22 0f       	add	r18, r18
    15cc:	23 2f       	mov	r18, r19
    15ce:	22 1f       	adc	r18, r18
    15d0:	33 0b       	sbc	r19, r19
    15d2:	31 95       	neg	r19
    15d4:	20 65       	ori	r18, 0x50	; 80
    15d6:	fc 01       	movw	r30, r24
    15d8:	20 83       	st	Z, r18
	*pu8_wordAddress = u16_location & 0xFF;
    15da:	fb 01       	movw	r30, r22
    15dc:	40 83       	st	Z, r20
	*pu8_slaveAddress = EEPROM_24_SLV_ADDRESS;
	pu8_wordAddress[0] = (uint8_t)(u16_location >> 8);
	pu8_wordAddress[1] = (uint8_t)u16_location;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	08 95       	ret

000015e2 <Eeprom_24_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is already initialized */
	if (EEPROM_24_STATUS_INIT == genu_eepromModuleState)
    15e2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <genu_eepromModuleState>
    15e6:	83 30       	cpi	r24, 0x03	; 3
    15e8:	51 f0       	breq	.+20     	; 0x15fe <Eeprom_24_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
    15ea:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <I2C_MasterInit>
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
    15ee:	85 30       	cpi	r24, 0x05	; 5
    15f0:	29 f0       	breq	.+10     	; 0x15fc <Eeprom_24_init+0x1a>
	{
		return EEPROM_24_STATUS_ERROR_NOK;
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
    15f2:	83 e0       	ldi	r24, 0x03	; 3
    15f4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <genu_eepromModuleState>
	return EEPROM_24_STATUS_ERROR_OK;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	08 95       	ret
/**************************************************************************************/
	/* Initialize the Master I2C Module */
	enuI2C_Status_t enu_I2CStatus = I2C_MasterInit();
	if((enu_I2CStatus == I2C_STATUS_NOT_INIT) && (enu_I2CStatus != I2C_STATUS_ALREADY_INIT))
	{
		return EEPROM_24_STATUS_ERROR_NOK;
    15fc:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Set the EEPROM Module State to Initialized*/
	genu_eepromModuleState = EEPROM_24_STATUS_INIT;
	return EEPROM_24_STATUS_ERROR_OK;
}
    15fe:	08 95       	ret

00001600 <Eeprom_24_writeByte>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writeByte(uint16_t u16_location, uint8_t u8_data)
{
    1600:	1f 93       	push	r17
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	00 d0       	rcall	.+0      	; 0x1608 <Eeprom_24_writeByte+0x8>
    1608:	1f 92       	push	r1
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	ac 01       	movw	r20, r24
    1610:	6b 83       	std	Y+3, r22	; 0x03
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1612:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <genu_eepromModuleState>
    1616:	93 30       	cpi	r25, 0x03	; 3
    1618:	11 f5       	brne	.+68     	; 0x165e <Eeprom_24_writeByte+0x5e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    161a:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    161c:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    161e:	be 01       	movw	r22, r28
    1620:	6e 5f       	subi	r22, 0xFE	; 254
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	ce 01       	movw	r24, r28
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <EEPROM_getAddresses>
    162c:	18 2f       	mov	r17, r24
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	c1 f4       	brne	.+48     	; 0x1662 <Eeprom_24_writeByte+0x62>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    1632:	21 e0       	ldi	r18, 0x01	; 1
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	ae 01       	movw	r20, r28
    1638:	4d 5f       	subi	r20, 0xFD	; 253
    163a:	5f 4f       	sbci	r21, 0xFF	; 255
    163c:	6a 81       	ldd	r22, Y+2	; 0x02
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <I2C_MasterSendToLocation>
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	79 f4       	brne	.+30     	; 0x1666 <Eeprom_24_writeByte+0x66>
 
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
    1648:	2f e0       	ldi	r18, 0x0F	; 15
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    165c:	05 c0       	rjmp	.+10     	; 0x1668 <Eeprom_24_writeByte+0x68>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    165e:	12 e0       	ldi	r17, 0x02	; 2
    1660:	03 c0       	rjmp	.+6      	; 0x1668 <Eeprom_24_writeByte+0x68>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1662:	10 e0       	ldi	r17, 0x00	; 0
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <Eeprom_24_writeByte+0x68>
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, &u8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1666:	10 e0       	ldi	r17, 0x00	; 0
		return EEPROM_24_STATUS_ERROR_NOK;

#endif
	Delay_ms(15);
	return EEPROM_24_STATUS_ERROR_OK;
}
    1668:	81 2f       	mov	r24, r17
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	df 91       	pop	r29
    1672:	cf 91       	pop	r28
    1674:	1f 91       	pop	r17
    1676:	08 95       	ret

00001678 <Eeprom_24_readByte>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read a byte inside a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readByte(uint16_t u16_location, uint8_t* pu8_data)
{
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	1f 93       	push	r17
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	00 d0       	rcall	.+0      	; 0x1684 <Eeprom_24_readByte+0xc>
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	ac 01       	movw	r20, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    168a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <genu_eepromModuleState>
    168e:	93 30       	cpi	r25, 0x03	; 3
    1690:	21 f5       	brne	.+72     	; 0x16da <Eeprom_24_readByte+0x62>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1692:	61 15       	cp	r22, r1
    1694:	71 05       	cpc	r23, r1
    1696:	19 f1       	breq	.+70     	; 0x16de <Eeprom_24_readByte+0x66>
    1698:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    169a:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    169c:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    169e:	be 01       	movw	r22, r28
    16a0:	6e 5f       	subi	r22, 0xFE	; 254
    16a2:	7f 4f       	sbci	r23, 0xFF	; 255
    16a4:	ce 01       	movw	r24, r28
    16a6:	01 96       	adiw	r24, 0x01	; 1
    16a8:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <EEPROM_getAddresses>
    16ac:	18 2f       	mov	r17, r24
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	c1 f4       	brne	.+48     	; 0x16e2 <Eeprom_24_readByte+0x6a>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
    16b2:	21 e0       	ldi	r18, 0x01	; 1
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	a7 01       	movw	r20, r14
    16b8:	6a 81       	ldd	r22, Y+2	; 0x02
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	0e 94 20 19 	call	0x3240	; 0x3240 <I2C_MasterReceiveFromLocation>
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	89 f4       	brne	.+34     	; 0x16e6 <Eeprom_24_readByte+0x6e>

	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
	
#endif
	Delay_ms(5);
    16c4:	25 e0       	ldi	r18, 0x05	; 5
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
	return EEPROM_24_STATUS_ERROR_OK;
    16d8:	07 c0       	rjmp	.+14     	; 0x16e8 <Eeprom_24_readByte+0x70>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    16da:	12 e0       	ldi	r17, 0x02	; 2
    16dc:	05 c0       	rjmp	.+10     	; 0x16e8 <Eeprom_24_readByte+0x70>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    16de:	14 e0       	ldi	r17, 0x04	; 4
    16e0:	03 c0       	rjmp	.+6      	; 0x16e8 <Eeprom_24_readByte+0x70>
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    16e2:	10 e0       	ldi	r17, 0x00	; 0
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <Eeprom_24_readByte+0x70>
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, SINGLE_BYTE) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    16e6:	10 e0       	ldi	r17, 0x00	; 0
		return EEPROM_24_STATUS_ERROR_NOK;
	
#endif
	Delay_ms(5);
	return EEPROM_24_STATUS_ERROR_OK;
}
    16e8:	81 2f       	mov	r24, r17
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	1f 91       	pop	r17
    16f4:	ff 90       	pop	r15
    16f6:	ef 90       	pop	r14
    16f8:	08 95       	ret

000016fa <Eeprom_24_writePage>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Page of data bytes to a specific page.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePage(uint8_t u8_page, uint8_t *pu8_data)
{
    16fa:	ef 92       	push	r14
    16fc:	ff 92       	push	r15
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	00 d0       	rcall	.+0      	; 0x1706 <Eeprom_24_writePage+0xc>
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    170a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <genu_eepromModuleState>
    170e:	93 30       	cpi	r25, 0x03	; 3
    1710:	f9 f4       	brne	.+62     	; 0x1750 <Eeprom_24_writePage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1712:	61 15       	cp	r22, r1
    1714:	71 05       	cpc	r23, r1
    1716:	f1 f0       	breq	.+60     	; 0x1754 <Eeprom_24_writePage+0x5a>
    1718:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
    171a:	90 e1       	ldi	r25, 0x10	; 16
    171c:	89 9f       	mul	r24, r25
    171e:	a0 01       	movw	r20, r0
    1720:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    1722:	19 82       	std	Y+1, r1	; 0x01
#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
    1724:	1a 82       	std	Y+2, r1	; 0x02
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    1726:	be 01       	movw	r22, r28
    1728:	6e 5f       	subi	r22, 0xFE	; 254
    172a:	7f 4f       	sbci	r23, 0xFF	; 255
    172c:	ce 01       	movw	r24, r28
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <EEPROM_getAddresses>
    1734:	18 2f       	mov	r17, r24
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	79 f4       	brne	.+30     	; 0x1758 <Eeprom_24_writePage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    173a:	20 e1       	ldi	r18, 0x10	; 16
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	a7 01       	movw	r20, r14
    1740:	6a 81       	ldd	r22, Y+2	; 0x02
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <I2C_MasterSendToLocation>
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	39 f0       	breq	.+14     	; 0x175a <Eeprom_24_writePage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    174c:	10 e0       	ldi	r17, 0x00	; 0
    174e:	05 c0       	rjmp	.+10     	; 0x175a <Eeprom_24_writePage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1750:	12 e0       	ldi	r17, 0x02	; 2
    1752:	03 c0       	rjmp	.+6      	; 0x175a <Eeprom_24_writePage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1754:	14 e0       	ldi	r17, 0x04	; 4
    1756:	01 c0       	rjmp	.+2      	; 0x175a <Eeprom_24_writePage+0x60>
	uint8_t u8_slaveAddr=0;
#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1758:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterSendGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    175a:	81 2f       	mov	r24, r17
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	ff 90       	pop	r15
    1768:	ef 90       	pop	r14
    176a:	08 95       	ret

0000176c <Eeprom_24_readPage>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory page.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read data inside a specific page in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPage(uint8_t u8_page, uint8_t *pu8_data)
{
    176c:	ef 92       	push	r14
    176e:	ff 92       	push	r15
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	00 d0       	rcall	.+0      	; 0x1778 <Eeprom_24_readPage+0xc>
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    177c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <genu_eepromModuleState>
    1780:	93 30       	cpi	r25, 0x03	; 3
    1782:	f9 f4       	brne	.+62     	; 0x17c2 <Eeprom_24_readPage+0x56>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1784:	61 15       	cp	r22, r1
    1786:	71 05       	cpc	r23, r1
    1788:	f1 f0       	breq	.+60     	; 0x17c6 <Eeprom_24_readPage+0x5a>
    178a:	7b 01       	movw	r14, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u8_startAddr = ((uint16_t)u8_page)<<EEPROM_24_PAGE_SHIFT_BITS;
    178c:	90 e1       	ldi	r25, 0x10	; 16
    178e:	89 9f       	mul	r24, r25
    1790:	a0 01       	movw	r20, r0
    1792:	11 24       	eor	r1, r1
	uint8_t u8_slaveAddr=0;
    1794:	19 82       	std	Y+1, r1	; 0x01

#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
    1796:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
    1798:	be 01       	movw	r22, r28
    179a:	6e 5f       	subi	r22, 0xFE	; 254
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	ce 01       	movw	r24, r28
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <EEPROM_getAddresses>
    17a6:	18 2f       	mov	r17, r24
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	79 f4       	brne	.+30     	; 0x17ca <Eeprom_24_readPage+0x5e>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
    17ac:	20 e1       	ldi	r18, 0x10	; 16
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	a7 01       	movw	r20, r14
    17b2:	6a 81       	ldd	r22, Y+2	; 0x02
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	0e 94 20 19 	call	0x3240	; 0x3240 <I2C_MasterReceiveFromLocation>
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	39 f0       	breq	.+14     	; 0x17cc <Eeprom_24_readPage+0x60>
		return EEPROM_24_STATUS_ERROR_NOK;
    17be:	10 e0       	ldi	r17, 0x00	; 0
    17c0:	05 c0       	rjmp	.+10     	; 0x17cc <Eeprom_24_readPage+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    17c2:	12 e0       	ldi	r17, 0x02	; 2
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <Eeprom_24_readPage+0x60>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    17c6:	14 e0       	ldi	r17, 0x04	; 4
    17c8:	01 c0       	rjmp	.+2      	; 0x17cc <Eeprom_24_readPage+0x60>
	uint8_t u8_slaveAddr=0;

#if EEPROM_24_MODEL == AT24C16B	
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u8_startAddr) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    17ca:	10 e0       	ldi	r17, 0x00	; 0
	
	if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data, EEPROM_24_PAGE_BYTES) != I2C_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    17cc:	81 2f       	mov	r24, r17
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	1f 91       	pop	r17
    17d8:	ff 90       	pop	r15
    17da:	ef 90       	pop	r14
    17dc:	08 95       	ret

000017de <Eeprom_24_writePacket>:
* Parameters (out): None
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Write Multiple data bytes to a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_writePacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    17de:	6f 92       	push	r6
    17e0:	7f 92       	push	r7
    17e2:	8f 92       	push	r8
    17e4:	9f 92       	push	r9
    17e6:	af 92       	push	r10
    17e8:	bf 92       	push	r11
    17ea:	cf 92       	push	r12
    17ec:	df 92       	push	r13
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <Eeprom_24_writePacket+0x1e>
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	5c 01       	movw	r10, r24
    1802:	6b 01       	movw	r12, r22
    1804:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    1806:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <genu_eepromModuleState>
    180a:	83 30       	cpi	r24, 0x03	; 3
    180c:	09 f0       	breq	.+2      	; 0x1810 <Eeprom_24_writePacket+0x32>
    180e:	a1 c0       	rjmp	.+322    	; 0x1952 <Eeprom_24_writePacket+0x174>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    1810:	67 2b       	or	r22, r23
    1812:	09 f4       	brne	.+2      	; 0x1816 <Eeprom_24_writePacket+0x38>
    1814:	a0 c0       	rjmp	.+320    	; 0x1956 <Eeprom_24_writePacket+0x178>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    1816:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
    1818:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    181a:	a5 01       	movw	r20, r10
    181c:	be 01       	movw	r22, r28
    181e:	6e 5f       	subi	r22, 0xFE	; 254
    1820:	7f 4f       	sbci	r23, 0xFF	; 255
    1822:	ce 01       	movw	r24, r28
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <EEPROM_getAddresses>
    182a:	18 2f       	mov	r17, r24
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	09 f0       	breq	.+2      	; 0x1832 <Eeprom_24_writePacket+0x54>
    1830:	94 c0       	rjmp	.+296    	; 0x195a <Eeprom_24_writePacket+0x17c>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;
    1832:	45 01       	movw	r8, r10
    1834:	80 ef       	ldi	r24, 0xF0	; 240
    1836:	88 22       	and	r8, r24
    1838:	87 e0       	ldi	r24, 0x07	; 7
    183a:	98 22       	and	r9, r24
    183c:	96 94       	lsr	r9
    183e:	87 94       	ror	r8
    1840:	96 94       	lsr	r9
    1842:	87 94       	ror	r8
    1844:	96 94       	lsr	r9
    1846:	87 94       	ror	r8
    1848:	96 94       	lsr	r9
    184a:	87 94       	ror	r8
    184c:	68 2c       	mov	r6, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
    184e:	8a 2d       	mov	r24, r10
    1850:	8f 70       	andi	r24, 0x0F	; 15
	if(u8_byteOffset != 0)
    1852:	51 f1       	breq	.+84     	; 0x18a8 <Eeprom_24_writePacket+0xca>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    1854:	90 e1       	ldi	r25, 0x10	; 16
    1856:	a9 2e       	mov	r10, r25
    1858:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    185a:	b1 2c       	mov	r11, r1
    185c:	ea 14       	cp	r14, r10
    185e:	fb 04       	cpc	r15, r11
    1860:	58 f4       	brcc	.+22     	; 0x1878 <Eeprom_24_writePacket+0x9a>
		{
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1862:	97 01       	movw	r18, r14
    1864:	a6 01       	movw	r20, r12
    1866:	6a 81       	ldd	r22, Y+2	; 0x02
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <I2C_MasterSendToLocation>
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	09 f4       	brne	.+2      	; 0x1874 <Eeprom_24_writePacket+0x96>
    1872:	7c c0       	rjmp	.+248    	; 0x196c <Eeprom_24_writePacket+0x18e>
				return EEPROM_24_STATUS_ERROR_NOK;
    1874:	10 e0       	ldi	r17, 0x00	; 0
    1876:	7a c0       	rjmp	.+244    	; 0x196c <Eeprom_24_writePacket+0x18e>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    1878:	95 01       	movw	r18, r10
    187a:	a6 01       	movw	r20, r12
    187c:	6a 81       	ldd	r22, Y+2	; 0x02
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <I2C_MasterSendToLocation>
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	09 f0       	breq	.+2      	; 0x188a <Eeprom_24_writePacket+0xac>
    1888:	6a c0       	rjmp	.+212    	; 0x195e <Eeprom_24_writePacket+0x180>
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    188a:	ea 18       	sub	r14, r10
    188c:	fb 08       	sbc	r15, r11
		i=1;
		Delay_ms(15);
    188e:	2f e0       	ldi	r18, 0x0F	; 15
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
		u8_dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
    18a2:	77 24       	eor	r7, r7
    18a4:	73 94       	inc	r7
    18a6:	03 c0       	rjmp	.+6      	; 0x18ae <Eeprom_24_writePacket+0xd0>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
    18a8:	71 2c       	mov	r7, r1

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u8_dataIndex=0;
    18aa:	a1 2c       	mov	r10, r1
    18ac:	b1 2c       	mov	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
    18ae:	c7 01       	movw	r24, r14
    18b0:	92 95       	swap	r25
    18b2:	82 95       	swap	r24
    18b4:	8f 70       	andi	r24, 0x0F	; 15
    18b6:	89 27       	eor	r24, r25
    18b8:	9f 70       	andi	r25, 0x0F	; 15
    18ba:	89 27       	eor	r24, r25
    18bc:	08 2f       	mov	r16, r24
	while (pages_num > 0)
    18be:	1c c0       	rjmp	.+56     	; 0x18f8 <Eeprom_24_writePacket+0x11a>
	{
		pages_num--;
    18c0:	01 50       	subi	r16, 0x01	; 1
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    18c2:	b6 01       	movw	r22, r12
    18c4:	6a 0d       	add	r22, r10
    18c6:	7b 1d       	adc	r23, r11
    18c8:	87 2d       	mov	r24, r7
    18ca:	86 0d       	add	r24, r6
    18cc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <Eeprom_24_writePage>
    18d0:	81 30       	cpi	r24, 0x01	; 1
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <Eeprom_24_writePacket+0xf8>
    18d4:	46 c0       	rjmp	.+140    	; 0x1962 <Eeprom_24_writePacket+0x184>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    18d6:	73 94       	inc	r7
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
    18d8:	80 e1       	ldi	r24, 0x10	; 16
    18da:	e8 1a       	sub	r14, r24
    18dc:	f1 08       	sbc	r15, r1
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
    18de:	80 e1       	ldi	r24, 0x10	; 16
    18e0:	a8 0e       	add	r10, r24
    18e2:	b1 1c       	adc	r11, r1
		Delay_ms(15);
    18e4:	2f e0       	ldi	r18, 0x0F	; 15
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	70 e0       	ldi	r23, 0x00	; 0
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
		i=1;
		Delay_ms(15);
	}
	
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
    18f8:	10 16       	cp	r1, r16
    18fa:	14 f3       	brlt	.-60     	; 0x18c0 <Eeprom_24_writePacket+0xe2>
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u8_dataIndex += EEPROM_24_PAGE_BYTES;
		Delay_ms(15);
	}
	
	if (u16_dataLen > 0)
    18fc:	e1 14       	cp	r14, r1
    18fe:	f1 04       	cpc	r15, r1
    1900:	a9 f1       	breq	.+106    	; 0x196c <Eeprom_24_writePacket+0x18e>
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
    1902:	a4 01       	movw	r20, r8
    1904:	47 0d       	add	r20, r7
    1906:	51 1d       	adc	r21, r1
    1908:	42 95       	swap	r20
    190a:	52 95       	swap	r21
    190c:	50 7f       	andi	r21, 0xF0	; 240
    190e:	54 27       	eor	r21, r20
    1910:	40 7f       	andi	r20, 0xF0	; 240
    1912:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
    1914:	be 01       	movw	r22, r28
    1916:	6e 5f       	subi	r22, 0xFE	; 254
    1918:	7f 4f       	sbci	r23, 0xFF	; 255
    191a:	ce 01       	movw	r24, r28
    191c:	01 96       	adiw	r24, 0x01	; 1
    191e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <EEPROM_getAddresses>
    1922:	18 2f       	mov	r17, r24
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	f9 f4       	brne	.+62     	; 0x1966 <Eeprom_24_writePacket+0x188>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1928:	a6 01       	movw	r20, r12
    192a:	4a 0d       	add	r20, r10
    192c:	5b 1d       	adc	r21, r11
    192e:	97 01       	movw	r18, r14
    1930:	6a 81       	ldd	r22, Y+2	; 0x02
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <I2C_MasterSendToLocation>
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	b9 f4       	brne	.+46     	; 0x196a <Eeprom_24_writePacket+0x18c>
			return EEPROM_24_STATUS_ERROR_NOK;
		Delay_ms(15);
    193c:	2f e0       	ldi	r18, 0x0F	; 15
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
    1950:	0d c0       	rjmp	.+26     	; 0x196c <Eeprom_24_writePacket+0x18e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1952:	12 e0       	ldi	r17, 0x02	; 2
    1954:	0b c0       	rjmp	.+22     	; 0x196c <Eeprom_24_writePacket+0x18e>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1956:	14 e0       	ldi	r17, 0x04	; 4
    1958:	09 c0       	rjmp	.+18     	; 0x196c <Eeprom_24_writePacket+0x18e>
	uint16_t u8_dataIndex=0;
	uint8_t i=0;
#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    195a:	10 e0       	ldi	r17, 0x00	; 0
    195c:	07 c0       	rjmp	.+14     	; 0x196c <Eeprom_24_writePacket+0x18e>
			if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    195e:	10 e0       	ldi	r17, 0x00	; 0
    1960:	05 c0       	rjmp	.+10     	; 0x196c <Eeprom_24_writePacket+0x18e>
	sint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;
	while (pages_num > 0)
	{
		pages_num--;
		if(Eeprom_24_writePage(u8_pageStart+i, pu8_data+u8_dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1962:	10 e0       	ldi	r17, 0x00	; 0
    1964:	03 c0       	rjmp	.+6      	; 0x196c <Eeprom_24_writePacket+0x18e>
	
	if (u16_dataLen > 0)
	{
		uint16_t u16_newLocation = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_newLocation) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1966:	10 e0       	ldi	r17, 0x00	; 0
    1968:	01 c0       	rjmp	.+2      	; 0x196c <Eeprom_24_writePacket+0x18e>
		if(I2C_MasterSendToLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u8_dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    196a:	10 e0       	ldi	r17, 0x00	; 0
		Delay_ms(15);
	}

#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    196c:	81 2f       	mov	r24, r17
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	ff 90       	pop	r15
    197c:	ef 90       	pop	r14
    197e:	df 90       	pop	r13
    1980:	cf 90       	pop	r12
    1982:	bf 90       	pop	r11
    1984:	af 90       	pop	r10
    1986:	9f 90       	pop	r9
    1988:	8f 90       	pop	r8
    198a:	7f 90       	pop	r7
    198c:	6f 90       	pop	r6
    198e:	08 95       	ret

00001990 <Eeprom_24_readPacket>:
* Parameters (out): pu8_data - Pointer to variable to hold Data read from memory location.
* Return value: enuEeprom_24_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read Multiple data bytes from a specific location in memory.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuEeprom_24_Status_t  Eeprom_24_readPacket(uint16_t u16_location, uint8_t *pu8_data, uint16_t u16_dataLen)
{
    1990:	6f 92       	push	r6
    1992:	7f 92       	push	r7
    1994:	8f 92       	push	r8
    1996:	9f 92       	push	r9
    1998:	af 92       	push	r10
    199a:	bf 92       	push	r11
    199c:	cf 92       	push	r12
    199e:	df 92       	push	r13
    19a0:	ef 92       	push	r14
    19a2:	ff 92       	push	r15
    19a4:	0f 93       	push	r16
    19a6:	1f 93       	push	r17
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <Eeprom_24_readPacket+0x1e>
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	5c 01       	movw	r10, r24
    19b4:	6b 01       	movw	r12, r22
    19b6:	7a 01       	movw	r14, r20
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
    19b8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <genu_eepromModuleState>
    19bc:	83 30       	cpi	r24, 0x03	; 3
    19be:	09 f0       	breq	.+2      	; 0x19c2 <Eeprom_24_readPacket+0x32>
    19c0:	84 c0       	rjmp	.+264    	; 0x1aca <Eeprom_24_readPacket+0x13a>
	{
		return EEPROM_24_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    19c2:	67 2b       	or	r22, r23
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <Eeprom_24_readPacket+0x38>
    19c6:	83 c0       	rjmp	.+262    	; 0x1ace <Eeprom_24_readPacket+0x13e>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
    19c8:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u16dataIndex=0;
	uint8_t i=0;

#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;	
    19ca:	1a 82       	std	Y+2, r1	; 0x02
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
    19cc:	a5 01       	movw	r20, r10
    19ce:	be 01       	movw	r22, r28
    19d0:	6e 5f       	subi	r22, 0xFE	; 254
    19d2:	7f 4f       	sbci	r23, 0xFF	; 255
    19d4:	ce 01       	movw	r24, r28
    19d6:	01 96       	adiw	r24, 0x01	; 1
    19d8:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <EEPROM_getAddresses>
    19dc:	18 2f       	mov	r17, r24
    19de:	81 30       	cpi	r24, 0x01	; 1
    19e0:	09 f0       	breq	.+2      	; 0x19e4 <Eeprom_24_readPacket+0x54>
    19e2:	77 c0       	rjmp	.+238    	; 0x1ad2 <Eeprom_24_readPacket+0x142>
		return EEPROM_24_STATUS_ERROR_NOK;
	
	
	uint8_t u8_pageStart = (u16_location & EEPROM_24_PAGE_MASK)>>EEPROM_24_PAGE_SHIFT_BITS;		//The first page to write in
    19e4:	45 01       	movw	r8, r10
    19e6:	80 ef       	ldi	r24, 0xF0	; 240
    19e8:	88 22       	and	r8, r24
    19ea:	87 e0       	ldi	r24, 0x07	; 7
    19ec:	98 22       	and	r9, r24
    19ee:	96 94       	lsr	r9
    19f0:	87 94       	ror	r8
    19f2:	96 94       	lsr	r9
    19f4:	87 94       	ror	r8
    19f6:	96 94       	lsr	r9
    19f8:	87 94       	ror	r8
    19fa:	96 94       	lsr	r9
    19fc:	87 94       	ror	r8
    19fe:	78 2c       	mov	r7, r8
	uint8_t u8_byteOffset = u16_location & EEPROM_24_BYTE_MASK;
    1a00:	8a 2d       	mov	r24, r10
    1a02:	8f 70       	andi	r24, 0x0F	; 15
	
	if(u8_byteOffset != 0)
    1a04:	f9 f0       	breq	.+62     	; 0x1a44 <Eeprom_24_readPacket+0xb4>
	{
		uint8_t length = EEPROM_24_PAGE_BYTES - u8_byteOffset;
    1a06:	90 e1       	ldi	r25, 0x10	; 16
    1a08:	a9 2e       	mov	r10, r25
    1a0a:	a8 1a       	sub	r10, r24
		if (u16_dataLen < length)
    1a0c:	b1 2c       	mov	r11, r1
    1a0e:	ea 14       	cp	r14, r10
    1a10:	fb 04       	cpc	r15, r11
    1a12:	58 f4       	brcc	.+22     	; 0x1a2a <Eeprom_24_readPacket+0x9a>
		{
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1a14:	97 01       	movw	r18, r14
    1a16:	a6 01       	movw	r20, r12
    1a18:	6a 81       	ldd	r22, Y+2	; 0x02
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	0e 94 20 19 	call	0x3240	; 0x3240 <I2C_MasterReceiveFromLocation>
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <Eeprom_24_readPacket+0x96>
    1a24:	5d c0       	rjmp	.+186    	; 0x1ae0 <Eeprom_24_readPacket+0x150>
				return EEPROM_24_STATUS_ERROR_NOK;
    1a26:	10 e0       	ldi	r17, 0x00	; 0
    1a28:	5b c0       	rjmp	.+182    	; 0x1ae0 <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
    1a2a:	95 01       	movw	r18, r10
    1a2c:	a6 01       	movw	r20, r12
    1a2e:	6a 81       	ldd	r22, Y+2	; 0x02
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	0e 94 20 19 	call	0x3240	; 0x3240 <I2C_MasterReceiveFromLocation>
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	09 f0       	breq	.+2      	; 0x1a3c <Eeprom_24_readPacket+0xac>
    1a3a:	4d c0       	rjmp	.+154    	; 0x1ad6 <Eeprom_24_readPacket+0x146>
			return EEPROM_24_STATUS_ERROR_NOK;
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
    1a3c:	ea 18       	sub	r14, r10
    1a3e:	fb 08       	sbc	r15, r11
		i=1;
    1a40:	01 e0       	ldi	r16, 0x01	; 1
    1a42:	03 c0       	rjmp	.+6      	; 0x1a4a <Eeprom_24_readPacket+0xba>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
	uint8_t i=0;
    1a44:	00 e0       	ldi	r16, 0x00	; 0

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_slaveAddr=0;
	uint16_t u16dataIndex=0;
    1a46:	a1 2c       	mov	r10, r1
    1a48:	b1 2c       	mov	r11, r1
		u16dataIndex = length;
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
    1a4a:	c7 01       	movw	r24, r14
    1a4c:	92 95       	swap	r25
    1a4e:	82 95       	swap	r24
    1a50:	8f 70       	andi	r24, 0x0F	; 15
    1a52:	89 27       	eor	r24, r25
    1a54:	9f 70       	andi	r25, 0x0F	; 15
    1a56:	89 27       	eor	r24, r25
	while (pages_num--)
    1a58:	11 c0       	rjmp	.+34     	; 0x1a7c <Eeprom_24_readPacket+0xec>
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
    1a5a:	b6 01       	movw	r22, r12
    1a5c:	6a 0d       	add	r22, r10
    1a5e:	7b 1d       	adc	r23, r11
    1a60:	80 2f       	mov	r24, r16
    1a62:	87 0d       	add	r24, r7
    1a64:	0e 94 b6 0b 	call	0x176c	; 0x176c <Eeprom_24_readPage>
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	b9 f5       	brne	.+110    	; 0x1ada <Eeprom_24_readPacket+0x14a>
			return EEPROM_24_STATUS_ERROR_NOK;
		i++;
    1a6c:	0f 5f       	subi	r16, 0xFF	; 255
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
    1a6e:	80 e1       	ldi	r24, 0x10	; 16
    1a70:	e8 1a       	sub	r14, r24
    1a72:	f1 08       	sbc	r15, r1
		u16dataIndex += EEPROM_24_PAGE_BYTES;
    1a74:	80 e1       	ldi	r24, 0x10	; 16
    1a76:	a8 0e       	add	r10, r24
    1a78:	b1 1c       	adc	r11, r1
		u16_dataLen = u16_dataLen - length;
		i=1;
	}
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
    1a7a:	86 2d       	mov	r24, r6
    1a7c:	66 24       	eor	r6, r6
    1a7e:	6a 94       	dec	r6
    1a80:	68 0e       	add	r6, r24
    1a82:	81 11       	cpse	r24, r1
    1a84:	ea cf       	rjmp	.-44     	; 0x1a5a <Eeprom_24_readPacket+0xca>
		i++;
		u16_dataLen -= EEPROM_24_PAGE_BYTES;
		u16dataIndex += EEPROM_24_PAGE_BYTES;
	}

	if (u16_dataLen > 0)
    1a86:	e1 14       	cp	r14, r1
    1a88:	f1 04       	cpc	r15, r1
    1a8a:	51 f1       	breq	.+84     	; 0x1ae0 <Eeprom_24_readPacket+0x150>
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
    1a8c:	a4 01       	movw	r20, r8
    1a8e:	40 0f       	add	r20, r16
    1a90:	51 1d       	adc	r21, r1
    1a92:	42 95       	swap	r20
    1a94:	52 95       	swap	r21
    1a96:	50 7f       	andi	r21, 0xF0	; 240
    1a98:	54 27       	eor	r21, r20
    1a9a:	40 7f       	andi	r20, 0xF0	; 240
    1a9c:	54 27       	eor	r21, r20
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
    1a9e:	be 01       	movw	r22, r28
    1aa0:	6e 5f       	subi	r22, 0xFE	; 254
    1aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <EEPROM_getAddresses>
    1aac:	18 2f       	mov	r17, r24
    1aae:	81 30       	cpi	r24, 0x01	; 1
    1ab0:	b1 f4       	brne	.+44     	; 0x1ade <Eeprom_24_readPacket+0x14e>
			return EEPROM_24_STATUS_ERROR_NOK;
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
    1ab2:	a6 01       	movw	r20, r12
    1ab4:	4a 0d       	add	r20, r10
    1ab6:	5b 1d       	adc	r21, r11
    1ab8:	97 01       	movw	r18, r14
    1aba:	6a 81       	ldd	r22, Y+2	; 0x02
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	0e 94 20 19 	call	0x3240	; 0x3240 <I2C_MasterReceiveFromLocation>
    1ac2:	81 30       	cpi	r24, 0x01	; 1
    1ac4:	69 f0       	breq	.+26     	; 0x1ae0 <Eeprom_24_readPacket+0x150>
			return EEPROM_24_STATUS_ERROR_NOK;
    1ac6:	10 e0       	ldi	r17, 0x00	; 0
    1ac8:	0b c0       	rjmp	.+22     	; 0x1ae0 <Eeprom_24_readPacket+0x150>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the EEPROM module is not initialized */
	if (EEPROM_24_STATUS_INIT != genu_eepromModuleState)
	{
		return EEPROM_24_STATUS_NOT_INIT;
    1aca:	12 e0       	ldi	r17, 0x02	; 2
    1acc:	09 c0       	rjmp	.+18     	; 0x1ae0 <Eeprom_24_readPacket+0x150>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return EEPROM_24_STATUS_ERROR_NULL;
    1ace:	14 e0       	ldi	r17, 0x04	; 4
    1ad0:	07 c0       	rjmp	.+14     	; 0x1ae0 <Eeprom_24_readPacket+0x150>
	uint8_t i=0;

#if EEPROM_24_MODEL == AT24C16B
	uint8_t u8_wordAddr=0;	
	if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, u16_location) != EEPROM_24_STATUS_ERROR_OK)
		return EEPROM_24_STATUS_ERROR_NOK;
    1ad2:	10 e0       	ldi	r17, 0x00	; 0
    1ad4:	05 c0       	rjmp	.+10     	; 0x1ae0 <Eeprom_24_readPacket+0x150>
			if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, u16_dataLen) != I2C_STATUS_ERROR_OK)
				return EEPROM_24_STATUS_ERROR_NOK;
			return EEPROM_24_STATUS_ERROR_OK;
		}
		if(I2C_MasterReceiveFromLocation(u8_slaveAddr, u8_wordAddr, pu8_data, length) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1ad6:	10 e0       	ldi	r17, 0x00	; 0
    1ad8:	03 c0       	rjmp	.+6      	; 0x1ae0 <Eeprom_24_readPacket+0x150>
	
	uint8_t pages_num = u16_dataLen/EEPROM_24_PAGE_BYTES;				//Number of pages needed
	while (pages_num--)
	{
		if(Eeprom_24_readPage(u8_pageStart+i, pu8_data+u16dataIndex) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1ada:	10 e0       	ldi	r17, 0x00	; 0
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <Eeprom_24_readPacket+0x150>

	if (u16_dataLen > 0)
	{
		uint16_t new_location = (u8_pageStart + i) << EEPROM_24_PAGE_SHIFT_BITS;
		if(EEPROM_getAddresses(&u8_slaveAddr, &u8_wordAddr, new_location) != EEPROM_24_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
    1ade:	10 e0       	ldi	r17, 0x00	; 0
		if(I2C_MasterReceiveGeneral(u8_slaveAddr, u8_wordAddr, EEPROM_24_LOC_SIZE, pu8_data+u16dataIndex, u16_dataLen) != I2C_STATUS_ERROR_OK)
			return EEPROM_24_STATUS_ERROR_NOK;
	}
#endif
	return EEPROM_24_STATUS_ERROR_OK;
}
    1ae0:	81 2f       	mov	r24, r17
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	ff 90       	pop	r15
    1af0:	ef 90       	pop	r14
    1af2:	df 90       	pop	r13
    1af4:	cf 90       	pop	r12
    1af6:	bf 90       	pop	r11
    1af8:	af 90       	pop	r10
    1afa:	9f 90       	pop	r9
    1afc:	8f 90       	pop	r8
    1afe:	7f 90       	pop	r7
    1b00:	6f 90       	pop	r6
    1b02:	08 95       	ret

00001b04 <Keypad_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is already initialized */
	if (genu_KeypadModuleState == KEYPAD_STATUS_INIT)
    1b04:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <genu_KeypadModuleState>
    1b08:	85 30       	cpi	r24, 0x05	; 5
    1b0a:	71 f0       	breq	.+28     	; 0x1b28 <Keypad_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    1b0c:	82 e9       	ldi	r24, 0x92	; 146
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	0e 94 8b 12 	call	0x2516	; 0x2516 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    1b14:	81 30       	cpi	r24, 0x01	; 1
    1b16:	11 f0       	breq	.+4      	; 0x1b1c <Keypad_init+0x18>
    1b18:	87 30       	cpi	r24, 0x07	; 7
    1b1a:	29 f4       	brne	.+10     	; 0x1b26 <Keypad_init+0x22>
		return KEYPAD_STATUS_ERROR_NOK;
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
    1b1c:	85 e0       	ldi	r24, 0x05	; 5
    1b1e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <genu_KeypadModuleState>
	return KEYPAD_STATUS_ERROR_OK;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return KEYPAD_STATUS_ERROR_NOK;
    1b26:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
	return KEYPAD_STATUS_ERROR_OK;
}
    1b28:	08 95       	ret

00001b2a <Keypad_readKey>:
* Parameters (out): pu8_pressedKey - Pointer to a Char to hold the pressed key.
* Return value: enuKeypad_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current pressed Key.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuKeypad_Status_t Keypad_readKey(uint8_t * pu8_pressedKey)
{
    1b2a:	af 92       	push	r10
    1b2c:	bf 92       	push	r11
    1b2e:	cf 92       	push	r12
    1b30:	df 92       	push	r13
    1b32:	ef 92       	push	r14
    1b34:	ff 92       	push	r15
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	1f 92       	push	r1
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	6c 01       	movw	r12, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
    1b46:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <genu_KeypadModuleState>
    1b4a:	95 30       	cpi	r25, 0x05	; 5
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <Keypad_readKey+0x26>
    1b4e:	50 c0       	rjmp	.+160    	; 0x1bf0 <Keypad_readKey+0xc6>
	{
		return KEYPAD_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
    1b50:	c1 14       	cp	r12, r1
    1b52:	d1 04       	cpc	r13, r1
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <Keypad_readKey+0x2e>
    1b56:	4e c0       	rjmp	.+156    	; 0x1bf4 <Keypad_readKey+0xca>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	89 83       	std	Y+1, r24	; 0x01
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    1b5c:	00 e0       	ldi	r16, 0x00	; 0
    1b5e:	43 c0       	rjmp	.+134    	; 0x1be6 <Keypad_readKey+0xbc>
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
    1b60:	a0 2e       	mov	r10, r16
    1b62:	b1 2c       	mov	r11, r1
    1b64:	f5 01       	movw	r30, r10
    1b66:	e9 57       	subi	r30, 0x79	; 121
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1b72:	81 30       	cpi	r24, 0x01	; 1
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <Keypad_readKey+0x4e>
    1b76:	40 c0       	rjmp	.+128    	; 0x1bf8 <Keypad_readKey+0xce>
    1b78:	10 e0       	ldi	r17, 0x00	; 0
    1b7a:	29 c0       	rjmp	.+82     	; 0x1bce <Keypad_readKey+0xa4>
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
    1b7c:	e1 2e       	mov	r14, r17
    1b7e:	f1 2c       	mov	r15, r1
    1b80:	f7 01       	movw	r30, r14
    1b82:	ed 57       	subi	r30, 0x7D	; 125
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	be 01       	movw	r22, r28
    1b88:	6f 5f       	subi	r22, 0xFF	; 255
    1b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8c:	80 81       	ld	r24, Z
    1b8e:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <Dio_readPin>
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	99 f5       	brne	.+102    	; 0x1bfc <Keypad_readKey+0xd2>
				return KEYPAD_STATUS_ERROR_NOK;
			if(u8_pinValue == PIN_LOW)
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	81 11       	cpse	r24, r1
    1b9a:	18 c0       	rjmp	.+48     	; 0x1bcc <Keypad_readKey+0xa2>
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    1b9c:	61 e0       	ldi	r22, 0x01	; 1
    1b9e:	f5 01       	movw	r30, r10
    1ba0:	e9 57       	subi	r30, 0x79	; 121
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	80 81       	ld	r24, Z
    1ba6:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1baa:	81 30       	cpi	r24, 0x01	; 1
    1bac:	49 f5       	brne	.+82     	; 0x1c00 <Keypad_readKey+0xd6>
					return KEYPAD_STATUS_ERROR_NOK;
				*pu8_pressedKey = gau8_ButtonSymbols[u8_RowIndex][u8_ColumnIndex];
    1bae:	97 01       	movw	r18, r14
    1bb0:	22 0f       	add	r18, r18
    1bb2:	33 1f       	adc	r19, r19
    1bb4:	22 0f       	add	r18, r18
    1bb6:	33 1f       	adc	r19, r19
    1bb8:	2d 58       	subi	r18, 0x8D	; 141
    1bba:	3f 4f       	sbci	r19, 0xFF	; 255
    1bbc:	f9 01       	movw	r30, r18
    1bbe:	ea 0d       	add	r30, r10
    1bc0:	fb 1d       	adc	r31, r11
    1bc2:	80 81       	ld	r24, Z
    1bc4:	f6 01       	movw	r30, r12
    1bc6:	80 83       	st	Z, r24
				return KEYPAD_STATUS_PRESSED;
    1bc8:	86 e0       	ldi	r24, 0x06	; 6
    1bca:	1d c0       	rjmp	.+58     	; 0x1c06 <Keypad_readKey+0xdc>
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
    1bcc:	1f 5f       	subi	r17, 0xFF	; 255
    1bce:	14 30       	cpi	r17, 0x04	; 4
    1bd0:	a8 f2       	brcs	.-86     	; 0x1b7c <Keypad_readKey+0x52>
				return KEYPAD_STATUS_PRESSED;
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
    1bd2:	f5 01       	movw	r30, r10
    1bd4:	e9 57       	subi	r30, 0x79	; 121
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	61 e0       	ldi	r22, 0x01	; 1
    1bda:	80 81       	ld	r24, Z
    1bdc:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	81 f4       	brne	.+32     	; 0x1c04 <Keypad_readKey+0xda>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
    1be4:	0f 5f       	subi	r16, 0xFF	; 255
    1be6:	04 30       	cpi	r16, 0x04	; 4
    1be8:	08 f4       	brcc	.+2      	; 0x1bec <Keypad_readKey+0xc2>
    1bea:	ba cf       	rjmp	.-140    	; 0x1b60 <Keypad_readKey+0x36>
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    1bec:	87 e0       	ldi	r24, 0x07	; 7
    1bee:	0b c0       	rjmp	.+22     	; 0x1c06 <Keypad_readKey+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
	{
		return KEYPAD_STATUS_NOT_INIT;
    1bf0:	84 e0       	ldi	r24, 0x04	; 4
    1bf2:	09 c0       	rjmp	.+18     	; 0x1c06 <Keypad_readKey+0xdc>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
	{
		return KEYPAD_STATUS_ERROR_NULL;
    1bf4:	83 e0       	ldi	r24, 0x03	; 3
    1bf6:	07 c0       	rjmp	.+14     	; 0x1c06 <Keypad_readKey+0xdc>
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	05 c0       	rjmp	.+10     	; 0x1c06 <Keypad_readKey+0xdc>
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
				return KEYPAD_STATUS_ERROR_NOK;
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	03 c0       	rjmp	.+6      	; 0x1c06 <Keypad_readKey+0xdc>
			if(u8_pinValue == PIN_LOW)
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
					return KEYPAD_STATUS_ERROR_NOK;
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	01 c0       	rjmp	.+2      	; 0x1c06 <Keypad_readKey+0xdc>
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
    1c04:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
    1c06:	0f 90       	pop	r0
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	ff 90       	pop	r15
    1c12:	ef 90       	pop	r14
    1c14:	df 90       	pop	r13
    1c16:	cf 90       	pop	r12
    1c18:	bf 90       	pop	r11
    1c1a:	af 90       	pop	r10
    1c1c:	08 95       	ret

00001c1e <Lcd_WriteData>:
{
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, BIN);
	Lcd_printString(au8_snum);
	return LCD_STATUS_ERROR_OK;
}
    1c1e:	cf 93       	push	r28
    1c20:	c8 2f       	mov	r28, r24
    1c22:	80 ff       	sbrs	r24, 0
    1c24:	05 c0       	rjmp	.+10     	; 0x1c30 <Lcd_WriteData+0x12>
    1c26:	61 e0       	ldi	r22, 0x01	; 1
    1c28:	8a e0       	ldi	r24, 0x0A	; 10
    1c2a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <Lcd_WriteData+0x1a>
    1c30:	60 e0       	ldi	r22, 0x00	; 0
    1c32:	8a e0       	ldi	r24, 0x0A	; 10
    1c34:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1c38:	c1 ff       	sbrs	r28, 1
    1c3a:	05 c0       	rjmp	.+10     	; 0x1c46 <Lcd_WriteData+0x28>
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	8b e0       	ldi	r24, 0x0B	; 11
    1c40:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1c44:	04 c0       	rjmp	.+8      	; 0x1c4e <Lcd_WriteData+0x30>
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	8b e0       	ldi	r24, 0x0B	; 11
    1c4a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1c4e:	c2 ff       	sbrs	r28, 2
    1c50:	05 c0       	rjmp	.+10     	; 0x1c5c <Lcd_WriteData+0x3e>
    1c52:	61 e0       	ldi	r22, 0x01	; 1
    1c54:	8c e0       	ldi	r24, 0x0C	; 12
    1c56:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <Lcd_WriteData+0x46>
    1c5c:	60 e0       	ldi	r22, 0x00	; 0
    1c5e:	8c e0       	ldi	r24, 0x0C	; 12
    1c60:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1c64:	c3 ff       	sbrs	r28, 3
    1c66:	05 c0       	rjmp	.+10     	; 0x1c72 <Lcd_WriteData+0x54>
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	8d e0       	ldi	r24, 0x0D	; 13
    1c6c:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1c70:	04 c0       	rjmp	.+8      	; 0x1c7a <Lcd_WriteData+0x5c>
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	8d e0       	ldi	r24, 0x0D	; 13
    1c76:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1c7a:	cf 91       	pop	r28
    1c7c:	08 95       	ret

00001c7e <Lcd_EnableToggle>:
    1c7e:	61 e0       	ldi	r22, 0x01	; 1
    1c80:	89 e0       	ldi	r24, 0x09	; 9
    1c82:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1c86:	21 e0       	ldi	r18, 0x01	; 1
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	70 e0       	ldi	r23, 0x00	; 0
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	89 e0       	ldi	r24, 0x09	; 9
    1c9e:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1ca2:	08 95       	ret

00001ca4 <Lcd_sendCommand>:
    1ca4:	cf 93       	push	r28
    1ca6:	c8 2f       	mov	r28, r24
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	87 e0       	ldi	r24, 0x07	; 7
    1cac:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1cb0:	8c 2f       	mov	r24, r28
    1cb2:	82 95       	swap	r24
    1cb4:	8f 70       	andi	r24, 0x0F	; 15
    1cb6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <Lcd_WriteData>
    1cba:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <Lcd_EnableToggle>
    1cbe:	21 e0       	ldi	r18, 0x01	; 1
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
    1cd2:	8c 2f       	mov	r24, r28
    1cd4:	8f 70       	andi	r24, 0x0F	; 15
    1cd6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <Lcd_WriteData>
    1cda:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <Lcd_EnableToggle>
    1cde:	22 e0       	ldi	r18, 0x02	; 2
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e0       	ldi	r20, 0x00	; 0
    1ce4:	50 e0       	ldi	r21, 0x00	; 0
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	cf 91       	pop	r28
    1cf6:	08 95       	ret

00001cf8 <Lcd_init>:
    1cf8:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <genu_LcdModuleState>
    1cfc:	86 30       	cpi	r24, 0x06	; 6
    1cfe:	91 f1       	breq	.+100    	; 0x1d64 <Lcd_init+0x6c>
    1d00:	82 e9       	ldi	r24, 0x92	; 146
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 8b 12 	call	0x2516	; 0x2516 <Dio_init>
    1d08:	81 30       	cpi	r24, 0x01	; 1
    1d0a:	11 f0       	breq	.+4      	; 0x1d10 <Lcd_init+0x18>
    1d0c:	87 30       	cpi	r24, 0x07	; 7
    1d0e:	49 f5       	brne	.+82     	; 0x1d62 <Lcd_init+0x6a>
    1d10:	24 e1       	ldi	r18, 0x14	; 20
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	60 e0       	ldi	r22, 0x00	; 0
    1d1a:	70 e0       	ldi	r23, 0x00	; 0
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	87 e0       	ldi	r24, 0x07	; 7
    1d28:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	89 e0       	ldi	r24, 0x09	; 9
    1d30:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1d34:	83 e3       	ldi	r24, 0x33	; 51
    1d36:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <Lcd_sendCommand>
    1d3a:	82 e3       	ldi	r24, 0x32	; 50
    1d3c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <Lcd_sendCommand>
    1d40:	88 e2       	ldi	r24, 0x28	; 40
    1d42:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <Lcd_sendCommand>
    1d46:	8c e0       	ldi	r24, 0x0C	; 12
    1d48:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <Lcd_sendCommand>
    1d4c:	86 e0       	ldi	r24, 0x06	; 6
    1d4e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <Lcd_sendCommand>
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <Lcd_sendCommand>
    1d58:	86 e0       	ldi	r24, 0x06	; 6
    1d5a:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <genu_LcdModuleState>
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	08 95       	ret
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	08 95       	ret

00001d66 <Lcd_setCursor>:
    1d66:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <genu_LcdModuleState>
    1d6a:	96 30       	cpi	r25, 0x06	; 6
    1d6c:	89 f4       	brne	.+34     	; 0x1d90 <Lcd_setCursor+0x2a>
    1d6e:	83 30       	cpi	r24, 0x03	; 3
    1d70:	88 f4       	brcc	.+34     	; 0x1d94 <Lcd_setCursor+0x2e>
    1d72:	61 31       	cpi	r22, 0x11	; 17
    1d74:	88 f4       	brcc	.+34     	; 0x1d98 <Lcd_setCursor+0x32>
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	2e 5f       	subi	r18, 0xFE	; 254
    1d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7e:	86 2f       	mov	r24, r22
    1d80:	90 e4       	ldi	r25, 0x40	; 64
    1d82:	29 9f       	mul	r18, r25
    1d84:	80 0d       	add	r24, r0
    1d86:	11 24       	eor	r1, r1
    1d88:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <Lcd_sendCommand>
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	08 95       	ret
    1d90:	85 e0       	ldi	r24, 0x05	; 5
    1d92:	08 95       	ret
    1d94:	83 e0       	ldi	r24, 0x03	; 3
    1d96:	08 95       	ret
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	08 95       	ret

00001d9c <Lcd_printChar>:
    1d9c:	cf 93       	push	r28
    1d9e:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <genu_LcdModuleState>
    1da2:	96 30       	cpi	r25, 0x06	; 6
    1da4:	41 f5       	brne	.+80     	; 0x1df6 <Lcd_printChar+0x5a>
    1da6:	c8 2f       	mov	r28, r24
    1da8:	61 e0       	ldi	r22, 0x01	; 1
    1daa:	87 e0       	ldi	r24, 0x07	; 7
    1dac:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    1db0:	8c 2f       	mov	r24, r28
    1db2:	82 95       	swap	r24
    1db4:	8f 70       	andi	r24, 0x0F	; 15
    1db6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <Lcd_WriteData>
    1dba:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <Lcd_EnableToggle>
    1dbe:	21 e0       	ldi	r18, 0x01	; 1
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
    1dd2:	8c 2f       	mov	r24, r28
    1dd4:	8f 70       	andi	r24, 0x0F	; 15
    1dd6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <Lcd_WriteData>
    1dda:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <Lcd_EnableToggle>
    1dde:	22 e0       	ldi	r18, 0x02	; 2
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e0       	ldi	r20, 0x00	; 0
    1de4:	50 e0       	ldi	r21, 0x00	; 0
    1de6:	60 e0       	ldi	r22, 0x00	; 0
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Delay_ms>
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	01 c0       	rjmp	.+2      	; 0x1df8 <Lcd_printChar+0x5c>
    1df6:	85 e0       	ldi	r24, 0x05	; 5
    1df8:	cf 91       	pop	r28
    1dfa:	08 95       	ret

00001dfc <Lcd_printString>:
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	ec 01       	movw	r28, r24
    1e02:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <genu_LcdModuleState>
    1e06:	86 30       	cpi	r24, 0x06	; 6
    1e08:	49 f4       	brne	.+18     	; 0x1e1c <Lcd_printString+0x20>
    1e0a:	03 c0       	rjmp	.+6      	; 0x1e12 <Lcd_printString+0x16>
    1e0c:	21 96       	adiw	r28, 0x01	; 1
    1e0e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <Lcd_printChar>
    1e12:	88 81       	ld	r24, Y
    1e14:	81 11       	cpse	r24, r1
    1e16:	fa cf       	rjmp	.-12     	; 0x1e0c <Lcd_printString+0x10>
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	01 c0       	rjmp	.+2      	; 0x1e1e <Lcd_printString+0x22>
    1e1c:	85 e0       	ldi	r24, 0x05	; 5
    1e1e:	df 91       	pop	r29
    1e20:	cf 91       	pop	r28
    1e22:	08 95       	ret

00001e24 <Lcd_clear>:
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <Lcd_sendCommand>
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	08 95       	ret

00001e2e <Lcd_printLCD>:
    1e2e:	0f 93       	push	r16
    1e30:	1f 93       	push	r17
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	ec 01       	movw	r28, r24
    1e38:	8b 01       	movw	r16, r22
    1e3a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Lcd_clear>
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Lcd_setCursor>
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	89 f4       	brne	.+34     	; 0x1e6c <Lcd_printLCD+0x3e>
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Lcd_printString>
    1e50:	81 30       	cpi	r24, 0x01	; 1
    1e52:	71 f4       	brne	.+28     	; 0x1e70 <Lcd_printLCD+0x42>
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Lcd_setCursor>
    1e5a:	81 30       	cpi	r24, 0x01	; 1
    1e5c:	59 f4       	brne	.+22     	; 0x1e74 <Lcd_printLCD+0x46>
    1e5e:	c8 01       	movw	r24, r16
    1e60:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Lcd_printString>
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	39 f0       	breq	.+14     	; 0x1e76 <Lcd_printLCD+0x48>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	05 c0       	rjmp	.+10     	; 0x1e76 <Lcd_printLCD+0x48>
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	03 c0       	rjmp	.+6      	; 0x1e76 <Lcd_printLCD+0x48>
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	01 c0       	rjmp	.+2      	; 0x1e76 <Lcd_printLCD+0x48>
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	1f 91       	pop	r17
    1e7c:	0f 91       	pop	r16
    1e7e:	08 95       	ret

00001e80 <Lcd_printDecimal>:
enuLcd_Status_t Lcd_printDecimal(uint16_t u16_num)
{
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	61 97       	sbiw	r28, 0x11	; 17
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_snum[17];
	integerToString(u16_num, au8_snum, DEC);
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	be 01       	movw	r22, r28
    1e98:	6f 5f       	subi	r22, 0xFF	; 255
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	0e 94 15 1a 	call	0x342a	; 0x342a <integerToString>
	Lcd_printString(au8_snum);
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	01 96       	adiw	r24, 0x01	; 1
    1ea4:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Lcd_printString>
	return LCD_STATUS_ERROR_OK;
}
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	61 96       	adiw	r28, 0x11	; 17
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	de bf       	out	0x3e, r29	; 62
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	cd bf       	out	0x3d, r28	; 61
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	08 95       	ret

00001ebc <LM35_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is already initialized */
	if (genu_LM35ModuleState == LM35_STATUS_INIT)
    1ebc:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <genu_LM35ModuleState>
    1ec0:	85 30       	cpi	r24, 0x05	; 5
    1ec2:	51 f0       	breq	.+20     	; 0x1ed8 <LM35_init+0x1c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
    1ec4:	0e 94 2d 11 	call	0x225a	; 0x225a <Adc_init>
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	29 f4       	brne	.+10     	; 0x1ed6 <LM35_init+0x1a>
		return LM35_STATUS_ERROR_NOK;
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
    1ecc:	85 e0       	ldi	r24, 0x05	; 5
    1ece:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <genu_LM35ModuleState>
	return LM35_STATUS_ERROR_OK;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the ADC Module and check if any error returned */
	if(ADC_STATUS_ERROR_OK !=Adc_init())
		return LM35_STATUS_ERROR_NOK;
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the LM35 module to Initialized */
	genu_LM35ModuleState = LM35_STATUS_INIT;
	return LM35_STATUS_ERROR_OK;
}
    1ed8:	08 95       	ret

00001eda <LM35_readTemp>:
* Parameters (out): pu8_Temp - Pointer to a Char to hold the temperature.
* Return value: enuLM35_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current temperature and return in celsius.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLM35_Status_t LM35_readTemp(uint8_t * pu8_Temp)
{
    1eda:	0f 93       	push	r16
    1edc:	1f 93       	push	r17
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <LM35_readTemp+0xa>
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <LM35_readTemp+0xc>
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	9c 01       	movw	r18, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
    1eec:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <genu_LM35ModuleState>
    1ef0:	95 30       	cpi	r25, 0x05	; 5
    1ef2:	f1 f4       	brne	.+60     	; 0x1f30 <LM35_readTemp+0x56>
	{
	return LM35_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
    1ef4:	21 15       	cp	r18, r1
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	e9 f0       	breq	.+58     	; 0x1f34 <LM35_readTemp+0x5a>
    1efa:	89 01       	movw	r16, r18
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
    1efc:	19 82       	std	Y+1, r1	; 0x01
    1efe:	1a 82       	std	Y+2, r1	; 0x02
    1f00:	1b 82       	std	Y+3, r1	; 0x03
    1f02:	1c 82       	std	Y+4, r1	; 0x04
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
    1f04:	be 01       	movw	r22, r28
    1f06:	6f 5f       	subi	r22, 0xFF	; 255
    1f08:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	0e 94 55 11 	call	0x22aa	; 0x22aa <Adc_start>
    1f10:	81 30       	cpi	r24, 0x01	; 1
    1f12:	91 f4       	brne	.+36     	; 0x1f38 <LM35_readTemp+0x5e>
		return LM35_STATUS_ERROR_NOK;
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
    1f14:	69 81       	ldd	r22, Y+1	; 0x01
    1f16:	7a 81       	ldd	r23, Y+2	; 0x02
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	2a e0       	ldi	r18, 0x0A	; 10
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	0e 94 aa 20 	call	0x4154	; 0x4154 <__udivmodsi4>
    1f28:	f8 01       	movw	r30, r16
    1f2a:	20 83       	st	Z, r18
	return LM35_STATUS_ERROR_OK;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	05 c0       	rjmp	.+10     	; 0x1f3a <LM35_readTemp+0x60>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the LM35 module is not initialized */
	if (genu_LM35ModuleState != LM35_STATUS_INIT)
	{
	return LM35_STATUS_NOT_INIT;
    1f30:	84 e0       	ldi	r24, 0x04	; 4
    1f32:	03 c0       	rjmp	.+6      	; 0x1f3a <LM35_readTemp+0x60>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_Temp == NULL_PTR)
	{
		return LM35_STATUS_ERROR_NULL;
    1f34:	83 e0       	ldi	r24, 0x03	; 3
    1f36:	01 c0       	rjmp	.+2      	; 0x1f3a <LM35_readTemp+0x60>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint32_t u32_tempMilliVolt = 0;
	if(Adc_start(LM35_ID_CHANNEL, &u32_tempMilliVolt) != ADC_STATUS_ERROR_OK)
		return LM35_STATUS_ERROR_NOK;
    1f38:	80 e0       	ldi	r24, 0x00	; 0
	*pu8_Temp = u32_tempMilliVolt/LM35_STEP_VALUE;
	return LM35_STATUS_ERROR_OK;
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	1f 91       	pop	r17
    1f48:	0f 91       	pop	r16
    1f4a:	08 95       	ret

00001f4c <Motor_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
    1f4c:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gu8_MotorModuleStatus>
    1f50:	86 30       	cpi	r24, 0x06	; 6
    1f52:	49 f0       	breq	.+18     	; 0x1f66 <Motor_init+0x1a>
/**************************************************************************************/
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
    1f54:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <SWPwm_Init>
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	39 f4       	brne	.+14     	; 0x1f6a <Motor_init+0x1e>
		return MOTOR_STATUS_ERROR_NOK;
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
    1f5c:	86 e0       	ldi	r24, 0x06	; 6
    1f5e:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <gu8_MotorModuleStatus>
	return MOTOR_STATUS_ERROR_OK;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_INIT;
    1f66:	86 e0       	ldi	r24, 0x06	; 6
    1f68:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
		return MOTOR_STATUS_ERROR_NOK;
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
	return MOTOR_STATUS_ERROR_OK;
}
    1f6c:	08 95       	ret

00001f6e <Motor_stop>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the motor.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to stop motor */
enuMotor_Status_t Motor_stop(uint8_t u8_motorID)
{
    1f6e:	df 92       	push	r13
    1f70:	ef 92       	push	r14
    1f72:	ff 92       	push	r15
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    1f7c:	81 11       	cpse	r24, r1
    1f7e:	5d c0       	rjmp	.+186    	; 0x203a <Motor_stop+0xcc>
    1f80:	d8 2e       	mov	r13, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Stop the Motor by driving the pins to LOW */
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    1f82:	08 2f       	mov	r16, r24
    1f84:	10 e0       	ldi	r17, 0x00	; 0
    1f86:	78 01       	movw	r14, r16
    1f88:	ee 0c       	add	r14, r14
    1f8a:	ff 1c       	adc	r15, r15
    1f8c:	ee 0c       	add	r14, r14
    1f8e:	ff 1c       	adc	r15, r15
    1f90:	c7 01       	movw	r24, r14
    1f92:	80 0f       	add	r24, r16
    1f94:	91 1f       	adc	r25, r17
    1f96:	ec 01       	movw	r28, r24
    1f98:	cd 59       	subi	r28, 0x9D	; 157
    1f9a:	da 4f       	sbci	r29, 0xFA	; 250
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    1fa4:	60 e0       	ldi	r22, 0x00	; 0
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1fac:	e0 e0       	ldi	r30, 0x00	; 0
    1fae:	1c c0       	rjmp	.+56     	; 0x1fe8 <Motor_stop+0x7a>
	{
		if(u8_loopIndex == u8_motorID) /* Skip the current motor */
    1fb0:	ed 15       	cp	r30, r13
    1fb2:	c9 f0       	breq	.+50     	; 0x1fe6 <Motor_stop+0x78>
		{
			continue;
		}
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
    1fb4:	d8 01       	movw	r26, r16
    1fb6:	aa 0f       	add	r26, r26
    1fb8:	bb 1f       	adc	r27, r27
    1fba:	aa 0f       	add	r26, r26
    1fbc:	bb 1f       	adc	r27, r27
    1fbe:	a0 0f       	add	r26, r16
    1fc0:	b1 1f       	adc	r27, r17
    1fc2:	ad 59       	subi	r26, 0x9D	; 157
    1fc4:	ba 4f       	sbci	r27, 0xFA	; 250
    1fc6:	2c 91       	ld	r18, X
    1fc8:	8e 2f       	mov	r24, r30
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	dc 01       	movw	r26, r24
    1fce:	aa 0f       	add	r26, r26
    1fd0:	bb 1f       	adc	r27, r27
    1fd2:	aa 0f       	add	r26, r26
    1fd4:	bb 1f       	adc	r27, r27
    1fd6:	8a 0f       	add	r24, r26
    1fd8:	9b 1f       	adc	r25, r27
    1fda:	dc 01       	movw	r26, r24
    1fdc:	ad 59       	subi	r26, 0x9D	; 157
    1fde:	ba 4f       	sbci	r27, 0xFA	; 250
    1fe0:	8c 91       	ld	r24, X
    1fe2:	28 17       	cp	r18, r24
    1fe4:	19 f0       	breq	.+6      	; 0x1fec <Motor_stop+0x7e>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
    1fe6:	ef 5f       	subi	r30, 0xFF	; 255
    1fe8:	ee 23       	and	r30, r30
    1fea:	11 f3       	breq	.-60     	; 0x1fb0 <Motor_stop+0x42>
			break;
		}
	}
	
	
	if(u8_loopIndex == MOTORS_USED_NUM)
    1fec:	e1 30       	cpi	r30, 0x01	; 1
    1fee:	69 f4       	brne	.+26     	; 0x200a <Motor_stop+0x9c>
	{ /* In case that there isn't any motor using the same PWM Channel --> Stop the PWM */
		SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    1ff0:	f8 01       	movw	r30, r16
    1ff2:	ee 0f       	add	r30, r30
    1ff4:	ff 1f       	adc	r31, r31
    1ff6:	ee 0f       	add	r30, r30
    1ff8:	ff 1f       	adc	r31, r31
    1ffa:	e0 0f       	add	r30, r16
    1ffc:	f1 1f       	adc	r31, r17
    1ffe:	ed 59       	subi	r30, 0x9D	; 157
    2000:	fa 4f       	sbci	r31, 0xFA	; 250
    2002:	80 81       	ld	r24, Z
    2004:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <SWPwm_Stop>
    2008:	12 c0       	rjmp	.+36     	; 0x202e <Motor_stop+0xc0>
	}else
	{/* In case that there is another motor using the same PWM Channel */
		if (gau8_MotorsState[u8_loopIndex] == MOTOR_STOPPED) /* Check if the other motor is not running */
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	e6 54       	subi	r30, 0x46	; 70
    200e:	fa 4f       	sbci	r31, 0xFA	; 250
    2010:	80 81       	ld	r24, Z
    2012:	81 11       	cpse	r24, r1
    2014:	0c c0       	rjmp	.+24     	; 0x202e <Motor_stop+0xc0>
		{/* In case that the other motor is not running --> Stop the PWM */
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
    2016:	f8 01       	movw	r30, r16
    2018:	ee 0f       	add	r30, r30
    201a:	ff 1f       	adc	r31, r31
    201c:	ee 0f       	add	r30, r30
    201e:	ff 1f       	adc	r31, r31
    2020:	e0 0f       	add	r30, r16
    2022:	f1 1f       	adc	r31, r17
    2024:	ed 59       	subi	r30, 0x9D	; 157
    2026:	fa 4f       	sbci	r31, 0xFA	; 250
    2028:	80 81       	ld	r24, Z
    202a:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <SWPwm_Stop>
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
    202e:	f8 01       	movw	r30, r16
    2030:	e6 54       	subi	r30, 0x46	; 70
    2032:	fa 4f       	sbci	r31, 0xFA	; 250
    2034:	10 82       	st	Z, r1
	return MOTOR_STATUS_ERROR_OK;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	01 c0       	rjmp	.+2      	; 0x203c <Motor_stop+0xce>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    203a:	82 e0       	ldi	r24, 0x02	; 2
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
	return MOTOR_STATUS_ERROR_OK;
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	1f 91       	pop	r17
    2042:	0f 91       	pop	r16
    2044:	ff 90       	pop	r15
    2046:	ef 90       	pop	r14
    2048:	df 90       	pop	r13
    204a:	08 95       	ret

0000204c <Motor_run>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Move the motor in the given direction.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to move the motor forward with given speed in % */
enuMotor_Status_t Motor_run(uint8_t u8_motorID, uint8_t u8_speed, uint8_t u8_direction)
{
    204c:	ff 92       	push	r15
    204e:	0f 93       	push	r16
    2050:	1f 93       	push	r17
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
    2056:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <gu8_MotorModuleStatus>
    205a:	96 30       	cpi	r25, 0x06	; 6
    205c:	09 f0       	breq	.+2      	; 0x2060 <Motor_run+0x14>
    205e:	57 c0       	rjmp	.+174    	; 0x210e <Motor_run+0xc2>
	{
		return MOTOR_STATUS_UNINIT;
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
    2060:	81 11       	cpse	r24, r1
    2062:	57 c0       	rjmp	.+174    	; 0x2112 <Motor_run+0xc6>
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
    2064:	65 36       	cpi	r22, 0x65	; 101
    2066:	08 f0       	brcs	.+2      	; 0x206a <Motor_run+0x1e>
    2068:	56 c0       	rjmp	.+172    	; 0x2116 <Motor_run+0xca>
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
    206a:	42 30       	cpi	r20, 0x02	; 2
    206c:	08 f0       	brcs	.+2      	; 0x2070 <Motor_run+0x24>
    206e:	55 c0       	rjmp	.+170    	; 0x211a <Motor_run+0xce>
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
    2070:	08 2f       	mov	r16, r24
    2072:	10 e0       	ldi	r17, 0x00	; 0
    2074:	f8 01       	movw	r30, r16
    2076:	e6 54       	subi	r30, 0x46	; 70
    2078:	fa 4f       	sbci	r31, 0xFA	; 250
    207a:	90 81       	ld	r25, Z
    207c:	91 30       	cpi	r25, 0x01	; 1
    207e:	09 f4       	brne	.+2      	; 0x2082 <Motor_run+0x36>
    2080:	4e c0       	rjmp	.+156    	; 0x211e <Motor_run+0xd2>
    2082:	f6 2e       	mov	r15, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_speed == 0) 
    2084:	61 11       	cpse	r22, r1
    2086:	04 c0       	rjmp	.+8      	; 0x2090 <Motor_run+0x44>
	{
		Motor_stop(u8_motorID);
    2088:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <Motor_stop>
		return MOTOR_STATUS_ERROR_OK;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	48 c0       	rjmp	.+144    	; 0x2120 <Motor_run+0xd4>
	}
	if(u8_direction == MOTOR_DIR_CLK_WISE) /* Activate the Motor in the Clock Wise Direction */
    2090:	41 11       	cpse	r20, r1
    2092:	12 c0       	rjmp	.+36     	; 0x20b8 <Motor_run+0x6c>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_HIGH);
    2094:	25 e0       	ldi	r18, 0x05	; 5
    2096:	20 9f       	mul	r18, r16
    2098:	c0 01       	movw	r24, r0
    209a:	21 9f       	mul	r18, r17
    209c:	90 0d       	add	r25, r0
    209e:	11 24       	eor	r1, r1
    20a0:	ec 01       	movw	r28, r24
    20a2:	cd 59       	subi	r28, 0x9D	; 157
    20a4:	da 4f       	sbci	r29, 0xFA	; 250
    20a6:	61 e0       	ldi	r22, 0x01	; 1
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    20b6:	13 c0       	rjmp	.+38     	; 0x20de <Motor_run+0x92>
	}else if(u8_direction == MOTOR_DIR_ANTI_CLK_WISE) /* Activate the Motor in the Anti Clock Wise Direction */
    20b8:	41 30       	cpi	r20, 0x01	; 1
    20ba:	89 f4       	brne	.+34     	; 0x20de <Motor_run+0x92>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
    20bc:	25 e0       	ldi	r18, 0x05	; 5
    20be:	20 9f       	mul	r18, r16
    20c0:	c0 01       	movw	r24, r0
    20c2:	21 9f       	mul	r18, r17
    20c4:	90 0d       	add	r25, r0
    20c6:	11 24       	eor	r1, r1
    20c8:	ec 01       	movw	r28, r24
    20ca:	cd 59       	subi	r28, 0x9D	; 157
    20cc:	da 4f       	sbci	r29, 0xFA	; 250
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_HIGH);
    20d6:	61 e0       	ldi	r22, 0x01	; 1
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
	}
	
	/* Change the state of the Motor to Running */
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
    20de:	f8 01       	movw	r30, r16
    20e0:	e6 54       	subi	r30, 0x46	; 70
    20e2:	fa 4f       	sbci	r31, 0xFA	; 250
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	80 83       	st	Z, r24
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
    20e8:	f8 01       	movw	r30, r16
    20ea:	ee 0f       	add	r30, r30
    20ec:	ff 1f       	adc	r31, r31
    20ee:	ee 0f       	add	r30, r30
    20f0:	ff 1f       	adc	r31, r31
    20f2:	e0 0f       	add	r30, r16
    20f4:	f1 1f       	adc	r31, r17
    20f6:	ed 59       	subi	r30, 0x9D	; 157
    20f8:	fa 4f       	sbci	r31, 0xFA	; 250
    20fa:	43 81       	ldd	r20, Z+3	; 0x03
    20fc:	54 81       	ldd	r21, Z+4	; 0x04
    20fe:	60 e0       	ldi	r22, 0x00	; 0
    2100:	70 e0       	ldi	r23, 0x00	; 0
    2102:	2f 2d       	mov	r18, r15
    2104:	80 81       	ld	r24, Z
    2106:	0e 94 14 1c 	call	0x3828	; 0x3828 <SWPwm_Start>
	
	return MOTOR_STATUS_ERROR_OK;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	09 c0       	rjmp	.+18     	; 0x2120 <Motor_run+0xd4>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_UNINIT;
    210e:	87 e0       	ldi	r24, 0x07	; 7
    2110:	07 c0       	rjmp	.+14     	; 0x2120 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
    2112:	82 e0       	ldi	r24, 0x02	; 2
    2114:	05 c0       	rjmp	.+10     	; 0x2120 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
    2116:	83 e0       	ldi	r24, 0x03	; 3
    2118:	03 c0       	rjmp	.+6      	; 0x2120 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
    211a:	84 e0       	ldi	r24, 0x04	; 4
    211c:	01 c0       	rjmp	.+2      	; 0x2120 <Motor_run+0xd4>
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
	{
		return MOTOR_STATUS_ERROR_RUNNING;
    211e:	85 e0       	ldi	r24, 0x05	; 5
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
	
	return MOTOR_STATUS_ERROR_OK;
}
    2120:	df 91       	pop	r29
    2122:	cf 91       	pop	r28
    2124:	1f 91       	pop	r17
    2126:	0f 91       	pop	r16
    2128:	ff 90       	pop	r15
    212a:	08 95       	ret

0000212c <Uart_RXC_ISR>:
uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;

void Uart_RXC_ISR(void)
{
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
    2130:	c0 91 bc 05 	lds	r28, 0x05BC	; 0x8005bc <gu8_counter>
    2134:	d0 e0       	ldi	r29, 0x00	; 0
    2136:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <Uart_DataRegister>
    213a:	c3 54       	subi	r28, 0x43	; 67
    213c:	da 4f       	sbci	r29, 0xFA	; 250
    213e:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
    2140:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <gu8_counter>
    2144:	e9 2f       	mov	r30, r25
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	e3 54       	subi	r30, 0x43	; 67
    214a:	fa 4f       	sbci	r31, 0xFA	; 250
    214c:	80 81       	ld	r24, Z
    214e:	8d 30       	cpi	r24, 0x0D	; 13
    2150:	71 f4       	brne	.+28     	; 0x216e <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    2152:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
    2156:	e0 91 bc 05 	lds	r30, 0x05BC	; 0x8005bc <gu8_counter>
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	e3 54       	subi	r30, 0x43	; 67
    215e:	fa 4f       	sbci	r31, 0xFA	; 250
    2160:	10 82       	st	Z, r1
		gu8_counter = 0;
    2162:	10 92 bc 05 	sts	0x05BC, r1	; 0x8005bc <gu8_counter>
		gu8_flag = 1;
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <gu8_flag>
    216c:	1d c0       	rjmp	.+58     	; 0x21a8 <Uart_RXC_ISR+0x7c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
    216e:	88 30       	cpi	r24, 0x08	; 8
    2170:	51 f4       	brne	.+20     	; 0x2186 <Uart_RXC_ISR+0x5a>
    2172:	99 23       	and	r25, r25
    2174:	41 f0       	breq	.+16     	; 0x2186 <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
    2176:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <Uart_sendByte>
		gu8_counter--;
    217a:	80 91 bc 05 	lds	r24, 0x05BC	; 0x8005bc <gu8_counter>
    217e:	81 50       	subi	r24, 0x01	; 1
    2180:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <gu8_counter>
    2184:	11 c0       	rjmp	.+34     	; 0x21a8 <Uart_RXC_ISR+0x7c>
	}
	else if(gau8_data[gu8_counter] != '\b')
    2186:	88 30       	cpi	r24, 0x08	; 8
    2188:	79 f0       	breq	.+30     	; 0x21a8 <Uart_RXC_ISR+0x7c>
	{
		if(gu8_visibility == INPUT_INVISIBLE)
    218a:	90 91 bc 06 	lds	r25, 0x06BC	; 0x8006bc <gu8_visibility>
    218e:	91 30       	cpi	r25, 0x01	; 1
    2190:	21 f4       	brne	.+8      	; 0x219a <Uart_RXC_ISR+0x6e>
		{
			Uart_sendByte('*');	
    2192:	8a e2       	ldi	r24, 0x2A	; 42
    2194:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <Uart_sendByte>
    2198:	02 c0       	rjmp	.+4      	; 0x219e <Uart_RXC_ISR+0x72>
		}else
		{
			Uart_sendByte(gau8_data[gu8_counter]);	
    219a:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <Uart_sendByte>
		}
		gu8_counter++;
    219e:	80 91 bc 05 	lds	r24, 0x05BC	; 0x8005bc <gu8_counter>
    21a2:	8f 5f       	subi	r24, 0xFF	; 255
    21a4:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <gu8_counter>
	}
}
    21a8:	df 91       	pop	r29
    21aa:	cf 91       	pop	r28
    21ac:	08 95       	ret

000021ae <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
    21ae:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <genu_TerminalModuleState>
    21b2:	83 30       	cpi	r24, 0x03	; 3
    21b4:	81 f0       	breq	.+32     	; 0x21d6 <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
    21b6:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
    21ba:	81 30       	cpi	r24, 0x01	; 1
    21bc:	11 f0       	breq	.+4      	; 0x21c2 <Terminal_init+0x14>
    21be:	87 30       	cpi	r24, 0x07	; 7
    21c0:	49 f4       	brne	.+18     	; 0x21d4 <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
    21c2:	86 e9       	ldi	r24, 0x96	; 150
    21c4:	90 e1       	ldi	r25, 0x10	; 16
    21c6:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
    21ca:	83 e0       	ldi	r24, 0x03	; 3
    21cc:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
    21d4:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
    21d6:	08 95       	ret

000021d8 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
    21d8:	cf 93       	push	r28
    21da:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	81 f0       	breq	.+32     	; 0x2200 <Terminal_Out+0x28>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    21e0:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <genu_TerminalModuleState>
    21e4:	22 30       	cpi	r18, 0x02	; 2
    21e6:	79 f0       	breq	.+30     	; 0x2206 <Terminal_Out+0x2e>
    21e8:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
    21ea:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
    21ee:	68 2f       	mov	r22, r24
    21f0:	70 e0       	ldi	r23, 0x00	; 0
    21f2:	ce 01       	movw	r24, r28
    21f4:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
    21f8:	81 30       	cpi	r24, 0x01	; 1
    21fa:	21 f0       	breq	.+8      	; 0x2204 <Terminal_Out+0x2c>
		return TERMINAL_STATUS_ERROR_NOK;
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	03 c0       	rjmp	.+6      	; 0x2206 <Terminal_Out+0x2e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    2200:	24 e0       	ldi	r18, 0x04	; 4
    2202:	01 c0       	rjmp	.+2      	; 0x2206 <Terminal_Out+0x2e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
    2204:	21 e0       	ldi	r18, 0x01	; 1
}
    2206:	82 2f       	mov	r24, r18
    2208:	df 91       	pop	r29
    220a:	cf 91       	pop	r28
    220c:	08 95       	ret

0000220e <Terminal_In>:
* Parameters (out): pu8_InputData - Pointer to an input string from the terminal.
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to get the input from the terminal.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_In(uint8_t *pu8_InputData)
{
    220e:	bc 01       	movw	r22, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
    2210:	89 2b       	or	r24, r25
    2212:	a1 f0       	breq	.+40     	; 0x223c <Terminal_In+0x2e>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
    2214:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <genu_TerminalModuleState>
    2218:	82 30       	cpi	r24, 0x02	; 2
    221a:	99 f0       	breq	.+38     	; 0x2242 <Terminal_In+0x34>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	if(gu8_flag == 1)
    221c:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <gu8_flag>
    2220:	81 30       	cpi	r24, 0x01	; 1
    2222:	71 f4       	brne	.+28     	; 0x2240 <Terminal_In+0x32>
	{
		gu8_flag = 0;
    2224:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <gu8_flag>
		stringCopy(gau8_data, pu8_InputData);
    2228:	8d eb       	ldi	r24, 0xBD	; 189
    222a:	95 e0       	ldi	r25, 0x05	; 5
    222c:	0e 94 04 1a 	call	0x3408	; 0x3408 <stringCopy>
		EmptyString(gau8_data);
    2230:	8d eb       	ldi	r24, 0xBD	; 189
    2232:	95 e0       	ldi	r25, 0x05	; 5
    2234:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <EmptyString>
		return TERMINAL_STATUS_INPUT_CHANGED;
    2238:	85 e0       	ldi	r24, 0x05	; 5
    223a:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_InputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
    223c:	84 e0       	ldi	r24, 0x04	; 4
    223e:	08 95       	ret
		gu8_flag = 0;
		stringCopy(gau8_data, pu8_InputData);
		EmptyString(gau8_data);
		return TERMINAL_STATUS_INPUT_CHANGED;
	}
	return TERMINAL_STATUS_ERROR_OK;
    2240:	81 e0       	ldi	r24, 0x01	; 1
}
    2242:	08 95       	ret

00002244 <Terminal_enablePasswordMode>:

enuTerminal_Status_t Terminal_enablePasswordMode(void)
{
	gu8_visibility = INPUT_INVISIBLE;
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	80 93 bc 06 	sts	0x06BC, r24	; 0x8006bc <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
}
    224a:	08 95       	ret

0000224c <Terminal_disablePasswordMode>:
enuTerminal_Status_t Terminal_disablePasswordMode(void)
{
	gu8_visibility = INPUT_VISIBLE;
    224c:	10 92 bc 06 	sts	0x06BC, r1	; 0x8006bc <gu8_visibility>
	return TERMINAL_STATUS_ERROR_OK;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	08 95       	ret

00002254 <main>:
#include "APPL/App.h"


int main(void)
{
	App_start();
    2254:	0e 94 3d 0a 	call	0x147a	; 0x147a <App_start>
    2258:	ff cf       	rjmp	.-2      	; 0x2258 <main+0x4>

0000225a <Adc_init>:
		f32_Resolution = (1000*ADC_AREF_VALUE)/ADC_STEPS_NUM;
	}
	*pu32_data = u16_Result*f32_Resolution;
		
	return ADC_STATUS_ERROR_OK;
}
    225a:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <genuAdc_Status>
    225e:	87 30       	cpi	r24, 0x07	; 7
    2260:	11 f1       	breq	.+68     	; 0x22a6 <Adc_init+0x4c>
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	13 c0       	rjmp	.+38     	; 0x228c <Adc_init+0x32>
    2266:	3b b3       	in	r19, 0x1b	; 27
    2268:	e2 2f       	mov	r30, r18
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	ee 0f       	add	r30, r30
    226e:	ff 1f       	adc	r31, r31
    2270:	e0 57       	subi	r30, 0x70	; 112
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	00 80       	ld	r0, Z
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <Adc_init+0x26>
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	0a 94       	dec	r0
    2282:	e2 f7       	brpl	.-8      	; 0x227c <Adc_init+0x22>
    2284:	80 95       	com	r24
    2286:	83 23       	and	r24, r19
    2288:	8b bb       	out	0x1b, r24	; 27
    228a:	2f 5f       	subi	r18, 0xFF	; 255
    228c:	22 23       	and	r18, r18
    228e:	59 f3       	breq	.-42     	; 0x2266 <Adc_init+0xc>
    2290:	97 e0       	ldi	r25, 0x07	; 7
    2292:	96 b9       	out	0x06, r25	; 6
    2294:	86 b1       	in	r24, 0x06	; 6
    2296:	8f 7d       	andi	r24, 0xDF	; 223
    2298:	86 b9       	out	0x06, r24	; 6
    229a:	86 b1       	in	r24, 0x06	; 6
    229c:	86 b9       	out	0x06, r24	; 6
    229e:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <genuAdc_Status>
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	08 95       	ret
    22a6:	88 e0       	ldi	r24, 0x08	; 8
    22a8:	08 95       	ret

000022aa <Adc_start>:
    22aa:	cf 92       	push	r12
    22ac:	df 92       	push	r13
    22ae:	ef 92       	push	r14
    22b0:	ff 92       	push	r15
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <genuAdc_Status>
    22ba:	97 30       	cpi	r25, 0x07	; 7
    22bc:	09 f0       	breq	.+2      	; 0x22c0 <Adc_start+0x16>
    22be:	61 c0       	rjmp	.+194    	; 0x2382 <Adc_start+0xd8>
    22c0:	61 15       	cp	r22, r1
    22c2:	71 05       	cpc	r23, r1
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <Adc_start+0x1e>
    22c6:	5f c0       	rjmp	.+190    	; 0x2386 <Adc_start+0xdc>
    22c8:	37 b1       	in	r19, 0x07	; 7
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	fc 01       	movw	r30, r24
    22ce:	ee 0f       	add	r30, r30
    22d0:	ff 1f       	adc	r31, r31
    22d2:	e0 57       	subi	r30, 0x70	; 112
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	20 81       	ld	r18, Z
    22d8:	23 2b       	or	r18, r19
    22da:	27 b9       	out	0x07, r18	; 7
    22dc:	47 b1       	in	r20, 0x07	; 7
    22de:	31 81       	ldd	r19, Z+1	; 0x01
    22e0:	50 e4       	ldi	r21, 0x40	; 64
    22e2:	35 9f       	mul	r19, r21
    22e4:	90 01       	movw	r18, r0
    22e6:	11 24       	eor	r1, r1
    22e8:	24 2b       	or	r18, r20
    22ea:	27 b9       	out	0x07, r18	; 7
    22ec:	26 b1       	in	r18, 0x06	; 6
    22ee:	20 68       	ori	r18, 0x80	; 128
    22f0:	26 b9       	out	0x06, r18	; 6
    22f2:	26 b1       	in	r18, 0x06	; 6
    22f4:	20 64       	ori	r18, 0x40	; 64
    22f6:	26 b9       	out	0x06, r18	; 6
    22f8:	34 9b       	sbis	0x06, 4	; 6
    22fa:	fe cf       	rjmp	.-4      	; 0x22f8 <Adc_start+0x4e>
    22fc:	44 b1       	in	r20, 0x04	; 4
    22fe:	25 b1       	in	r18, 0x05	; 5
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	32 2f       	mov	r19, r18
    2304:	22 27       	eor	r18, r18
    2306:	24 2b       	or	r18, r20
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	fc 01       	movw	r30, r24
    230e:	e0 57       	subi	r30, 0x70	; 112
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	81 81       	ldd	r24, Z+1	; 0x01
    2314:	83 30       	cpi	r24, 0x03	; 3
    2316:	41 f0       	breq	.+16     	; 0x2328 <Adc_start+0x7e>
    2318:	81 30       	cpi	r24, 0x01	; 1
    231a:	69 f0       	breq	.+26     	; 0x2336 <Adc_start+0x8c>
    231c:	88 23       	and	r24, r24
    231e:	a1 f0       	breq	.+40     	; 0x2348 <Adc_start+0x9e>
    2320:	c1 2c       	mov	r12, r1
    2322:	d1 2c       	mov	r13, r1
    2324:	76 01       	movw	r14, r12
    2326:	18 c0       	rjmp	.+48     	; 0x2358 <Adc_start+0xae>
    2328:	c1 2c       	mov	r12, r1
    232a:	d1 2c       	mov	r13, r1
    232c:	76 01       	movw	r14, r12
    232e:	68 94       	set
    2330:	e5 f8       	bld	r14, 5
    2332:	f6 f8       	bld	r15, 6
    2334:	11 c0       	rjmp	.+34     	; 0x2358 <Adc_start+0xae>
    2336:	0f 2e       	mov	r0, r31
    2338:	c1 2c       	mov	r12, r1
    233a:	f0 e4       	ldi	r31, 0x40	; 64
    233c:	df 2e       	mov	r13, r31
    233e:	fc e9       	ldi	r31, 0x9C	; 156
    2340:	ef 2e       	mov	r14, r31
    2342:	fd 2c       	mov	r15, r13
    2344:	f0 2d       	mov	r31, r0
    2346:	08 c0       	rjmp	.+16     	; 0x2358 <Adc_start+0xae>
    2348:	0f 2e       	mov	r0, r31
    234a:	c1 2c       	mov	r12, r1
    234c:	f0 e4       	ldi	r31, 0x40	; 64
    234e:	df 2e       	mov	r13, r31
    2350:	fc e9       	ldi	r31, 0x9C	; 156
    2352:	ef 2e       	mov	r14, r31
    2354:	fd 2c       	mov	r15, r13
    2356:	f0 2d       	mov	r31, r0
    2358:	eb 01       	movw	r28, r22
    235a:	b9 01       	movw	r22, r18
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	0e 94 77 1f 	call	0x3eee	; 0x3eee <__floatunsisf>
    2364:	a7 01       	movw	r20, r14
    2366:	96 01       	movw	r18, r12
    2368:	0e 94 29 20 	call	0x4052	; 0x4052 <__mulsf3>
    236c:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <__fixunssfsi>
    2370:	68 83       	st	Y, r22
    2372:	79 83       	std	Y+1, r23	; 0x01
    2374:	8a 83       	std	Y+2, r24	; 0x02
    2376:	9b 83       	std	Y+3, r25	; 0x03
    2378:	86 b1       	in	r24, 0x06	; 6
    237a:	80 61       	ori	r24, 0x10	; 16
    237c:	86 b9       	out	0x06, r24	; 6
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	03 c0       	rjmp	.+6      	; 0x2388 <Adc_start+0xde>
    2382:	86 e0       	ldi	r24, 0x06	; 6
    2384:	01 c0       	rjmp	.+2      	; 0x2388 <Adc_start+0xde>
    2386:	85 e0       	ldi	r24, 0x05	; 5
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	ff 90       	pop	r15
    238e:	ef 90       	pop	r14
    2390:	df 90       	pop	r13
    2392:	cf 90       	pop	r12
    2394:	08 95       	ret

00002396 <__vector_16>:

ISR(ADC_IRQ)
{
    2396:	1f 92       	push	r1
    2398:	0f 92       	push	r0
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	0f 92       	push	r0
    239e:	11 24       	eor	r1, r1
    23a0:	2f 93       	push	r18
    23a2:	3f 93       	push	r19
    23a4:	4f 93       	push	r20
    23a6:	5f 93       	push	r21
    23a8:	6f 93       	push	r22
    23aa:	7f 93       	push	r23
    23ac:	8f 93       	push	r24
    23ae:	9f 93       	push	r25
    23b0:	af 93       	push	r26
    23b2:	bf 93       	push	r27
    23b4:	ef 93       	push	r30
    23b6:	ff 93       	push	r31
	(*ADC_CallBackPtr)();
    23b8:	e0 91 bd 06 	lds	r30, 0x06BD	; 0x8006bd <ADC_CallBackPtr>
    23bc:	f0 91 be 06 	lds	r31, 0x06BE	; 0x8006be <ADC_CallBackPtr+0x1>
    23c0:	09 95       	icall
    23c2:	ff 91       	pop	r31
    23c4:	ef 91       	pop	r30
    23c6:	bf 91       	pop	r27
    23c8:	af 91       	pop	r26
    23ca:	9f 91       	pop	r25
    23cc:	8f 91       	pop	r24
    23ce:	7f 91       	pop	r23
    23d0:	6f 91       	pop	r22
    23d2:	5f 91       	pop	r21
    23d4:	4f 91       	pop	r20
    23d6:	3f 91       	pop	r19
    23d8:	2f 91       	pop	r18
    23da:	0f 90       	pop	r0
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	0f 90       	pop	r0
    23e0:	1f 90       	pop	r1
    23e2:	18 95       	reti

000023e4 <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
    23e4:	2f 92       	push	r2
    23e6:	3f 92       	push	r3
    23e8:	4f 92       	push	r4
    23ea:	5f 92       	push	r5
    23ec:	6f 92       	push	r6
    23ee:	7f 92       	push	r7
    23f0:	8f 92       	push	r8
    23f2:	9f 92       	push	r9
    23f4:	af 92       	push	r10
    23f6:	bf 92       	push	r11
    23f8:	cf 92       	push	r12
    23fa:	df 92       	push	r13
    23fc:	ef 92       	push	r14
    23fe:	ff 92       	push	r15
    2400:	0f 93       	push	r16
    2402:	1f 93       	push	r17
    2404:	cf 93       	push	r28
    2406:	df 93       	push	r29
    2408:	00 d0       	rcall	.+0      	; 0x240a <Delay_ms+0x26>
    240a:	00 d0       	rcall	.+0      	; 0x240c <Delay_ms+0x28>
    240c:	00 d0       	rcall	.+0      	; 0x240e <Delay_ms+0x2a>
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	22 2e       	mov	r2, r18
    2414:	33 2e       	mov	r3, r19
    2416:	44 2e       	mov	r4, r20
    2418:	55 2e       	mov	r5, r21
    241a:	66 2e       	mov	r6, r22
    241c:	79 83       	std	Y+1, r23	; 0x01
    241e:	8a 83       	std	Y+2, r24	; 0x02
    2420:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    2422:	91 2c       	mov	r9, r1
    2424:	1d 82       	std	Y+5, r1	; 0x05
    2426:	1c 82       	std	Y+4, r1	; 0x04
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	e0 e0       	ldi	r30, 0x00	; 0
    242e:	71 2c       	mov	r7, r1
    2430:	81 2c       	mov	r8, r1
    2432:	44 c0       	rjmp	.+136    	; 0x24bc <Delay_ms+0xd8>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
    2434:	2d 2d       	mov	r18, r13
    2436:	3e 2d       	mov	r19, r14
    2438:	4f 2d       	mov	r20, r15
    243a:	50 2f       	mov	r21, r16
    243c:	61 2f       	mov	r22, r17
    243e:	7a 2f       	mov	r23, r26
    2440:	8b 2d       	mov	r24, r11
    2442:	9c 2d       	mov	r25, r12
    2444:	a1 e0       	ldi	r26, 0x01	; 1
    2446:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__adddi3_s8>
    244a:	d2 2e       	mov	r13, r18
    244c:	e3 2e       	mov	r14, r19
    244e:	f4 2e       	mov	r15, r20
    2450:	05 2f       	mov	r16, r21
    2452:	16 2f       	mov	r17, r22
    2454:	a7 2f       	mov	r26, r23
    2456:	b8 2e       	mov	r11, r24
    2458:	c9 2e       	mov	r12, r25
    245a:	0a c0       	rjmp	.+20     	; 0x2470 <Delay_ms+0x8c>
    245c:	d1 2c       	mov	r13, r1
    245e:	e1 2c       	mov	r14, r1
    2460:	f1 2c       	mov	r15, r1
    2462:	00 e0       	ldi	r16, 0x00	; 0
    2464:	10 e0       	ldi	r17, 0x00	; 0
    2466:	a0 e0       	ldi	r26, 0x00	; 0
    2468:	b1 2c       	mov	r11, r1
    246a:	c1 2c       	mov	r12, r1
    246c:	ad 80       	ldd	r10, Y+5	; 0x05
    246e:	ee 83       	std	Y+6, r30	; 0x06
    2470:	2d 2d       	mov	r18, r13
    2472:	3e 2d       	mov	r19, r14
    2474:	4f 2d       	mov	r20, r15
    2476:	50 2f       	mov	r21, r16
    2478:	61 2f       	mov	r22, r17
    247a:	7a 2f       	mov	r23, r26
    247c:	8b 2d       	mov	r24, r11
    247e:	9c 2d       	mov	r25, r12
    2480:	2b 38       	cpi	r18, 0x8B	; 139
    2482:	31 05       	cpc	r19, r1
    2484:	41 05       	cpc	r20, r1
    2486:	51 05       	cpc	r21, r1
    2488:	61 05       	cpc	r22, r1
    248a:	71 05       	cpc	r23, r1
    248c:	81 05       	cpc	r24, r1
    248e:	91 05       	cpc	r25, r1
    2490:	89 f2       	breq	.-94     	; 0x2434 <Delay_ms+0x50>
    2492:	80 f2       	brcs	.-96     	; 0x2434 <Delay_ms+0x50>
    2494:	ee 81       	ldd	r30, Y+6	; 0x06

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
    2496:	29 2d       	mov	r18, r9
    2498:	3a 2d       	mov	r19, r10
    249a:	4c 81       	ldd	r20, Y+4	; 0x04
    249c:	5b 2f       	mov	r21, r27
    249e:	6f 2f       	mov	r22, r31
    24a0:	7e 2f       	mov	r23, r30
    24a2:	87 2d       	mov	r24, r7
    24a4:	98 2d       	mov	r25, r8
    24a6:	a1 e0       	ldi	r26, 0x01	; 1
    24a8:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__adddi3_s8>
    24ac:	92 2e       	mov	r9, r18
    24ae:	3d 83       	std	Y+5, r19	; 0x05
    24b0:	4c 83       	std	Y+4, r20	; 0x04
    24b2:	b5 2f       	mov	r27, r21
    24b4:	f6 2f       	mov	r31, r22
    24b6:	e7 2f       	mov	r30, r23
    24b8:	78 2e       	mov	r7, r24
    24ba:	89 2e       	mov	r8, r25
    24bc:	29 2d       	mov	r18, r9
    24be:	3d 81       	ldd	r19, Y+5	; 0x05
    24c0:	4c 81       	ldd	r20, Y+4	; 0x04
    24c2:	5b 2f       	mov	r21, r27
    24c4:	6f 2f       	mov	r22, r31
    24c6:	7e 2f       	mov	r23, r30
    24c8:	87 2d       	mov	r24, r7
    24ca:	98 2d       	mov	r25, r8
    24cc:	a2 2c       	mov	r10, r2
    24ce:	b3 2c       	mov	r11, r3
    24d0:	c4 2c       	mov	r12, r4
    24d2:	d5 2c       	mov	r13, r5
    24d4:	e6 2c       	mov	r14, r6
    24d6:	f9 80       	ldd	r15, Y+1	; 0x01
    24d8:	0a 81       	ldd	r16, Y+2	; 0x02
    24da:	1b 81       	ldd	r17, Y+3	; 0x03
    24dc:	0e 94 ed 20 	call	0x41da	; 0x41da <__cmpdi2>
    24e0:	08 f4       	brcc	.+2      	; 0x24e4 <Delay_ms+0x100>
    24e2:	bc cf       	rjmp	.-136    	; 0x245c <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
    24e4:	26 96       	adiw	r28, 0x06	; 6
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	df 91       	pop	r29
    24f2:	cf 91       	pop	r28
    24f4:	1f 91       	pop	r17
    24f6:	0f 91       	pop	r16
    24f8:	ff 90       	pop	r15
    24fa:	ef 90       	pop	r14
    24fc:	df 90       	pop	r13
    24fe:	cf 90       	pop	r12
    2500:	bf 90       	pop	r11
    2502:	af 90       	pop	r10
    2504:	9f 90       	pop	r9
    2506:	8f 90       	pop	r8
    2508:	7f 90       	pop	r7
    250a:	6f 90       	pop	r6
    250c:	5f 90       	pop	r5
    250e:	4f 90       	pop	r4
    2510:	3f 90       	pop	r3
    2512:	2f 90       	pop	r2
    2514:	08 95       	ret

00002516 <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
    2516:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
    2518:	89 2b       	or	r24, r25
    251a:	09 f4       	brne	.+2      	; 0x251e <Dio_init+0x8>
    251c:	e4 c0       	rjmp	.+456    	; 0x26e6 <Dio_init+0x1d0>
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	d7 c0       	rjmp	.+430    	; 0x26d0 <Dio_init+0x1ba>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
    2522:	e9 2f       	mov	r30, r25
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	ee 0f       	add	r30, r30
    2528:	ff 1f       	adc	r31, r31
    252a:	ee 0f       	add	r30, r30
    252c:	ff 1f       	adc	r31, r31
    252e:	e4 0f       	add	r30, r20
    2530:	f5 1f       	adc	r31, r21
    2532:	31 81       	ldd	r19, Z+1	; 0x01
    2534:	38 30       	cpi	r19, 0x08	; 8
    2536:	08 f0       	brcs	.+2      	; 0x253a <Dio_init+0x24>
    2538:	d8 c0       	rjmp	.+432    	; 0x26ea <Dio_init+0x1d4>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
    253a:	20 81       	ld	r18, Z
    253c:	21 30       	cpi	r18, 0x01	; 1
    253e:	c1 f1       	breq	.+112    	; 0x25b0 <Dio_init+0x9a>
    2540:	38 f0       	brcs	.+14     	; 0x2550 <Dio_init+0x3a>
    2542:	22 30       	cpi	r18, 0x02	; 2
    2544:	09 f4       	brne	.+2      	; 0x2548 <Dio_init+0x32>
    2546:	64 c0       	rjmp	.+200    	; 0x2610 <Dio_init+0xfa>
    2548:	23 30       	cpi	r18, 0x03	; 3
    254a:	09 f4       	brne	.+2      	; 0x254e <Dio_init+0x38>
    254c:	91 c0       	rjmp	.+290    	; 0x2670 <Dio_init+0x15a>
    254e:	cf c0       	rjmp	.+414    	; 0x26ee <Dio_init+0x1d8>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2550:	2a b3       	in	r18, 0x1a	; 26
    2552:	61 e0       	ldi	r22, 0x01	; 1
    2554:	70 e0       	ldi	r23, 0x00	; 0
    2556:	db 01       	movw	r26, r22
    2558:	02 c0       	rjmp	.+4      	; 0x255e <Dio_init+0x48>
    255a:	aa 0f       	add	r26, r26
    255c:	bb 1f       	adc	r27, r27
    255e:	3a 95       	dec	r19
    2560:	e2 f7       	brpl	.-8      	; 0x255a <Dio_init+0x44>
    2562:	8a 2f       	mov	r24, r26
    2564:	80 95       	com	r24
    2566:	82 23       	and	r24, r18
    2568:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    256a:	aa b3       	in	r26, 0x1a	; 26
    256c:	82 81       	ldd	r24, Z+2	; 0x02
    256e:	28 2f       	mov	r18, r24
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	01 80       	ldd	r0, Z+1	; 0x01
    2574:	02 c0       	rjmp	.+4      	; 0x257a <Dio_init+0x64>
    2576:	22 0f       	add	r18, r18
    2578:	33 1f       	adc	r19, r19
    257a:	0a 94       	dec	r0
    257c:	e2 f7       	brpl	.-8      	; 0x2576 <Dio_init+0x60>
    257e:	2a 2b       	or	r18, r26
    2580:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2582:	8b b3       	in	r24, 0x1b	; 27
    2584:	01 80       	ldd	r0, Z+1	; 0x01
    2586:	02 c0       	rjmp	.+4      	; 0x258c <Dio_init+0x76>
    2588:	66 0f       	add	r22, r22
    258a:	77 1f       	adc	r23, r23
    258c:	0a 94       	dec	r0
    258e:	e2 f7       	brpl	.-8      	; 0x2588 <Dio_init+0x72>
    2590:	60 95       	com	r22
    2592:	68 23       	and	r22, r24
    2594:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2596:	6b b3       	in	r22, 0x1b	; 27
    2598:	83 81       	ldd	r24, Z+3	; 0x03
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	01 80       	ldd	r0, Z+1	; 0x01
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <Dio_init+0x90>
    25a2:	22 0f       	add	r18, r18
    25a4:	33 1f       	adc	r19, r19
    25a6:	0a 94       	dec	r0
    25a8:	e2 f7       	brpl	.-8      	; 0x25a2 <Dio_init+0x8c>
    25aa:	26 2b       	or	r18, r22
    25ac:	2b bb       	out	0x1b, r18	; 27
				break;
    25ae:	8f c0       	rjmp	.+286    	; 0x26ce <Dio_init+0x1b8>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    25b0:	27 b3       	in	r18, 0x17	; 23
    25b2:	61 e0       	ldi	r22, 0x01	; 1
    25b4:	70 e0       	ldi	r23, 0x00	; 0
    25b6:	db 01       	movw	r26, r22
    25b8:	02 c0       	rjmp	.+4      	; 0x25be <Dio_init+0xa8>
    25ba:	aa 0f       	add	r26, r26
    25bc:	bb 1f       	adc	r27, r27
    25be:	3a 95       	dec	r19
    25c0:	e2 f7       	brpl	.-8      	; 0x25ba <Dio_init+0xa4>
    25c2:	8a 2f       	mov	r24, r26
    25c4:	80 95       	com	r24
    25c6:	82 23       	and	r24, r18
    25c8:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    25ca:	a7 b3       	in	r26, 0x17	; 23
    25cc:	82 81       	ldd	r24, Z+2	; 0x02
    25ce:	28 2f       	mov	r18, r24
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	01 80       	ldd	r0, Z+1	; 0x01
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <Dio_init+0xc4>
    25d6:	22 0f       	add	r18, r18
    25d8:	33 1f       	adc	r19, r19
    25da:	0a 94       	dec	r0
    25dc:	e2 f7       	brpl	.-8      	; 0x25d6 <Dio_init+0xc0>
    25de:	2a 2b       	or	r18, r26
    25e0:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    25e2:	88 b3       	in	r24, 0x18	; 24
    25e4:	01 80       	ldd	r0, Z+1	; 0x01
    25e6:	02 c0       	rjmp	.+4      	; 0x25ec <Dio_init+0xd6>
    25e8:	66 0f       	add	r22, r22
    25ea:	77 1f       	adc	r23, r23
    25ec:	0a 94       	dec	r0
    25ee:	e2 f7       	brpl	.-8      	; 0x25e8 <Dio_init+0xd2>
    25f0:	60 95       	com	r22
    25f2:	68 23       	and	r22, r24
    25f4:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    25f6:	68 b3       	in	r22, 0x18	; 24
    25f8:	83 81       	ldd	r24, Z+3	; 0x03
    25fa:	28 2f       	mov	r18, r24
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	01 80       	ldd	r0, Z+1	; 0x01
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <Dio_init+0xf0>
    2602:	22 0f       	add	r18, r18
    2604:	33 1f       	adc	r19, r19
    2606:	0a 94       	dec	r0
    2608:	e2 f7       	brpl	.-8      	; 0x2602 <Dio_init+0xec>
    260a:	26 2b       	or	r18, r22
    260c:	28 bb       	out	0x18, r18	; 24
				break;
    260e:	5f c0       	rjmp	.+190    	; 0x26ce <Dio_init+0x1b8>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2610:	24 b3       	in	r18, 0x14	; 20
    2612:	61 e0       	ldi	r22, 0x01	; 1
    2614:	70 e0       	ldi	r23, 0x00	; 0
    2616:	db 01       	movw	r26, r22
    2618:	02 c0       	rjmp	.+4      	; 0x261e <Dio_init+0x108>
    261a:	aa 0f       	add	r26, r26
    261c:	bb 1f       	adc	r27, r27
    261e:	3a 95       	dec	r19
    2620:	e2 f7       	brpl	.-8      	; 0x261a <Dio_init+0x104>
    2622:	8a 2f       	mov	r24, r26
    2624:	80 95       	com	r24
    2626:	82 23       	and	r24, r18
    2628:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    262a:	a4 b3       	in	r26, 0x14	; 20
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	01 80       	ldd	r0, Z+1	; 0x01
    2634:	02 c0       	rjmp	.+4      	; 0x263a <Dio_init+0x124>
    2636:	22 0f       	add	r18, r18
    2638:	33 1f       	adc	r19, r19
    263a:	0a 94       	dec	r0
    263c:	e2 f7       	brpl	.-8      	; 0x2636 <Dio_init+0x120>
    263e:	2a 2b       	or	r18, r26
    2640:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2642:	85 b3       	in	r24, 0x15	; 21
    2644:	01 80       	ldd	r0, Z+1	; 0x01
    2646:	02 c0       	rjmp	.+4      	; 0x264c <Dio_init+0x136>
    2648:	66 0f       	add	r22, r22
    264a:	77 1f       	adc	r23, r23
    264c:	0a 94       	dec	r0
    264e:	e2 f7       	brpl	.-8      	; 0x2648 <Dio_init+0x132>
    2650:	60 95       	com	r22
    2652:	68 23       	and	r22, r24
    2654:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    2656:	65 b3       	in	r22, 0x15	; 21
    2658:	83 81       	ldd	r24, Z+3	; 0x03
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	01 80       	ldd	r0, Z+1	; 0x01
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <Dio_init+0x150>
    2662:	22 0f       	add	r18, r18
    2664:	33 1f       	adc	r19, r19
    2666:	0a 94       	dec	r0
    2668:	e2 f7       	brpl	.-8      	; 0x2662 <Dio_init+0x14c>
    266a:	26 2b       	or	r18, r22
    266c:	25 bb       	out	0x15, r18	; 21
				break;
    266e:	2f c0       	rjmp	.+94     	; 0x26ce <Dio_init+0x1b8>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    2670:	21 b3       	in	r18, 0x11	; 17
    2672:	61 e0       	ldi	r22, 0x01	; 1
    2674:	70 e0       	ldi	r23, 0x00	; 0
    2676:	db 01       	movw	r26, r22
    2678:	02 c0       	rjmp	.+4      	; 0x267e <Dio_init+0x168>
    267a:	aa 0f       	add	r26, r26
    267c:	bb 1f       	adc	r27, r27
    267e:	3a 95       	dec	r19
    2680:	e2 f7       	brpl	.-8      	; 0x267a <Dio_init+0x164>
    2682:	8a 2f       	mov	r24, r26
    2684:	80 95       	com	r24
    2686:	82 23       	and	r24, r18
    2688:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    268a:	a1 b3       	in	r26, 0x11	; 17
    268c:	82 81       	ldd	r24, Z+2	; 0x02
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	01 80       	ldd	r0, Z+1	; 0x01
    2694:	02 c0       	rjmp	.+4      	; 0x269a <Dio_init+0x184>
    2696:	22 0f       	add	r18, r18
    2698:	33 1f       	adc	r19, r19
    269a:	0a 94       	dec	r0
    269c:	e2 f7       	brpl	.-8      	; 0x2696 <Dio_init+0x180>
    269e:	2a 2b       	or	r18, r26
    26a0:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
    26a2:	82 b3       	in	r24, 0x12	; 18
    26a4:	01 80       	ldd	r0, Z+1	; 0x01
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <Dio_init+0x196>
    26a8:	66 0f       	add	r22, r22
    26aa:	77 1f       	adc	r23, r23
    26ac:	0a 94       	dec	r0
    26ae:	e2 f7       	brpl	.-8      	; 0x26a8 <Dio_init+0x192>
    26b0:	60 95       	com	r22
    26b2:	68 23       	and	r22, r24
    26b4:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
    26b6:	62 b3       	in	r22, 0x12	; 18
    26b8:	83 81       	ldd	r24, Z+3	; 0x03
    26ba:	28 2f       	mov	r18, r24
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	01 80       	ldd	r0, Z+1	; 0x01
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <Dio_init+0x1b0>
    26c2:	22 0f       	add	r18, r18
    26c4:	33 1f       	adc	r19, r19
    26c6:	0a 94       	dec	r0
    26c8:	e2 f7       	brpl	.-8      	; 0x26c2 <Dio_init+0x1ac>
    26ca:	26 2b       	or	r18, r22
    26cc:	22 bb       	out	0x12, r18	; 18
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
    26ce:	9f 5f       	subi	r25, 0xFF	; 255
    26d0:	94 31       	cpi	r25, 0x14	; 20
    26d2:	08 f4       	brcc	.+2      	; 0x26d6 <Dio_init+0x1c0>
    26d4:	26 cf       	rjmp	.-436    	; 0x2522 <Dio_init+0xc>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
    26d6:	50 93 c1 06 	sts	0x06C1, r21	; 0x8006c1 <pstrDio_pinsConfig+0x1>
    26da:	40 93 c0 06 	sts	0x06C0, r20	; 0x8006c0 <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
    26e4:	08 95       	ret
{
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
    26e6:	85 e0       	ldi	r24, 0x05	; 5
    26e8:	08 95       	ret
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
    26ea:	83 e0       	ldi	r24, 0x03	; 3
    26ec:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
    26ee:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
    26f0:	08 95       	ret

000026f2 <Dio_writePin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    26f2:	85 31       	cpi	r24, 0x15	; 21
    26f4:	08 f0       	brcs	.+2      	; 0x26f8 <Dio_writePin+0x6>
    26f6:	90 c0       	rjmp	.+288    	; 0x2818 <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    26f8:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <u8_Dio_Status>
    26fc:	99 23       	and	r25, r25
    26fe:	09 f4       	brne	.+2      	; 0x2702 <Dio_writePin+0x10>
    2700:	8d c0       	rjmp	.+282    	; 0x281c <Dio_writePin+0x12a>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    2702:	e8 2f       	mov	r30, r24
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	cf 01       	movw	r24, r30
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	e0 91 c0 06 	lds	r30, 0x06C0	; 0x8006c0 <pstrDio_pinsConfig>
    2714:	f0 91 c1 06 	lds	r31, 0x06C1	; 0x8006c1 <pstrDio_pinsConfig+0x1>
    2718:	e8 0f       	add	r30, r24
    271a:	f9 1f       	adc	r31, r25
    271c:	80 81       	ld	r24, Z
    271e:	81 30       	cpi	r24, 0x01	; 1
    2720:	21 f1       	breq	.+72     	; 0x276a <Dio_writePin+0x78>
    2722:	30 f0       	brcs	.+12     	; 0x2730 <Dio_writePin+0x3e>
    2724:	82 30       	cpi	r24, 0x02	; 2
    2726:	f1 f1       	breq	.+124    	; 0x27a4 <Dio_writePin+0xb2>
    2728:	83 30       	cpi	r24, 0x03	; 3
    272a:	09 f4       	brne	.+2      	; 0x272e <Dio_writePin+0x3c>
    272c:	58 c0       	rjmp	.+176    	; 0x27de <Dio_writePin+0xec>
    272e:	78 c0       	rjmp	.+240    	; 0x2820 <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
    2730:	61 30       	cpi	r22, 0x01	; 1
    2732:	69 f4       	brne	.+26     	; 0x274e <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2734:	2b b3       	in	r18, 0x1b	; 27
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	01 80       	ldd	r0, Z+1	; 0x01
    273c:	02 c0       	rjmp	.+4      	; 0x2742 <Dio_writePin+0x50>
    273e:	88 0f       	add	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	0a 94       	dec	r0
    2744:	e2 f7       	brpl	.-8      	; 0x273e <Dio_writePin+0x4c>
    2746:	82 2b       	or	r24, r18
    2748:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    274e:	2b b3       	in	r18, 0x1b	; 27
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	01 80       	ldd	r0, Z+1	; 0x01
    2756:	02 c0       	rjmp	.+4      	; 0x275c <Dio_writePin+0x6a>
    2758:	88 0f       	add	r24, r24
    275a:	99 1f       	adc	r25, r25
    275c:	0a 94       	dec	r0
    275e:	e2 f7       	brpl	.-8      	; 0x2758 <Dio_writePin+0x66>
    2760:	80 95       	com	r24
    2762:	82 23       	and	r24, r18
    2764:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
    276a:	61 30       	cpi	r22, 0x01	; 1
    276c:	69 f4       	brne	.+26     	; 0x2788 <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    276e:	28 b3       	in	r18, 0x18	; 24
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	01 80       	ldd	r0, Z+1	; 0x01
    2776:	02 c0       	rjmp	.+4      	; 0x277c <Dio_writePin+0x8a>
    2778:	88 0f       	add	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	0a 94       	dec	r0
    277e:	e2 f7       	brpl	.-8      	; 0x2778 <Dio_writePin+0x86>
    2780:	82 2b       	or	r24, r18
    2782:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2788:	28 b3       	in	r18, 0x18	; 24
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	01 80       	ldd	r0, Z+1	; 0x01
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <Dio_writePin+0xa4>
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	0a 94       	dec	r0
    2798:	e2 f7       	brpl	.-8      	; 0x2792 <Dio_writePin+0xa0>
    279a:	80 95       	com	r24
    279c:	82 23       	and	r24, r18
    279e:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
    27a4:	61 30       	cpi	r22, 0x01	; 1
    27a6:	69 f4       	brne	.+26     	; 0x27c2 <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    27a8:	25 b3       	in	r18, 0x15	; 21
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	01 80       	ldd	r0, Z+1	; 0x01
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <Dio_writePin+0xc4>
    27b2:	88 0f       	add	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	0a 94       	dec	r0
    27b8:	e2 f7       	brpl	.-8      	; 0x27b2 <Dio_writePin+0xc0>
    27ba:	82 2b       	or	r24, r18
    27bc:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    27c2:	25 b3       	in	r18, 0x15	; 21
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	01 80       	ldd	r0, Z+1	; 0x01
    27ca:	02 c0       	rjmp	.+4      	; 0x27d0 <Dio_writePin+0xde>
    27cc:	88 0f       	add	r24, r24
    27ce:	99 1f       	adc	r25, r25
    27d0:	0a 94       	dec	r0
    27d2:	e2 f7       	brpl	.-8      	; 0x27cc <Dio_writePin+0xda>
    27d4:	80 95       	com	r24
    27d6:	82 23       	and	r24, r18
    27d8:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
    27de:	61 30       	cpi	r22, 0x01	; 1
    27e0:	69 f4       	brne	.+26     	; 0x27fc <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    27e2:	22 b3       	in	r18, 0x12	; 18
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	01 80       	ldd	r0, Z+1	; 0x01
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <Dio_writePin+0xfe>
    27ec:	88 0f       	add	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	0a 94       	dec	r0
    27f2:	e2 f7       	brpl	.-8      	; 0x27ec <Dio_writePin+0xfa>
    27f4:	82 2b       	or	r24, r18
    27f6:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    27fc:	22 b3       	in	r18, 0x12	; 18
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	01 80       	ldd	r0, Z+1	; 0x01
    2804:	02 c0       	rjmp	.+4      	; 0x280a <Dio_writePin+0x118>
    2806:	88 0f       	add	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	0a 94       	dec	r0
    280c:	e2 f7       	brpl	.-8      	; 0x2806 <Dio_writePin+0x114>
    280e:	80 95       	com	r24
    2810:	82 23       	and	r24, r18
    2812:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	08 95       	ret
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    2818:	82 e0       	ldi	r24, 0x02	; 2
    281a:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    281c:	86 e0       	ldi	r24, 0x06	; 6
    281e:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    2820:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
    2822:	08 95       	ret

00002824 <Dio_togglePin>:
* Description: Function to Toggle data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    2824:	85 31       	cpi	r24, 0x15	; 21
    2826:	08 f0       	brcs	.+2      	; 0x282a <Dio_togglePin+0x6>
    2828:	4f c0       	rjmp	.+158    	; 0x28c8 <Dio_togglePin+0xa4>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    282a:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <u8_Dio_Status>
    282e:	99 23       	and	r25, r25
    2830:	09 f4       	brne	.+2      	; 0x2834 <Dio_togglePin+0x10>
    2832:	4c c0       	rjmp	.+152    	; 0x28cc <Dio_togglePin+0xa8>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    2834:	e8 2f       	mov	r30, r24
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	cf 01       	movw	r24, r30
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	e0 91 c0 06 	lds	r30, 0x06C0	; 0x8006c0 <pstrDio_pinsConfig>
    2846:	f0 91 c1 06 	lds	r31, 0x06C1	; 0x8006c1 <pstrDio_pinsConfig+0x1>
    284a:	e8 0f       	add	r30, r24
    284c:	f9 1f       	adc	r31, r25
    284e:	80 81       	ld	r24, Z
    2850:	81 30       	cpi	r24, 0x01	; 1
    2852:	99 f0       	breq	.+38     	; 0x287a <Dio_togglePin+0x56>
    2854:	28 f0       	brcs	.+10     	; 0x2860 <Dio_togglePin+0x3c>
    2856:	82 30       	cpi	r24, 0x02	; 2
    2858:	e9 f0       	breq	.+58     	; 0x2894 <Dio_togglePin+0x70>
    285a:	83 30       	cpi	r24, 0x03	; 3
    285c:	41 f1       	breq	.+80     	; 0x28ae <Dio_togglePin+0x8a>
    285e:	38 c0       	rjmp	.+112    	; 0x28d0 <Dio_togglePin+0xac>
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2860:	2b b3       	in	r18, 0x1b	; 27
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	01 80       	ldd	r0, Z+1	; 0x01
    2868:	02 c0       	rjmp	.+4      	; 0x286e <Dio_togglePin+0x4a>
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	0a 94       	dec	r0
    2870:	e2 f7       	brpl	.-8      	; 0x286a <Dio_togglePin+0x46>
    2872:	82 27       	eor	r24, r18
    2874:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    2876:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2878:	08 95       	ret
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    287a:	28 b3       	in	r18, 0x18	; 24
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	01 80       	ldd	r0, Z+1	; 0x01
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <Dio_togglePin+0x64>
    2884:	88 0f       	add	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	0a 94       	dec	r0
    288a:	e2 f7       	brpl	.-8      	; 0x2884 <Dio_togglePin+0x60>
    288c:	82 27       	eor	r24, r18
    288e:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    2890:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    2892:	08 95       	ret
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    2894:	25 b3       	in	r18, 0x15	; 21
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	01 80       	ldd	r0, Z+1	; 0x01
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <Dio_togglePin+0x7e>
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	0a 94       	dec	r0
    28a4:	e2 f7       	brpl	.-8      	; 0x289e <Dio_togglePin+0x7a>
    28a6:	82 27       	eor	r24, r18
    28a8:	85 bb       	out	0x15, r24	; 21
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    28aa:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    28ac:	08 95       	ret
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
    28ae:	22 b3       	in	r18, 0x12	; 18
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	01 80       	ldd	r0, Z+1	; 0x01
    28b6:	02 c0       	rjmp	.+4      	; 0x28bc <Dio_togglePin+0x98>
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	0a 94       	dec	r0
    28be:	e2 f7       	brpl	.-8      	; 0x28b8 <Dio_togglePin+0x94>
    28c0:	82 27       	eor	r24, r18
    28c2:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
    28c6:	08 95       	ret
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    28c8:	82 e0       	ldi	r24, 0x02	; 2
    28ca:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    28cc:	86 e0       	ldi	r24, 0x06	; 6
    28ce:	08 95       	ret
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    28d0:	84 e0       	ldi	r24, 0x04	; 4
	}	
	return DIO_STATUS_ERROR_OK;
}
    28d2:	08 95       	ret

000028d4 <Dio_readPin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
    28d4:	85 31       	cpi	r24, 0x15	; 21
    28d6:	08 f0       	brcs	.+2      	; 0x28da <Dio_readPin+0x6>
    28d8:	7c c0       	rjmp	.+248    	; 0x29d2 <Dio_readPin+0xfe>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
    28da:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <u8_Dio_Status>
    28de:	99 23       	and	r25, r25
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <Dio_readPin+0x10>
    28e2:	79 c0       	rjmp	.+242    	; 0x29d6 <Dio_readPin+0x102>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
    28e4:	e8 2f       	mov	r30, r24
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	cf 01       	movw	r24, r30
    28ea:	88 0f       	add	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	e0 91 c0 06 	lds	r30, 0x06C0	; 0x8006c0 <pstrDio_pinsConfig>
    28f6:	f0 91 c1 06 	lds	r31, 0x06C1	; 0x8006c1 <pstrDio_pinsConfig+0x1>
    28fa:	e8 0f       	add	r30, r24
    28fc:	f9 1f       	adc	r31, r25
    28fe:	80 81       	ld	r24, Z
    2900:	81 30       	cpi	r24, 0x01	; 1
    2902:	f9 f0       	breq	.+62     	; 0x2942 <Dio_readPin+0x6e>
    2904:	30 f0       	brcs	.+12     	; 0x2912 <Dio_readPin+0x3e>
    2906:	82 30       	cpi	r24, 0x02	; 2
    2908:	a1 f1       	breq	.+104    	; 0x2972 <Dio_readPin+0x9e>
    290a:	83 30       	cpi	r24, 0x03	; 3
    290c:	09 f4       	brne	.+2      	; 0x2910 <Dio_readPin+0x3c>
    290e:	49 c0       	rjmp	.+146    	; 0x29a2 <Dio_readPin+0xce>
    2910:	64 c0       	rjmp	.+200    	; 0x29da <Dio_readPin+0x106>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2912:	49 b3       	in	r20, 0x19	; 25
    2914:	51 81       	ldd	r21, Z+1	; 0x01
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	9c 01       	movw	r18, r24
    291c:	05 2e       	mov	r0, r21
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <Dio_readPin+0x50>
    2920:	22 0f       	add	r18, r18
    2922:	33 1f       	adc	r19, r19
    2924:	0a 94       	dec	r0
    2926:	e2 f7       	brpl	.-8      	; 0x2920 <Dio_readPin+0x4c>
    2928:	84 2f       	mov	r24, r20
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	82 23       	and	r24, r18
    292e:	93 23       	and	r25, r19
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <Dio_readPin+0x62>
    2932:	95 95       	asr	r25
    2934:	87 95       	ror	r24
    2936:	5a 95       	dec	r21
    2938:	e2 f7       	brpl	.-8      	; 0x2932 <Dio_readPin+0x5e>
    293a:	fb 01       	movw	r30, r22
    293c:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    293e:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2940:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2942:	46 b3       	in	r20, 0x16	; 22
    2944:	51 81       	ldd	r21, Z+1	; 0x01
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	9c 01       	movw	r18, r24
    294c:	05 2e       	mov	r0, r21
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <Dio_readPin+0x80>
    2950:	22 0f       	add	r18, r18
    2952:	33 1f       	adc	r19, r19
    2954:	0a 94       	dec	r0
    2956:	e2 f7       	brpl	.-8      	; 0x2950 <Dio_readPin+0x7c>
    2958:	84 2f       	mov	r24, r20
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	82 23       	and	r24, r18
    295e:	93 23       	and	r25, r19
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <Dio_readPin+0x92>
    2962:	95 95       	asr	r25
    2964:	87 95       	ror	r24
    2966:	5a 95       	dec	r21
    2968:	e2 f7       	brpl	.-8      	; 0x2962 <Dio_readPin+0x8e>
    296a:	fb 01       	movw	r30, r22
    296c:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    296e:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    2970:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    2972:	43 b3       	in	r20, 0x13	; 19
    2974:	51 81       	ldd	r21, Z+1	; 0x01
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	9c 01       	movw	r18, r24
    297c:	05 2e       	mov	r0, r21
    297e:	02 c0       	rjmp	.+4      	; 0x2984 <Dio_readPin+0xb0>
    2980:	22 0f       	add	r18, r18
    2982:	33 1f       	adc	r19, r19
    2984:	0a 94       	dec	r0
    2986:	e2 f7       	brpl	.-8      	; 0x2980 <Dio_readPin+0xac>
    2988:	84 2f       	mov	r24, r20
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	82 23       	and	r24, r18
    298e:	93 23       	and	r25, r19
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <Dio_readPin+0xc2>
    2992:	95 95       	asr	r25
    2994:	87 95       	ror	r24
    2996:	5a 95       	dec	r21
    2998:	e2 f7       	brpl	.-8      	; 0x2992 <Dio_readPin+0xbe>
    299a:	fb 01       	movw	r30, r22
    299c:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    299e:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    29a0:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
    29a2:	40 b3       	in	r20, 0x10	; 16
    29a4:	51 81       	ldd	r21, Z+1	; 0x01
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	9c 01       	movw	r18, r24
    29ac:	05 2e       	mov	r0, r21
    29ae:	02 c0       	rjmp	.+4      	; 0x29b4 <Dio_readPin+0xe0>
    29b0:	22 0f       	add	r18, r18
    29b2:	33 1f       	adc	r19, r19
    29b4:	0a 94       	dec	r0
    29b6:	e2 f7       	brpl	.-8      	; 0x29b0 <Dio_readPin+0xdc>
    29b8:	84 2f       	mov	r24, r20
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	82 23       	and	r24, r18
    29be:	93 23       	and	r25, r19
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <Dio_readPin+0xf2>
    29c2:	95 95       	asr	r25
    29c4:	87 95       	ror	r24
    29c6:	5a 95       	dec	r21
    29c8:	e2 f7       	brpl	.-8      	; 0x29c2 <Dio_readPin+0xee>
    29ca:	fb 01       	movw	r30, r22
    29cc:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
    29d0:	08 95       	ret
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
    29d2:	82 e0       	ldi	r24, 0x02	; 2
    29d4:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
    29d6:	86 e0       	ldi	r24, 0x06	; 6
    29d8:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
    29da:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
    29dc:	08 95       	ret

000029de <__vector_1>:
/*********************************************/
static void (*INT2_CallBackPtr)(void);

void INT2_setCallBack(void (*ptrFun)(void))
{
	INT2_CallBackPtr=ptrFun;
    29de:	1f 92       	push	r1
    29e0:	0f 92       	push	r0
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	0f 92       	push	r0
    29e6:	11 24       	eor	r1, r1
    29e8:	2f 93       	push	r18
    29ea:	3f 93       	push	r19
    29ec:	4f 93       	push	r20
    29ee:	5f 93       	push	r21
    29f0:	6f 93       	push	r22
    29f2:	7f 93       	push	r23
    29f4:	8f 93       	push	r24
    29f6:	9f 93       	push	r25
    29f8:	af 93       	push	r26
    29fa:	bf 93       	push	r27
    29fc:	ef 93       	push	r30
    29fe:	ff 93       	push	r31
    2a00:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <INT0_CallBackPtr>
    2a04:	f0 91 c7 06 	lds	r31, 0x06C7	; 0x8006c7 <INT0_CallBackPtr+0x1>
    2a08:	09 95       	icall
    2a0a:	ff 91       	pop	r31
    2a0c:	ef 91       	pop	r30
    2a0e:	bf 91       	pop	r27
    2a10:	af 91       	pop	r26
    2a12:	9f 91       	pop	r25
    2a14:	8f 91       	pop	r24
    2a16:	7f 91       	pop	r23
    2a18:	6f 91       	pop	r22
    2a1a:	5f 91       	pop	r21
    2a1c:	4f 91       	pop	r20
    2a1e:	3f 91       	pop	r19
    2a20:	2f 91       	pop	r18
    2a22:	0f 90       	pop	r0
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	0f 90       	pop	r0
    2a28:	1f 90       	pop	r1
    2a2a:	18 95       	reti

00002a2c <__vector_2>:
    2a2c:	1f 92       	push	r1
    2a2e:	0f 92       	push	r0
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	0f 92       	push	r0
    2a34:	11 24       	eor	r1, r1
    2a36:	2f 93       	push	r18
    2a38:	3f 93       	push	r19
    2a3a:	4f 93       	push	r20
    2a3c:	5f 93       	push	r21
    2a3e:	6f 93       	push	r22
    2a40:	7f 93       	push	r23
    2a42:	8f 93       	push	r24
    2a44:	9f 93       	push	r25
    2a46:	af 93       	push	r26
    2a48:	bf 93       	push	r27
    2a4a:	ef 93       	push	r30
    2a4c:	ff 93       	push	r31
    2a4e:	e0 91 c4 06 	lds	r30, 0x06C4	; 0x8006c4 <INT1_CallBackPtr>
    2a52:	f0 91 c5 06 	lds	r31, 0x06C5	; 0x8006c5 <INT1_CallBackPtr+0x1>
    2a56:	09 95       	icall
    2a58:	ff 91       	pop	r31
    2a5a:	ef 91       	pop	r30
    2a5c:	bf 91       	pop	r27
    2a5e:	af 91       	pop	r26
    2a60:	9f 91       	pop	r25
    2a62:	8f 91       	pop	r24
    2a64:	7f 91       	pop	r23
    2a66:	6f 91       	pop	r22
    2a68:	5f 91       	pop	r21
    2a6a:	4f 91       	pop	r20
    2a6c:	3f 91       	pop	r19
    2a6e:	2f 91       	pop	r18
    2a70:	0f 90       	pop	r0
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	0f 90       	pop	r0
    2a76:	1f 90       	pop	r1
    2a78:	18 95       	reti

00002a7a <__vector_3>:
}
ISR(INT2_IRQ)
{
    2a7a:	1f 92       	push	r1
    2a7c:	0f 92       	push	r0
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	0f 92       	push	r0
    2a82:	11 24       	eor	r1, r1
    2a84:	2f 93       	push	r18
    2a86:	3f 93       	push	r19
    2a88:	4f 93       	push	r20
    2a8a:	5f 93       	push	r21
    2a8c:	6f 93       	push	r22
    2a8e:	7f 93       	push	r23
    2a90:	8f 93       	push	r24
    2a92:	9f 93       	push	r25
    2a94:	af 93       	push	r26
    2a96:	bf 93       	push	r27
    2a98:	ef 93       	push	r30
    2a9a:	ff 93       	push	r31
	(*INT2_CallBackPtr)();
    2a9c:	e0 91 c2 06 	lds	r30, 0x06C2	; 0x8006c2 <INT2_CallBackPtr>
    2aa0:	f0 91 c3 06 	lds	r31, 0x06C3	; 0x8006c3 <INT2_CallBackPtr+0x1>
    2aa4:	09 95       	icall
}
    2aa6:	ff 91       	pop	r31
    2aa8:	ef 91       	pop	r30
    2aaa:	bf 91       	pop	r27
    2aac:	af 91       	pop	r26
    2aae:	9f 91       	pop	r25
    2ab0:	8f 91       	pop	r24
    2ab2:	7f 91       	pop	r23
    2ab4:	6f 91       	pop	r22
    2ab6:	5f 91       	pop	r21
    2ab8:	4f 91       	pop	r20
    2aba:	3f 91       	pop	r19
    2abc:	2f 91       	pop	r18
    2abe:	0f 90       	pop	r0
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	0f 90       	pop	r0
    2ac4:	1f 90       	pop	r1
    2ac6:	18 95       	reti

00002ac8 <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_EXPIRED;
	return GPT_STATUS_ERROR_OK;
}
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	0e c0       	rjmp	.+28     	; 0x2ae8 <Gpt_ISRHandler+0x20>
    2acc:	29 2f       	mov	r18, r25
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	f9 01       	movw	r30, r18
    2ad2:	ee 0f       	add	r30, r30
    2ad4:	ff 1f       	adc	r31, r31
    2ad6:	2e 0f       	add	r18, r30
    2ad8:	3f 1f       	adc	r19, r31
    2ada:	f9 01       	movw	r30, r18
    2adc:	e8 59       	subi	r30, 0x98	; 152
    2ade:	fa 4f       	sbci	r31, 0xFA	; 250
    2ae0:	20 81       	ld	r18, Z
    2ae2:	28 17       	cp	r18, r24
    2ae4:	19 f0       	breq	.+6      	; 0x2aec <Gpt_ISRHandler+0x24>
    2ae6:	9f 5f       	subi	r25, 0xFF	; 255
    2ae8:	99 23       	and	r25, r25
    2aea:	81 f3       	breq	.-32     	; 0x2acc <Gpt_ISRHandler+0x4>
    2aec:	89 2f       	mov	r24, r25
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	fc 01       	movw	r30, r24
    2af2:	ee 0f       	add	r30, r30
    2af4:	ff 1f       	adc	r31, r31
    2af6:	ee 0f       	add	r30, r30
    2af8:	ff 1f       	adc	r31, r31
    2afa:	e7 53       	subi	r30, 0x37	; 55
    2afc:	f9 4f       	sbci	r31, 0xF9	; 249
    2afe:	40 81       	ld	r20, Z
    2b00:	51 81       	ldd	r21, Z+1	; 0x01
    2b02:	62 81       	ldd	r22, Z+2	; 0x02
    2b04:	73 81       	ldd	r23, Z+3	; 0x03
    2b06:	41 15       	cp	r20, r1
    2b08:	51 05       	cpc	r21, r1
    2b0a:	61 05       	cpc	r22, r1
    2b0c:	71 05       	cpc	r23, r1
    2b0e:	81 f0       	breq	.+32     	; 0x2b30 <Gpt_ISRHandler+0x68>
    2b10:	88 0f       	add	r24, r24
    2b12:	99 1f       	adc	r25, r25
    2b14:	88 0f       	add	r24, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	fc 01       	movw	r30, r24
    2b1a:	e7 53       	subi	r30, 0x37	; 55
    2b1c:	f9 4f       	sbci	r31, 0xF9	; 249
    2b1e:	41 50       	subi	r20, 0x01	; 1
    2b20:	51 09       	sbc	r21, r1
    2b22:	61 09       	sbc	r22, r1
    2b24:	71 09       	sbc	r23, r1
    2b26:	40 83       	st	Z, r20
    2b28:	51 83       	std	Z+1, r21	; 0x01
    2b2a:	62 83       	std	Z+2, r22	; 0x02
    2b2c:	73 83       	std	Z+3, r23	; 0x03
    2b2e:	08 95       	ret
    2b30:	23 b7       	in	r18, 0x33	; 51
    2b32:	2e 7f       	andi	r18, 0xFE	; 254
    2b34:	23 bf       	out	0x33, r18	; 51
    2b36:	23 b7       	in	r18, 0x33	; 51
    2b38:	2d 7f       	andi	r18, 0xFD	; 253
    2b3a:	23 bf       	out	0x33, r18	; 51
    2b3c:	23 b7       	in	r18, 0x33	; 51
    2b3e:	2b 7f       	andi	r18, 0xFB	; 251
    2b40:	23 bf       	out	0x33, r18	; 51
    2b42:	29 b7       	in	r18, 0x39	; 57
    2b44:	2e 7f       	andi	r18, 0xFE	; 254
    2b46:	29 bf       	out	0x39, r18	; 57
    2b48:	fc 01       	movw	r30, r24
    2b4a:	e3 53       	subi	r30, 0x33	; 51
    2b4c:	f9 4f       	sbci	r31, 0xF9	; 249
    2b4e:	24 e0       	ldi	r18, 0x04	; 4
    2b50:	20 83       	st	Z, r18
    2b52:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <Gpt_Timer0_CallBackPtr>
    2b56:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <Gpt_Timer0_CallBackPtr+0x1>
    2b5a:	09 95       	icall
    2b5c:	08 95       	ret

00002b5e <GptInit>:
    2b5e:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <genu_GPTModStatus>
    2b62:	81 30       	cpi	r24, 0x01	; 1
    2b64:	61 f1       	breq	.+88     	; 0x2bbe <GptInit+0x60>
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	24 c0       	rjmp	.+72     	; 0x2bb2 <GptInit+0x54>
    2b6a:	82 2f       	mov	r24, r18
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	fc 01       	movw	r30, r24
    2b70:	ee 0f       	add	r30, r30
    2b72:	ff 1f       	adc	r31, r31
    2b74:	e8 0f       	add	r30, r24
    2b76:	f9 1f       	adc	r31, r25
    2b78:	e8 59       	subi	r30, 0x98	; 152
    2b7a:	fa 4f       	sbci	r31, 0xFA	; 250
    2b7c:	30 81       	ld	r19, Z
    2b7e:	33 23       	and	r19, r19
    2b80:	19 f0       	breq	.+6      	; 0x2b88 <GptInit+0x2a>
    2b82:	33 30       	cpi	r19, 0x03	; 3
    2b84:	f0 f4       	brcc	.+60     	; 0x2bc2 <GptInit+0x64>
    2b86:	0f c0       	rjmp	.+30     	; 0x2ba6 <GptInit+0x48>
    2b88:	fc 01       	movw	r30, r24
    2b8a:	ee 0f       	add	r30, r30
    2b8c:	ff 1f       	adc	r31, r31
    2b8e:	e8 0f       	add	r30, r24
    2b90:	f9 1f       	adc	r31, r25
    2b92:	e8 59       	subi	r30, 0x98	; 152
    2b94:	fa 4f       	sbci	r31, 0xFA	; 250
    2b96:	32 81       	ldd	r19, Z+2	; 0x02
    2b98:	31 11       	cpse	r19, r1
    2b9a:	05 c0       	rjmp	.+10     	; 0x2ba6 <GptInit+0x48>
    2b9c:	13 be       	out	0x33, r1	; 51
    2b9e:	39 b7       	in	r19, 0x39	; 57
    2ba0:	3c 7f       	andi	r19, 0xFC	; 252
    2ba2:	39 bf       	out	0x39, r19	; 57
    2ba4:	12 be       	out	0x32, r1	; 50
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	e3 53       	subi	r30, 0x33	; 51
    2baa:	f9 4f       	sbci	r31, 0xF9	; 249
    2bac:	31 e0       	ldi	r19, 0x01	; 1
    2bae:	30 83       	st	Z, r19
    2bb0:	2f 5f       	subi	r18, 0xFF	; 255
    2bb2:	22 23       	and	r18, r18
    2bb4:	d1 f2       	breq	.-76     	; 0x2b6a <GptInit+0xc>
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <genu_GPTModStatus>
    2bbc:	08 95       	ret
    2bbe:	83 e0       	ldi	r24, 0x03	; 3
    2bc0:	08 95       	ret
    2bc2:	85 e0       	ldi	r24, 0x05	; 5
    2bc4:	08 95       	ret

00002bc6 <GptStart_aSync>:
* Return value: enuGpt_Status_t - Returns the status of the function (if there is any error)
* Description: Function to Start the Timer module counting from 0x00 until (u16_Ticks)
               and generate interrupt when OVF.
************************************************************************************/
enuGpt_Status_t GptStart_aSync(u8Gpt_Channel_t ChannelId, u32Gpt_Value_t u16_Ticks, pfGpt_CallBack_t CallBack)
{
    2bc6:	0f 93       	push	r16
    2bc8:	1f 93       	push	r17
    2bca:	cf 93       	push	r28
    2bcc:	df 93       	push	r29
    2bce:	89 01       	movw	r16, r18
	
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    2bd0:	81 11       	cpse	r24, r1
    2bd2:	4a c0       	rjmp	.+148    	; 0x2c68 <GptStart_aSync+0xa2>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    2bd4:	c8 2f       	mov	r28, r24
    2bd6:	d0 e0       	ldi	r29, 0x00	; 0
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e3 53       	subi	r30, 0x33	; 51
    2bdc:	f9 4f       	sbci	r31, 0xF9	; 249
    2bde:	80 81       	ld	r24, Z
    2be0:	88 23       	and	r24, r24
    2be2:	09 f4       	brne	.+2      	; 0x2be6 <GptStart_aSync+0x20>
    2be4:	43 c0       	rjmp	.+134    	; 0x2c6c <GptStart_aSync+0xa6>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
    2be6:	82 30       	cpi	r24, 0x02	; 2
    2be8:	09 f4       	brne	.+2      	; 0x2bec <GptStart_aSync+0x26>
    2bea:	42 c0       	rjmp	.+132    	; 0x2c70 <GptStart_aSync+0xaa>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u16_remainderCount=0;
	
	enuChannelsState[ChannelId] = GPT_RUNNING;
    2bec:	82 e0       	ldi	r24, 0x02	; 2
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e3 53       	subi	r30, 0x33	; 51
    2bf2:	f9 4f       	sbci	r31, 0xF9	; 249
    2bf4:	80 83       	st	Z, r24
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	ee 0f       	add	r30, r30
    2bfa:	ff 1f       	adc	r31, r31
    2bfc:	ec 0f       	add	r30, r28
    2bfe:	fd 1f       	adc	r31, r29
    2c00:	e8 59       	subi	r30, 0x98	; 152
    2c02:	fa 4f       	sbci	r31, 0xFA	; 250
    2c04:	80 81       	ld	r24, Z
    2c06:	88 23       	and	r24, r24
    2c08:	21 f0       	breq	.+8      	; 0x2c12 <GptStart_aSync+0x4c>
    2c0a:	83 30       	cpi	r24, 0x03	; 3
    2c0c:	98 f1       	brcs	.+102    	; 0x2c74 <GptStart_aSync+0xae>
		case GPT_TIMER_2: /* In case of Timer 2 */
			break;
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    2c0e:	85 e0       	ldi	r24, 0x05	; 5
    2c10:	34 c0       	rjmp	.+104    	; 0x2c7a <GptStart_aSync+0xb4>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Get Number of loops to overflow the timer counter */
			u32_Channels_ISR_Count[ChannelId] = u16_Ticks / GPT_MAX_VALUE_8BIT; //0xFF
    2c12:	cb 01       	movw	r24, r22
    2c14:	ba 01       	movw	r22, r20
    2c16:	2f ef       	ldi	r18, 0xFF	; 255
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	40 e0       	ldi	r20, 0x00	; 0
    2c1c:	50 e0       	ldi	r21, 0x00	; 0
    2c1e:	0e 94 aa 20 	call	0x4154	; 0x4154 <__udivmodsi4>
    2c22:	fe 01       	movw	r30, r28
    2c24:	ee 0f       	add	r30, r30
    2c26:	ff 1f       	adc	r31, r31
    2c28:	ee 0f       	add	r30, r30
    2c2a:	ff 1f       	adc	r31, r31
    2c2c:	e7 53       	subi	r30, 0x37	; 55
    2c2e:	f9 4f       	sbci	r31, 0xF9	; 249
    2c30:	20 83       	st	Z, r18
    2c32:	31 83       	std	Z+1, r19	; 0x01
    2c34:	42 83       	std	Z+2, r20	; 0x02
    2c36:	53 83       	std	Z+3, r21	; 0x03
			/* Get Number of extra ticks (remainder) */
			u16_remainderCount = u16_Ticks % GPT_MAX_VALUE_8BIT;
    2c38:	26 2f       	mov	r18, r22
    2c3a:	37 2f       	mov	r19, r23
			/* Set the interrupt enable */
			REG_SET_BIT(GPT_TIMSK_REG, GPT_TIMSK_TOIE0);
    2c3c:	89 b7       	in	r24, 0x39	; 57
    2c3e:	81 60       	ori	r24, 0x01	; 1
    2c40:	89 bf       	out	0x39, r24	; 57
			/* Set the callback function pointer */
			Gpt_Timer0_CallBackPtr=CallBack;
    2c42:	10 93 cf 06 	sts	0x06CF, r17	; 0x8006cf <Gpt_Timer0_CallBackPtr+0x1>
    2c46:	00 93 ce 06 	sts	0x06CE, r16	; 0x8006ce <Gpt_Timer0_CallBackPtr>
			/* Start the clock with the given pre scaler */
			GPT_TCCR0_REG = (Timers_Configurations[ChannelId].enuClock_Src) << GPT_TCCR0_CS00;
    2c4a:	ce 01       	movw	r24, r28
    2c4c:	88 0f       	add	r24, r24
    2c4e:	99 1f       	adc	r25, r25
    2c50:	c8 0f       	add	r28, r24
    2c52:	d9 1f       	adc	r29, r25
    2c54:	c8 59       	subi	r28, 0x98	; 152
    2c56:	da 4f       	sbci	r29, 0xFA	; 250
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	83 bf       	out	0x33, r24	; 51
			/* Run the remainder ticks */
			/* Put the value of the 0xFF - remainderTicks to start count from it */
			if(u16_remainderCount != 0)
    2c5c:	23 2b       	or	r18, r19
    2c5e:	61 f0       	breq	.+24     	; 0x2c78 <GptStart_aSync+0xb2>
			{
				GPT_TCNT0_REG = 256 - u16_remainderCount;
    2c60:	61 95       	neg	r22
    2c62:	62 bf       	out	0x32, r22	; 50
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	09 c0       	rjmp	.+18     	; 0x2c7a <GptStart_aSync+0xb4>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    2c68:	86 e0       	ldi	r24, 0x06	; 6
    2c6a:	07 c0       	rjmp	.+14     	; 0x2c7a <GptStart_aSync+0xb4>
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    2c6c:	82 e0       	ldi	r24, 0x02	; 2
    2c6e:	05 c0       	rjmp	.+10     	; 0x2c7a <GptStart_aSync+0xb4>
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_BUSY;
    2c70:	87 e0       	ldi	r24, 0x07	; 7
    2c72:	03 c0       	rjmp	.+6      	; 0x2c7a <GptStart_aSync+0xb4>
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	01 c0       	rjmp	.+2      	; 0x2c7a <GptStart_aSync+0xb4>
    2c78:	81 e0       	ldi	r24, 0x01	; 1
}
    2c7a:	df 91       	pop	r29
    2c7c:	cf 91       	pop	r28
    2c7e:	1f 91       	pop	r17
    2c80:	0f 91       	pop	r16
    2c82:	08 95       	ret

00002c84 <GptStop>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
    2c84:	81 11       	cpse	r24, r1
    2c86:	23 c0       	rjmp	.+70     	; 0x2cce <GptStop+0x4a>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	e3 53       	subi	r30, 0x33	; 51
    2c8e:	f9 4f       	sbci	r31, 0xF9	; 249
    2c90:	20 81       	ld	r18, Z
    2c92:	22 23       	and	r18, r18
    2c94:	f1 f0       	breq	.+60     	; 0x2cd2 <GptStop+0x4e>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
    2c96:	22 30       	cpi	r18, 0x02	; 2
    2c98:	f1 f4       	brne	.+60     	; 0x2cd6 <GptStop+0x52>

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	ee 0f       	add	r30, r30
    2c9e:	ff 1f       	adc	r31, r31
    2ca0:	e8 0f       	add	r30, r24
    2ca2:	f9 1f       	adc	r31, r25
    2ca4:	e8 59       	subi	r30, 0x98	; 152
    2ca6:	fa 4f       	sbci	r31, 0xFA	; 250
    2ca8:	20 81       	ld	r18, Z
    2caa:	22 23       	and	r18, r18
    2cac:	19 f0       	breq	.+6      	; 0x2cb4 <GptStop+0x30>
    2cae:	23 30       	cpi	r18, 0x03	; 3
    2cb0:	a0 f4       	brcc	.+40     	; 0x2cda <GptStop+0x56>
    2cb2:	06 c0       	rjmp	.+12     	; 0x2cc0 <GptStop+0x3c>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Stop the clock from the timer */
			GPT_TCCR0_REG &= ~(7 << GPT_TCCR0_CS00);
    2cb4:	23 b7       	in	r18, 0x33	; 51
    2cb6:	28 7f       	andi	r18, 0xF8	; 248
    2cb8:	23 bf       	out	0x33, r18	; 51
			GPT_TIMSK_REG &= ~(3 << GPT_TIMSK_TOIE0);
    2cba:	29 b7       	in	r18, 0x39	; 57
    2cbc:	2c 7f       	andi	r18, 0xFC	; 252
    2cbe:	29 bf       	out	0x39, r18	; 57
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	e3 53       	subi	r30, 0x33	; 51
    2cc4:	f9 4f       	sbci	r31, 0xF9	; 249
    2cc6:	23 e0       	ldi	r18, 0x03	; 3
    2cc8:	20 83       	st	Z, r18
	return GPT_STATUS_ERROR_OK;
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
    2cce:	86 e0       	ldi	r24, 0x06	; 6
    2cd0:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
    2cd2:	82 e0       	ldi	r24, 0x02	; 2
    2cd4:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_STOPPED;
    2cd6:	88 e0       	ldi	r24, 0x08	; 8
    2cd8:	08 95       	ret
		case GPT_TIMER_2: /* In case of Timer 2 */
		break;
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
    2cda:	85 e0       	ldi	r24, 0x05	; 5
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
    2cdc:	08 95       	ret

00002cde <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    2cde:	1f 92       	push	r1
    2ce0:	0f 92       	push	r0
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	0f 92       	push	r0
    2ce6:	11 24       	eor	r1, r1
    2ce8:	2f 93       	push	r18
    2cea:	3f 93       	push	r19
    2cec:	4f 93       	push	r20
    2cee:	5f 93       	push	r21
    2cf0:	6f 93       	push	r22
    2cf2:	7f 93       	push	r23
    2cf4:	8f 93       	push	r24
    2cf6:	9f 93       	push	r25
    2cf8:	af 93       	push	r26
    2cfa:	bf 93       	push	r27
    2cfc:	ef 93       	push	r30
    2cfe:	ff 93       	push	r31
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <Gpt_ISRHandler>
    2d06:	ff 91       	pop	r31
    2d08:	ef 91       	pop	r30
    2d0a:	bf 91       	pop	r27
    2d0c:	af 91       	pop	r26
    2d0e:	9f 91       	pop	r25
    2d10:	8f 91       	pop	r24
    2d12:	7f 91       	pop	r23
    2d14:	6f 91       	pop	r22
    2d16:	5f 91       	pop	r21
    2d18:	4f 91       	pop	r20
    2d1a:	3f 91       	pop	r19
    2d1c:	2f 91       	pop	r18
    2d1e:	0f 90       	pop	r0
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	0f 90       	pop	r0
    2d24:	1f 90       	pop	r1
    2d26:	18 95       	reti

00002d28 <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
    2d28:	1f 92       	push	r1
    2d2a:	0f 92       	push	r0
    2d2c:	0f b6       	in	r0, 0x3f	; 63
    2d2e:	0f 92       	push	r0
    2d30:	11 24       	eor	r1, r1
    2d32:	2f 93       	push	r18
    2d34:	3f 93       	push	r19
    2d36:	4f 93       	push	r20
    2d38:	5f 93       	push	r21
    2d3a:	6f 93       	push	r22
    2d3c:	7f 93       	push	r23
    2d3e:	8f 93       	push	r24
    2d40:	9f 93       	push	r25
    2d42:	af 93       	push	r26
    2d44:	bf 93       	push	r27
    2d46:	ef 93       	push	r30
    2d48:	ff 93       	push	r31
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <Gpt_ISRHandler>
    2d50:	ff 91       	pop	r31
    2d52:	ef 91       	pop	r30
    2d54:	bf 91       	pop	r27
    2d56:	af 91       	pop	r26
    2d58:	9f 91       	pop	r25
    2d5a:	8f 91       	pop	r24
    2d5c:	7f 91       	pop	r23
    2d5e:	6f 91       	pop	r22
    2d60:	5f 91       	pop	r21
    2d62:	4f 91       	pop	r20
    2d64:	3f 91       	pop	r19
    2d66:	2f 91       	pop	r18
    2d68:	0f 90       	pop	r0
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	0f 90       	pop	r0
    2d6e:	1f 90       	pop	r1
    2d70:	18 95       	reti

00002d72 <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2d72:	1f 92       	push	r1
    2d74:	0f 92       	push	r0
    2d76:	0f b6       	in	r0, 0x3f	; 63
    2d78:	0f 92       	push	r0
    2d7a:	11 24       	eor	r1, r1
    2d7c:	2f 93       	push	r18
    2d7e:	3f 93       	push	r19
    2d80:	4f 93       	push	r20
    2d82:	5f 93       	push	r21
    2d84:	6f 93       	push	r22
    2d86:	7f 93       	push	r23
    2d88:	8f 93       	push	r24
    2d8a:	9f 93       	push	r25
    2d8c:	af 93       	push	r26
    2d8e:	bf 93       	push	r27
    2d90:	ef 93       	push	r30
    2d92:	ff 93       	push	r31
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <Gpt_ISRHandler>
    2d9a:	ff 91       	pop	r31
    2d9c:	ef 91       	pop	r30
    2d9e:	bf 91       	pop	r27
    2da0:	af 91       	pop	r26
    2da2:	9f 91       	pop	r25
    2da4:	8f 91       	pop	r24
    2da6:	7f 91       	pop	r23
    2da8:	6f 91       	pop	r22
    2daa:	5f 91       	pop	r21
    2dac:	4f 91       	pop	r20
    2dae:	3f 91       	pop	r19
    2db0:	2f 91       	pop	r18
    2db2:	0f 90       	pop	r0
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	0f 90       	pop	r0
    2db8:	1f 90       	pop	r1
    2dba:	18 95       	reti

00002dbc <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2dbc:	1f 92       	push	r1
    2dbe:	0f 92       	push	r0
    2dc0:	0f b6       	in	r0, 0x3f	; 63
    2dc2:	0f 92       	push	r0
    2dc4:	11 24       	eor	r1, r1
    2dc6:	2f 93       	push	r18
    2dc8:	3f 93       	push	r19
    2dca:	4f 93       	push	r20
    2dcc:	5f 93       	push	r21
    2dce:	6f 93       	push	r22
    2dd0:	7f 93       	push	r23
    2dd2:	8f 93       	push	r24
    2dd4:	9f 93       	push	r25
    2dd6:	af 93       	push	r26
    2dd8:	bf 93       	push	r27
    2dda:	ef 93       	push	r30
    2ddc:	ff 93       	push	r31
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <Gpt_ISRHandler>
    2de4:	ff 91       	pop	r31
    2de6:	ef 91       	pop	r30
    2de8:	bf 91       	pop	r27
    2dea:	af 91       	pop	r26
    2dec:	9f 91       	pop	r25
    2dee:	8f 91       	pop	r24
    2df0:	7f 91       	pop	r23
    2df2:	6f 91       	pop	r22
    2df4:	5f 91       	pop	r21
    2df6:	4f 91       	pop	r20
    2df8:	3f 91       	pop	r19
    2dfa:	2f 91       	pop	r18
    2dfc:	0f 90       	pop	r0
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	0f 90       	pop	r0
    2e02:	1f 90       	pop	r1
    2e04:	18 95       	reti

00002e06 <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2e06:	1f 92       	push	r1
    2e08:	0f 92       	push	r0
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	0f 92       	push	r0
    2e0e:	11 24       	eor	r1, r1
    2e10:	2f 93       	push	r18
    2e12:	3f 93       	push	r19
    2e14:	4f 93       	push	r20
    2e16:	5f 93       	push	r21
    2e18:	6f 93       	push	r22
    2e1a:	7f 93       	push	r23
    2e1c:	8f 93       	push	r24
    2e1e:	9f 93       	push	r25
    2e20:	af 93       	push	r26
    2e22:	bf 93       	push	r27
    2e24:	ef 93       	push	r30
    2e26:	ff 93       	push	r31
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <Gpt_ISRHandler>
    2e2e:	ff 91       	pop	r31
    2e30:	ef 91       	pop	r30
    2e32:	bf 91       	pop	r27
    2e34:	af 91       	pop	r26
    2e36:	9f 91       	pop	r25
    2e38:	8f 91       	pop	r24
    2e3a:	7f 91       	pop	r23
    2e3c:	6f 91       	pop	r22
    2e3e:	5f 91       	pop	r21
    2e40:	4f 91       	pop	r20
    2e42:	3f 91       	pop	r19
    2e44:	2f 91       	pop	r18
    2e46:	0f 90       	pop	r0
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	0f 90       	pop	r0
    2e4c:	1f 90       	pop	r1
    2e4e:	18 95       	reti

00002e50 <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
    2e50:	1f 92       	push	r1
    2e52:	0f 92       	push	r0
    2e54:	0f b6       	in	r0, 0x3f	; 63
    2e56:	0f 92       	push	r0
    2e58:	11 24       	eor	r1, r1
    2e5a:	2f 93       	push	r18
    2e5c:	3f 93       	push	r19
    2e5e:	4f 93       	push	r20
    2e60:	5f 93       	push	r21
    2e62:	6f 93       	push	r22
    2e64:	7f 93       	push	r23
    2e66:	8f 93       	push	r24
    2e68:	9f 93       	push	r25
    2e6a:	af 93       	push	r26
    2e6c:	bf 93       	push	r27
    2e6e:	ef 93       	push	r30
    2e70:	ff 93       	push	r31
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <Gpt_ISRHandler>
    2e78:	ff 91       	pop	r31
    2e7a:	ef 91       	pop	r30
    2e7c:	bf 91       	pop	r27
    2e7e:	af 91       	pop	r26
    2e80:	9f 91       	pop	r25
    2e82:	8f 91       	pop	r24
    2e84:	7f 91       	pop	r23
    2e86:	6f 91       	pop	r22
    2e88:	5f 91       	pop	r21
    2e8a:	4f 91       	pop	r20
    2e8c:	3f 91       	pop	r19
    2e8e:	2f 91       	pop	r18
    2e90:	0f 90       	pop	r0
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	0f 90       	pop	r0
    2e96:	1f 90       	pop	r1
    2e98:	18 95       	reti

00002e9a <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2e9a:	1f 92       	push	r1
    2e9c:	0f 92       	push	r0
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	0f 92       	push	r0
    2ea2:	11 24       	eor	r1, r1
    2ea4:	2f 93       	push	r18
    2ea6:	3f 93       	push	r19
    2ea8:	4f 93       	push	r20
    2eaa:	5f 93       	push	r21
    2eac:	6f 93       	push	r22
    2eae:	7f 93       	push	r23
    2eb0:	8f 93       	push	r24
    2eb2:	9f 93       	push	r25
    2eb4:	af 93       	push	r26
    2eb6:	bf 93       	push	r27
    2eb8:	ef 93       	push	r30
    2eba:	ff 93       	push	r31
    2ebc:	82 e0       	ldi	r24, 0x02	; 2
    2ebe:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <Gpt_ISRHandler>
    2ec2:	ff 91       	pop	r31
    2ec4:	ef 91       	pop	r30
    2ec6:	bf 91       	pop	r27
    2ec8:	af 91       	pop	r26
    2eca:	9f 91       	pop	r25
    2ecc:	8f 91       	pop	r24
    2ece:	7f 91       	pop	r23
    2ed0:	6f 91       	pop	r22
    2ed2:	5f 91       	pop	r21
    2ed4:	4f 91       	pop	r20
    2ed6:	3f 91       	pop	r19
    2ed8:	2f 91       	pop	r18
    2eda:	0f 90       	pop	r0
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	0f 90       	pop	r0
    2ee0:	1f 90       	pop	r1
    2ee2:	18 95       	reti

00002ee4 <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
    2ee4:	1f 92       	push	r1
    2ee6:	0f 92       	push	r0
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	0f 92       	push	r0
    2eec:	11 24       	eor	r1, r1
    2eee:	2f 93       	push	r18
    2ef0:	3f 93       	push	r19
    2ef2:	4f 93       	push	r20
    2ef4:	5f 93       	push	r21
    2ef6:	6f 93       	push	r22
    2ef8:	7f 93       	push	r23
    2efa:	8f 93       	push	r24
    2efc:	9f 93       	push	r25
    2efe:	af 93       	push	r26
    2f00:	bf 93       	push	r27
    2f02:	ef 93       	push	r30
    2f04:	ff 93       	push	r31
    2f06:	82 e0       	ldi	r24, 0x02	; 2
    2f08:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <Gpt_ISRHandler>
    2f0c:	ff 91       	pop	r31
    2f0e:	ef 91       	pop	r30
    2f10:	bf 91       	pop	r27
    2f12:	af 91       	pop	r26
    2f14:	9f 91       	pop	r25
    2f16:	8f 91       	pop	r24
    2f18:	7f 91       	pop	r23
    2f1a:	6f 91       	pop	r22
    2f1c:	5f 91       	pop	r21
    2f1e:	4f 91       	pop	r20
    2f20:	3f 91       	pop	r19
    2f22:	2f 91       	pop	r18
    2f24:	0f 90       	pop	r0
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	0f 90       	pop	r0
    2f2a:	1f 90       	pop	r1
    2f2c:	18 95       	reti

00002f2e <I2C_MasterInit>:
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */		
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
	
}
    2f2e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <genuI2C_Status>
    2f32:	86 30       	cpi	r24, 0x06	; 6
    2f34:	49 f0       	breq	.+18     	; 0x2f48 <I2C_MasterInit+0x1a>
    2f36:	82 e0       	ldi	r24, 0x02	; 2
    2f38:	81 b9       	out	0x01, r24	; 1
    2f3a:	89 e0       	ldi	r24, 0x09	; 9
    2f3c:	80 b9       	out	0x00, r24	; 0
    2f3e:	86 e0       	ldi	r24, 0x06	; 6
    2f40:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <genuI2C_Status>
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	08 95       	ret
    2f48:	87 e0       	ldi	r24, 0x07	; 7
    2f4a:	08 95       	ret

00002f4c <I2C_MasterSendSTART>:
    2f4c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <genuI2C_Status>
    2f50:	86 30       	cpi	r24, 0x06	; 6
    2f52:	59 f4       	brne	.+22     	; 0x2f6a <I2C_MasterSendSTART+0x1e>
    2f54:	84 ea       	ldi	r24, 0xA4	; 164
    2f56:	86 bf       	out	0x36, r24	; 54
    2f58:	06 b6       	in	r0, 0x36	; 54
    2f5a:	07 fe       	sbrs	r0, 7
    2f5c:	fd cf       	rjmp	.-6      	; 0x2f58 <I2C_MasterSendSTART+0xc>
    2f5e:	81 b1       	in	r24, 0x01	; 1
    2f60:	88 7f       	andi	r24, 0xF8	; 248
    2f62:	88 30       	cpi	r24, 0x08	; 8
    2f64:	21 f0       	breq	.+8      	; 0x2f6e <I2C_MasterSendSTART+0x22>
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	08 95       	ret
    2f6a:	85 e0       	ldi	r24, 0x05	; 5
    2f6c:	08 95       	ret
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	08 95       	ret

00002f72 <I2C_MasterSendSlaveAddress>:
    2f72:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <genuI2C_Status>
    2f76:	96 30       	cpi	r25, 0x06	; 6
    2f78:	29 f5       	brne	.+74     	; 0x2fc4 <I2C_MasterSendSlaveAddress+0x52>
    2f7a:	62 30       	cpi	r22, 0x02	; 2
    2f7c:	28 f5       	brcc	.+74     	; 0x2fc8 <I2C_MasterSendSlaveAddress+0x56>
    2f7e:	88 23       	and	r24, r24
    2f80:	2c f1       	brlt	.+74     	; 0x2fcc <I2C_MasterSendSlaveAddress+0x5a>
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	88 0f       	add	r24, r24
    2f86:	99 1f       	adc	r25, r25
    2f88:	68 2b       	or	r22, r24
    2f8a:	63 b9       	out	0x03, r22	; 3
    2f8c:	84 e8       	ldi	r24, 0x84	; 132
    2f8e:	86 bf       	out	0x36, r24	; 54
    2f90:	06 b6       	in	r0, 0x36	; 54
    2f92:	07 fe       	sbrs	r0, 7
    2f94:	fd cf       	rjmp	.-6      	; 0x2f90 <I2C_MasterSendSlaveAddress+0x1e>
    2f96:	81 b1       	in	r24, 0x01	; 1
    2f98:	88 7f       	andi	r24, 0xF8	; 248
    2f9a:	88 33       	cpi	r24, 0x38	; 56
    2f9c:	59 f0       	breq	.+22     	; 0x2fb4 <I2C_MasterSendSlaveAddress+0x42>
    2f9e:	28 f4       	brcc	.+10     	; 0x2faa <I2C_MasterSendSlaveAddress+0x38>
    2fa0:	88 31       	cpi	r24, 0x18	; 24
    2fa2:	b1 f0       	breq	.+44     	; 0x2fd0 <I2C_MasterSendSlaveAddress+0x5e>
    2fa4:	80 32       	cpi	r24, 0x20	; 32
    2fa6:	41 f0       	breq	.+16     	; 0x2fb8 <I2C_MasterSendSlaveAddress+0x46>
    2fa8:	0b c0       	rjmp	.+22     	; 0x2fc0 <I2C_MasterSendSlaveAddress+0x4e>
    2faa:	80 34       	cpi	r24, 0x40	; 64
    2fac:	89 f0       	breq	.+34     	; 0x2fd0 <I2C_MasterSendSlaveAddress+0x5e>
    2fae:	88 34       	cpi	r24, 0x48	; 72
    2fb0:	29 f0       	breq	.+10     	; 0x2fbc <I2C_MasterSendSlaveAddress+0x4a>
    2fb2:	06 c0       	rjmp	.+12     	; 0x2fc0 <I2C_MasterSendSlaveAddress+0x4e>
    2fb4:	88 e3       	ldi	r24, 0x38	; 56
    2fb6:	08 95       	ret
    2fb8:	80 e2       	ldi	r24, 0x20	; 32
    2fba:	08 95       	ret
    2fbc:	88 e4       	ldi	r24, 0x48	; 72
    2fbe:	08 95       	ret
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	08 95       	ret
    2fc4:	85 e0       	ldi	r24, 0x05	; 5
    2fc6:	08 95       	ret
    2fc8:	82 e0       	ldi	r24, 0x02	; 2
    2fca:	08 95       	ret
    2fcc:	83 e0       	ldi	r24, 0x03	; 3
    2fce:	08 95       	ret
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	08 95       	ret

00002fd4 <I2C_MasterSendRepSTART>:
    2fd4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <genuI2C_Status>
    2fd8:	86 30       	cpi	r24, 0x06	; 6
    2fda:	59 f4       	brne	.+22     	; 0x2ff2 <I2C_MasterSendRepSTART+0x1e>
    2fdc:	84 ea       	ldi	r24, 0xA4	; 164
    2fde:	86 bf       	out	0x36, r24	; 54
    2fe0:	06 b6       	in	r0, 0x36	; 54
    2fe2:	07 fe       	sbrs	r0, 7
    2fe4:	fd cf       	rjmp	.-6      	; 0x2fe0 <I2C_MasterSendRepSTART+0xc>
    2fe6:	81 b1       	in	r24, 0x01	; 1
    2fe8:	88 7f       	andi	r24, 0xF8	; 248
    2fea:	80 31       	cpi	r24, 0x10	; 16
    2fec:	21 f0       	breq	.+8      	; 0x2ff6 <I2C_MasterSendRepSTART+0x22>
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	08 95       	ret
    2ff2:	85 e0       	ldi	r24, 0x05	; 5
    2ff4:	08 95       	ret
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	08 95       	ret

00002ffa <I2C_MasterSendSTOP>:
    2ffa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <genuI2C_Status>
    2ffe:	86 30       	cpi	r24, 0x06	; 6
    3000:	39 f4       	brne	.+14     	; 0x3010 <I2C_MasterSendSTOP+0x16>
    3002:	84 e9       	ldi	r24, 0x94	; 148
    3004:	86 bf       	out	0x36, r24	; 54
    3006:	06 b6       	in	r0, 0x36	; 54
    3008:	04 fc       	sbrc	r0, 4
    300a:	fd cf       	rjmp	.-6      	; 0x3006 <I2C_MasterSendSTOP+0xc>
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	08 95       	ret
    3010:	85 e0       	ldi	r24, 0x05	; 5
    3012:	08 95       	ret

00003014 <I2C_MasterSendByte>:
    3014:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <genuI2C_Status>
    3018:	96 30       	cpi	r25, 0x06	; 6
    301a:	69 f4       	brne	.+26     	; 0x3036 <I2C_MasterSendByte+0x22>
    301c:	83 b9       	out	0x03, r24	; 3
    301e:	84 e8       	ldi	r24, 0x84	; 132
    3020:	86 bf       	out	0x36, r24	; 54
    3022:	06 b6       	in	r0, 0x36	; 54
    3024:	07 fe       	sbrs	r0, 7
    3026:	fd cf       	rjmp	.-6      	; 0x3022 <I2C_MasterSendByte+0xe>
    3028:	81 b1       	in	r24, 0x01	; 1
    302a:	88 7f       	andi	r24, 0xF8	; 248
    302c:	88 32       	cpi	r24, 0x28	; 40
    302e:	29 f0       	breq	.+10     	; 0x303a <I2C_MasterSendByte+0x26>
    3030:	80 33       	cpi	r24, 0x30	; 48
    3032:	29 f4       	brne	.+10     	; 0x303e <I2C_MasterSendByte+0x2a>
    3034:	08 95       	ret
    3036:	85 e0       	ldi	r24, 0x05	; 5
    3038:	08 95       	ret
    303a:	88 e2       	ldi	r24, 0x28	; 40
    303c:	08 95       	ret
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	08 95       	ret

00003042 <I2C_MasterReceiveByte_ACK>:
    3042:	fc 01       	movw	r30, r24
    3044:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <genuI2C_Status>
    3048:	96 30       	cpi	r25, 0x06	; 6
    304a:	79 f4       	brne	.+30     	; 0x306a <I2C_MasterReceiveByte_ACK+0x28>
    304c:	30 97       	sbiw	r30, 0x00	; 0
    304e:	79 f0       	breq	.+30     	; 0x306e <I2C_MasterReceiveByte_ACK+0x2c>
    3050:	84 ec       	ldi	r24, 0xC4	; 196
    3052:	86 bf       	out	0x36, r24	; 54
    3054:	06 b6       	in	r0, 0x36	; 54
    3056:	07 fe       	sbrs	r0, 7
    3058:	fd cf       	rjmp	.-6      	; 0x3054 <I2C_MasterReceiveByte_ACK+0x12>
    305a:	81 b1       	in	r24, 0x01	; 1
    305c:	88 7f       	andi	r24, 0xF8	; 248
    305e:	80 35       	cpi	r24, 0x50	; 80
    3060:	41 f4       	brne	.+16     	; 0x3072 <I2C_MasterReceiveByte_ACK+0x30>
    3062:	83 b1       	in	r24, 0x03	; 3
    3064:	80 83       	st	Z, r24
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	08 95       	ret
    306a:	85 e0       	ldi	r24, 0x05	; 5
    306c:	08 95       	ret
    306e:	84 e0       	ldi	r24, 0x04	; 4
    3070:	08 95       	ret
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	08 95       	ret

00003076 <I2C_MasterReceiveByte_NACK>:
    3076:	fc 01       	movw	r30, r24
    3078:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <genuI2C_Status>
    307c:	96 30       	cpi	r25, 0x06	; 6
    307e:	79 f4       	brne	.+30     	; 0x309e <I2C_MasterReceiveByte_NACK+0x28>
    3080:	30 97       	sbiw	r30, 0x00	; 0
    3082:	79 f0       	breq	.+30     	; 0x30a2 <I2C_MasterReceiveByte_NACK+0x2c>
    3084:	84 e8       	ldi	r24, 0x84	; 132
    3086:	86 bf       	out	0x36, r24	; 54
    3088:	06 b6       	in	r0, 0x36	; 54
    308a:	07 fe       	sbrs	r0, 7
    308c:	fd cf       	rjmp	.-6      	; 0x3088 <I2C_MasterReceiveByte_NACK+0x12>
    308e:	81 b1       	in	r24, 0x01	; 1
    3090:	88 7f       	andi	r24, 0xF8	; 248
    3092:	88 35       	cpi	r24, 0x58	; 88
    3094:	41 f4       	brne	.+16     	; 0x30a6 <I2C_MasterReceiveByte_NACK+0x30>
    3096:	83 b1       	in	r24, 0x03	; 3
    3098:	80 83       	st	Z, r24
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	08 95       	ret
    309e:	85 e0       	ldi	r24, 0x05	; 5
    30a0:	08 95       	ret
    30a2:	84 e0       	ldi	r24, 0x04	; 4
    30a4:	08 95       	ret
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	08 95       	ret

000030aa <I2C_MasterReceiveGeneral>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send multiple data bytes and receive multiple data bytes with repeated start.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveGeneral(uint8_t u8_slaveAddress, uint8_t * pu8_source, uint16_t u16_sourceLen, \
										uint8_t * pu8_destination, uint16_t u16_destinationLen)
{
    30aa:	7f 92       	push	r7
    30ac:	8f 92       	push	r8
    30ae:	9f 92       	push	r9
    30b0:	af 92       	push	r10
    30b2:	bf 92       	push	r11
    30b4:	cf 92       	push	r12
    30b6:	df 92       	push	r13
    30b8:	ef 92       	push	r14
    30ba:	ff 92       	push	r15
    30bc:	0f 93       	push	r16
    30be:	1f 93       	push	r17
    30c0:	cf 93       	push	r28
    30c2:	df 93       	push	r29
    30c4:	78 2e       	mov	r7, r24
    30c6:	eb 01       	movw	r28, r22
    30c8:	7a 01       	movw	r14, r20
    30ca:	69 01       	movw	r12, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    30cc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <genuI2C_Status>
    30d0:	86 30       	cpi	r24, 0x06	; 6
    30d2:	09 f0       	breq	.+2      	; 0x30d6 <I2C_MasterReceiveGeneral+0x2c>
    30d4:	47 c0       	rjmp	.+142    	; 0x3164 <I2C_MasterReceiveGeneral+0xba>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
    30d6:	20 97       	sbiw	r28, 0x00	; 0
    30d8:	09 f4       	brne	.+2      	; 0x30dc <I2C_MasterReceiveGeneral+0x32>
    30da:	46 c0       	rjmp	.+140    	; 0x3168 <I2C_MasterReceiveGeneral+0xbe>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
    30dc:	23 2b       	or	r18, r19
    30de:	09 f4       	brne	.+2      	; 0x30e2 <I2C_MasterReceiveGeneral+0x38>
    30e0:	45 c0       	rjmp	.+138    	; 0x316c <I2C_MasterReceiveGeneral+0xc2>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    30e2:	77 20       	and	r7, r7
    30e4:	0c f4       	brge	.+2      	; 0x30e8 <I2C_MasterReceiveGeneral+0x3e>
    30e6:	44 c0       	rjmp	.+136    	; 0x3170 <I2C_MasterReceiveGeneral+0xc6>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    30e8:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <I2C_MasterSendSTART>
    30ec:	88 23       	and	r24, r24
    30ee:	09 f4       	brne	.+2      	; 0x30f2 <I2C_MasterReceiveGeneral+0x48>
    30f0:	4a c0       	rjmp	.+148    	; 0x3186 <I2C_MasterReceiveGeneral+0xdc>
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    30f2:	60 e0       	ldi	r22, 0x00	; 0
    30f4:	87 2d       	mov	r24, r7
    30f6:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MasterSendSlaveAddress>
    30fa:	81 30       	cpi	r24, 0x01	; 1
    30fc:	d9 f5       	brne	.+118    	; 0x3174 <I2C_MasterReceiveGeneral+0xca>
    30fe:	0b c0       	rjmp	.+22     	; 0x3116 <I2C_MasterReceiveGeneral+0x6c>
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    3100:	4e 01       	movw	r8, r28
    3102:	8f ef       	ldi	r24, 0xFF	; 255
    3104:	88 1a       	sub	r8, r24
    3106:	98 0a       	sbc	r9, r24
    3108:	88 81       	ld	r24, Y
    310a:	0e 94 0a 18 	call	0x3014	; 0x3014 <I2C_MasterSendByte>
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    310e:	75 01       	movw	r14, r10
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    3110:	88 23       	and	r24, r24
    3112:	c9 f1       	breq	.+114    	; 0x3186 <I2C_MasterReceiveGeneral+0xdc>
    3114:	e4 01       	movw	r28, r8
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and Send Byte by Byte */
	while (u16_sourceLen--)
    3116:	57 01       	movw	r10, r14
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	a8 1a       	sub	r10, r24
    311c:	b1 08       	sbc	r11, r1
    311e:	ef 28       	or	r14, r15
    3120:	79 f7       	brne	.-34     	; 0x3100 <I2C_MasterReceiveGeneral+0x56>
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
    3122:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <I2C_MasterSendRepSTART>
    3126:	81 30       	cpi	r24, 0x01	; 1
    3128:	39 f5       	brne	.+78     	; 0x3178 <I2C_MasterReceiveGeneral+0xce>
		return I2C_STATUS_ERROR_NOK;
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    312a:	61 e0       	ldi	r22, 0x01	; 1
    312c:	87 2d       	mov	r24, r7
    312e:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MasterSendSlaveAddress>
    3132:	81 30       	cpi	r24, 0x01	; 1
    3134:	19 f5       	brne	.+70     	; 0x317c <I2C_MasterReceiveGeneral+0xd2>
    3136:	08 c0       	rjmp	.+16     	; 0x3148 <I2C_MasterReceiveGeneral+0x9e>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
    3138:	e6 01       	movw	r28, r12
    313a:	21 96       	adiw	r28, 0x01	; 1
    313c:	c6 01       	movw	r24, r12
    313e:	0e 94 21 18 	call	0x3042	; 0x3042 <I2C_MasterReceiveByte_ACK>
    3142:	81 30       	cpi	r24, 0x01	; 1
    3144:	e9 f4       	brne	.+58     	; 0x3180 <I2C_MasterReceiveGeneral+0xd6>
    3146:	6e 01       	movw	r12, r28
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
    3148:	01 50       	subi	r16, 0x01	; 1
    314a:	11 09       	sbc	r17, r1
    314c:	a9 f7       	brne	.-22     	; 0x3138 <I2C_MasterReceiveGeneral+0x8e>
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
    314e:	c6 01       	movw	r24, r12
    3150:	0e 94 3b 18 	call	0x3076	; 0x3076 <I2C_MasterReceiveByte_NACK>
    3154:	81 30       	cpi	r24, 0x01	; 1
    3156:	b1 f4       	brne	.+44     	; 0x3184 <I2C_MasterReceiveGeneral+0xda>
		return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
    3158:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <I2C_MasterSendSTOP>
    315c:	81 30       	cpi	r24, 0x01	; 1
    315e:	99 f0       	breq	.+38     	; 0x3186 <I2C_MasterReceiveGeneral+0xdc>
		return I2C_STATUS_ERROR_NOK;
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	11 c0       	rjmp	.+34     	; 0x3186 <I2C_MasterReceiveGeneral+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    3164:	85 e0       	ldi	r24, 0x05	; 5
    3166:	0f c0       	rjmp	.+30     	; 0x3186 <I2C_MasterReceiveGeneral+0xdc>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_source == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    3168:	84 e0       	ldi	r24, 0x04	; 4
    316a:	0d c0       	rjmp	.+26     	; 0x3186 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_destination == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    316c:	84 e0       	ldi	r24, 0x04	; 4
    316e:	0b c0       	rjmp	.+22     	; 0x3186 <I2C_MasterReceiveGeneral+0xdc>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    3170:	83 e0       	ldi	r24, 0x03	; 3
    3172:	09 c0       	rjmp	.+18     	; 0x3186 <I2C_MasterReceiveGeneral+0xdc>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Sened the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	07 c0       	rjmp	.+14     	; 0x3186 <I2C_MasterReceiveGeneral+0xdc>
	while (u16_sourceLen--)
	if (I2C_MasterSendByte(*pu8_source++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	
	/* Initiate a Repeated Start Bit */
	if(I2C_MasterSendRepSTART() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	05 c0       	rjmp	.+10     	; 0x3186 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Sened the Slave Address Along with Read Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_READ) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	03 c0       	rjmp	.+6      	; 0x3186 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Loop for data length and receive Byte by Byte and report back with Ack */
	while (--u16_destinationLen)
		if(I2C_MasterReceiveByte_ACK(pu8_destination++) != I2C_STATUS_ERROR_OK)
			return I2C_STATUS_ERROR_NOK;
    3180:	80 e0       	ldi	r24, 0x00	; 0
    3182:	01 c0       	rjmp	.+2      	; 0x3186 <I2C_MasterReceiveGeneral+0xdc>
	
	/* Receive the last byte and report back with NACK */
	if(I2C_MasterReceiveByte_NACK(pu8_destination) != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
    3184:	80 e0       	ldi	r24, 0x00	; 0
	
	if(I2C_MasterSendSTOP() != I2C_STATUS_ERROR_OK)
		return I2C_STATUS_ERROR_NOK;
	
	return I2C_STATUS_ERROR_OK;
}
    3186:	df 91       	pop	r29
    3188:	cf 91       	pop	r28
    318a:	1f 91       	pop	r17
    318c:	0f 91       	pop	r16
    318e:	ff 90       	pop	r15
    3190:	ef 90       	pop	r14
    3192:	df 90       	pop	r13
    3194:	cf 90       	pop	r12
    3196:	bf 90       	pop	r11
    3198:	af 90       	pop	r10
    319a:	9f 90       	pop	r9
    319c:	8f 90       	pop	r8
    319e:	7f 90       	pop	r7
    31a0:	08 95       	ret

000031a2 <I2C_MasterSendToLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send Multiple data bytes to a specific location in slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterSendToLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
										 uint8_t * pu8_data, uint16_t u16_dataLen)
{
    31a2:	bf 92       	push	r11
    31a4:	cf 92       	push	r12
    31a6:	df 92       	push	r13
    31a8:	ef 92       	push	r14
    31aa:	ff 92       	push	r15
    31ac:	0f 93       	push	r16
    31ae:	1f 93       	push	r17
    31b0:	cf 93       	push	r28
    31b2:	df 93       	push	r29
    31b4:	18 2f       	mov	r17, r24
    31b6:	06 2f       	mov	r16, r22
    31b8:	ea 01       	movw	r28, r20
    31ba:	79 01       	movw	r14, r18
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
    31bc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <genuI2C_Status>
    31c0:	86 30       	cpi	r24, 0x06	; 6
    31c2:	59 f5       	brne	.+86     	; 0x321a <I2C_MasterSendToLocation+0x78>
	{
		return I2C_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
    31c4:	20 97       	sbiw	r28, 0x00	; 0
    31c6:	59 f1       	breq	.+86     	; 0x321e <I2C_MasterSendToLocation+0x7c>
	{
		return I2C_STATUS_NULL_ARGUMENT;
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
    31c8:	11 23       	and	r17, r17
    31ca:	5c f1       	brlt	.+86     	; 0x3222 <I2C_MasterSendToLocation+0x80>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    31cc:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <I2C_MasterSendSTART>
    31d0:	88 23       	and	r24, r24
    31d2:	61 f1       	breq	.+88     	; 0x322c <I2C_MasterSendToLocation+0x8a>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    31d4:	60 e0       	ldi	r22, 0x00	; 0
    31d6:	81 2f       	mov	r24, r17
    31d8:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MasterSendSlaveAddress>
    31dc:	b8 2e       	mov	r11, r24
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	b8 12       	cpse	r11, r24
    31e2:	21 c0       	rjmp	.+66     	; 0x3226 <I2C_MasterSendToLocation+0x84>
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    31e4:	80 2f       	mov	r24, r16
    31e6:	0e 94 0a 18 	call	0x3014	; 0x3014 <I2C_MasterSendByte>
    31ea:	81 11       	cpse	r24, r1
    31ec:	0c c0       	rjmp	.+24     	; 0x3206 <I2C_MasterSendToLocation+0x64>
    31ee:	1e c0       	rjmp	.+60     	; 0x322c <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    31f0:	6e 01       	movw	r12, r28
    31f2:	8f ef       	ldi	r24, 0xFF	; 255
    31f4:	c8 1a       	sub	r12, r24
    31f6:	d8 0a       	sbc	r13, r24
    31f8:	88 81       	ld	r24, Y
    31fa:	0e 94 0a 18 	call	0x3014	; 0x3014 <I2C_MasterSendByte>
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    31fe:	78 01       	movw	r14, r16
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    3200:	88 23       	and	r24, r24
    3202:	a1 f0       	breq	.+40     	; 0x322c <I2C_MasterSendToLocation+0x8a>
    3204:	e6 01       	movw	r28, r12
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
	/* Send the first Byte (Location or Address or Command) */
	if (I2C_MasterSendByte(u8_location) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
    3206:	87 01       	movw	r16, r14
    3208:	01 50       	subi	r16, 0x01	; 1
    320a:	11 09       	sbc	r17, r1
    320c:	ef 28       	or	r14, r15
    320e:	81 f7       	brne	.-32     	; 0x31f0 <I2C_MasterSendToLocation+0x4e>
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
    3210:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <I2C_MasterSendSTOP>
    3214:	81 11       	cpse	r24, r1
    3216:	09 c0       	rjmp	.+18     	; 0x322a <I2C_MasterSendToLocation+0x88>
    3218:	09 c0       	rjmp	.+18     	; 0x322c <I2C_MasterSendToLocation+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the I2C module is not initialized */
	if (I2C_STATUS_INIT != genuI2C_Status)
	{
		return I2C_STATUS_NOT_INIT;
    321a:	85 e0       	ldi	r24, 0x05	; 5
    321c:	07 c0       	rjmp	.+14     	; 0x322c <I2C_MasterSendToLocation+0x8a>
	}else{/*Nothing to here*/}
	/* Check if Argument is NULL PTR */
	if (pu8_data == NULL_PTR)
	{
		return I2C_STATUS_NULL_ARGUMENT;
    321e:	84 e0       	ldi	r24, 0x04	; 4
    3220:	05 c0       	rjmp	.+10     	; 0x322c <I2C_MasterSendToLocation+0x8a>
	}
	else{/*Nothing to here*/}
	/* Check if the slave address is out of range */
	if(u8_slaveAddress > 0x7F)
	{
		return I2C_STATUS_INVALID_SLV_ADDR;
    3222:	83 e0       	ldi	r24, 0x03	; 3
    3224:	03 c0       	rjmp	.+6      	; 0x322c <I2C_MasterSendToLocation+0x8a>
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initiate Start Bit */
	if (I2C_MasterSendSTART() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send the Slave Address Along with Write Command */
	if (I2C_MasterSendSlaveAddress(u8_slaveAddress, I2C_WRITE) != I2C_STATUS_ERROR_OK)	return I2C_STATUS_ERROR_NOK;
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	01 c0       	rjmp	.+2      	; 0x322c <I2C_MasterSendToLocation+0x8a>
	/* Loop for data length and send Byte by Byte */
	while (u16_dataLen--)
		if (I2C_MasterSendByte(*pu8_data++) == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	/* Send a Stop Bit */
	if (I2C_MasterSendSTOP() == I2C_STATUS_ERROR_NOK)	return I2C_STATUS_ERROR_NOK;
	return I2C_STATUS_ERROR_OK;
    322a:	8b 2d       	mov	r24, r11
}
    322c:	df 91       	pop	r29
    322e:	cf 91       	pop	r28
    3230:	1f 91       	pop	r17
    3232:	0f 91       	pop	r16
    3234:	ff 90       	pop	r15
    3236:	ef 90       	pop	r14
    3238:	df 90       	pop	r13
    323a:	cf 90       	pop	r12
    323c:	bf 90       	pop	r11
    323e:	08 95       	ret

00003240 <I2C_MasterReceiveFromLocation>:
* Return value: enuI2C_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Receive Multiple bytes from a specific location in the slave.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuI2C_Status_t I2C_MasterReceiveFromLocation(uint8_t u8_slaveAddress, uint8_t u8_location ,\
												uint8_t * pu8_data, uint16_t u16_dataLen)
{
    3240:	0f 93       	push	r16
    3242:	1f 93       	push	r17
    3244:	cf 93       	push	r28
    3246:	df 93       	push	r29
    3248:	1f 92       	push	r1
    324a:	cd b7       	in	r28, 0x3d	; 61
    324c:	de b7       	in	r29, 0x3e	; 62
    324e:	69 83       	std	Y+1, r22	; 0x01
	return I2C_MasterReceiveGeneral(u8_slaveAddress, &u8_location, 1, pu8_data, u16_dataLen);
    3250:	89 01       	movw	r16, r18
    3252:	9a 01       	movw	r18, r20
    3254:	41 e0       	ldi	r20, 0x01	; 1
    3256:	50 e0       	ldi	r21, 0x00	; 0
    3258:	be 01       	movw	r22, r28
    325a:	6f 5f       	subi	r22, 0xFF	; 255
    325c:	7f 4f       	sbci	r23, 0xFF	; 255
    325e:	0e 94 55 18 	call	0x30aa	; 0x30aa <I2C_MasterReceiveGeneral>
}
    3262:	0f 90       	pop	r0
    3264:	df 91       	pop	r29
    3266:	cf 91       	pop	r28
    3268:	1f 91       	pop	r17
    326a:	0f 91       	pop	r16
    326c:	08 95       	ret

0000326e <Spi_init>:
			
			
uint8_t Spi_DataRegister(void)
{
	return SPI_SPDR_REG;
}
    326e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <genuSpi_Status>
    3272:	87 30       	cpi	r24, 0x07	; 7
    3274:	b9 f0       	breq	.+46     	; 0x32a4 <Spi_init+0x36>
    3276:	87 b3       	in	r24, 0x17	; 23
    3278:	80 64       	ori	r24, 0x40	; 64
    327a:	87 bb       	out	0x17, r24	; 23
    327c:	87 b3       	in	r24, 0x17	; 23
    327e:	8f 7d       	andi	r24, 0xDF	; 223
    3280:	87 bb       	out	0x17, r24	; 23
    3282:	87 b3       	in	r24, 0x17	; 23
    3284:	8f 7e       	andi	r24, 0xEF	; 239
    3286:	87 bb       	out	0x17, r24	; 23
    3288:	87 b3       	in	r24, 0x17	; 23
    328a:	8f 77       	andi	r24, 0x7F	; 127
    328c:	87 bb       	out	0x17, r24	; 23
    328e:	8d b1       	in	r24, 0x0d	; 13
    3290:	8f 7e       	andi	r24, 0xEF	; 239
    3292:	8d b9       	out	0x0d, r24	; 13
    3294:	8d b1       	in	r24, 0x0d	; 13
    3296:	80 64       	ori	r24, 0x40	; 64
    3298:	8d b9       	out	0x0d, r24	; 13
    329a:	87 e0       	ldi	r24, 0x07	; 7
    329c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <genuSpi_Status>
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	08 95       	ret
    32a4:	88 e0       	ldi	r24, 0x08	; 8
    32a6:	08 95       	ret

000032a8 <Spi_SlaveReceiveByte>:
    32a8:	fc 01       	movw	r30, r24
    32aa:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <genuSpi_Status>
    32ae:	97 30       	cpi	r25, 0x07	; 7
    32b0:	41 f4       	brne	.+16     	; 0x32c2 <Spi_SlaveReceiveByte+0x1a>
    32b2:	30 97       	sbiw	r30, 0x00	; 0
    32b4:	41 f0       	breq	.+16     	; 0x32c6 <Spi_SlaveReceiveByte+0x1e>
    32b6:	77 9b       	sbis	0x0e, 7	; 14
    32b8:	fe cf       	rjmp	.-4      	; 0x32b6 <Spi_SlaveReceiveByte+0xe>
    32ba:	8f b1       	in	r24, 0x0f	; 15
    32bc:	80 83       	st	Z, r24
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	08 95       	ret
    32c2:	86 e0       	ldi	r24, 0x06	; 6
    32c4:	08 95       	ret
    32c6:	85 e0       	ldi	r24, 0x05	; 5
    32c8:	08 95       	ret

000032ca <Spi_SlaveReceivePacket>:
    32ca:	cf 92       	push	r12
    32cc:	df 92       	push	r13
    32ce:	ef 92       	push	r14
    32d0:	ff 92       	push	r15
    32d2:	1f 93       	push	r17
    32d4:	cf 93       	push	r28
    32d6:	df 93       	push	r29
    32d8:	6c 01       	movw	r12, r24
    32da:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <genuSpi_Status>
    32de:	97 30       	cpi	r25, 0x07	; 7
    32e0:	b1 f4       	brne	.+44     	; 0x330e <Spi_SlaveReceivePacket+0x44>
    32e2:	7b 01       	movw	r14, r22
    32e4:	10 e0       	ldi	r17, 0x00	; 0
    32e6:	0c c0       	rjmp	.+24     	; 0x3300 <Spi_SlaveReceivePacket+0x36>
    32e8:	e6 01       	movw	r28, r12
    32ea:	c8 0f       	add	r28, r24
    32ec:	d9 1f       	adc	r29, r25
    32ee:	ce 01       	movw	r24, r28
    32f0:	0e 94 54 19 	call	0x32a8	; 0x32a8 <Spi_SlaveReceiveByte>
    32f4:	81 30       	cpi	r24, 0x01	; 1
    32f6:	69 f4       	brne	.+26     	; 0x3312 <Spi_SlaveReceivePacket+0x48>
    32f8:	98 81       	ld	r25, Y
    32fa:	99 23       	and	r25, r25
    32fc:	59 f0       	breq	.+22     	; 0x3314 <Spi_SlaveReceivePacket+0x4a>
    32fe:	1f 5f       	subi	r17, 0xFF	; 255
    3300:	81 2f       	mov	r24, r17
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	8e 15       	cp	r24, r14
    3306:	9f 05       	cpc	r25, r15
    3308:	78 f3       	brcs	.-34     	; 0x32e8 <Spi_SlaveReceivePacket+0x1e>
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	03 c0       	rjmp	.+6      	; 0x3314 <Spi_SlaveReceivePacket+0x4a>
    330e:	86 e0       	ldi	r24, 0x06	; 6
    3310:	01 c0       	rjmp	.+2      	; 0x3314 <Spi_SlaveReceivePacket+0x4a>
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	df 91       	pop	r29
    3316:	cf 91       	pop	r28
    3318:	1f 91       	pop	r17
    331a:	ff 90       	pop	r15
    331c:	ef 90       	pop	r14
    331e:	df 90       	pop	r13
    3320:	cf 90       	pop	r12
    3322:	08 95       	ret

00003324 <__vector_12>:


    3324:	1f 92       	push	r1
    3326:	0f 92       	push	r0
    3328:	0f b6       	in	r0, 0x3f	; 63
    332a:	0f 92       	push	r0
    332c:	11 24       	eor	r1, r1
    332e:	2f 93       	push	r18
    3330:	3f 93       	push	r19
    3332:	4f 93       	push	r20
    3334:	5f 93       	push	r21
    3336:	6f 93       	push	r22
    3338:	7f 93       	push	r23
    333a:	8f 93       	push	r24
    333c:	9f 93       	push	r25
    333e:	af 93       	push	r26
    3340:	bf 93       	push	r27
    3342:	ef 93       	push	r30
    3344:	ff 93       	push	r31
    3346:	e0 91 d0 06 	lds	r30, 0x06D0	; 0x8006d0 <SPI_STC_CallBackPtr>
    334a:	f0 91 d1 06 	lds	r31, 0x06D1	; 0x8006d1 <SPI_STC_CallBackPtr+0x1>
    334e:	09 95       	icall
    3350:	ff 91       	pop	r31
    3352:	ef 91       	pop	r30
    3354:	bf 91       	pop	r27
    3356:	af 91       	pop	r26
    3358:	9f 91       	pop	r25
    335a:	8f 91       	pop	r24
    335c:	7f 91       	pop	r23
    335e:	6f 91       	pop	r22
    3360:	5f 91       	pop	r21
    3362:	4f 91       	pop	r20
    3364:	3f 91       	pop	r19
    3366:	2f 91       	pop	r18
    3368:	0f 90       	pop	r0
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	0f 90       	pop	r0
    336e:	1f 90       	pop	r1
    3370:	18 95       	reti

00003372 <stringLength>:
	for (s8_loopIndex=length-2; s8_loopIndex>=0; s8_loopIndex--)
	{
		*pu32_Num += (pu8_String[s8_loopIndex]-'0') *digit;
		digit*=10;
	}
}
    3372:	ac 01       	movw	r20, r24
    3374:	80 e0       	ldi	r24, 0x00	; 0
    3376:	01 c0       	rjmp	.+2      	; 0x337a <stringLength+0x8>
    3378:	8f 5f       	subi	r24, 0xFF	; 255
    337a:	fa 01       	movw	r30, r20
    337c:	e8 0f       	add	r30, r24
    337e:	f1 1d       	adc	r31, r1
    3380:	20 81       	ld	r18, Z
    3382:	21 11       	cpse	r18, r1
    3384:	f9 cf       	rjmp	.-14     	; 0x3378 <stringLength+0x6>
    3386:	8f 5f       	subi	r24, 0xFF	; 255
    3388:	08 95       	ret

0000338a <stringCompare>:
    338a:	ff 92       	push	r15
    338c:	0f 93       	push	r16
    338e:	1f 93       	push	r17
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
    3394:	8c 01       	movw	r16, r24
    3396:	eb 01       	movw	r28, r22
    3398:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
    339c:	f8 2e       	mov	r15, r24
    339e:	ce 01       	movw	r24, r28
    33a0:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
    33a4:	8f 15       	cp	r24, r15
    33a6:	b8 f0       	brcs	.+46     	; 0x33d6 <stringCompare+0x4c>
    33a8:	f8 16       	cp	r15, r24
    33aa:	b8 f0       	brcs	.+46     	; 0x33da <stringCompare+0x50>
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	09 c0       	rjmp	.+18     	; 0x33c2 <stringCompare+0x38>
    33b0:	fe 01       	movw	r30, r28
    33b2:	e8 0f       	add	r30, r24
    33b4:	f9 1f       	adc	r31, r25
    33b6:	80 81       	ld	r24, Z
    33b8:	82 17       	cp	r24, r18
    33ba:	88 f0       	brcs	.+34     	; 0x33de <stringCompare+0x54>
    33bc:	28 17       	cp	r18, r24
    33be:	88 f0       	brcs	.+34     	; 0x33e2 <stringCompare+0x58>
    33c0:	3f 5f       	subi	r19, 0xFF	; 255
    33c2:	83 2f       	mov	r24, r19
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	f8 01       	movw	r30, r16
    33c8:	e8 0f       	add	r30, r24
    33ca:	f9 1f       	adc	r31, r25
    33cc:	20 81       	ld	r18, Z
    33ce:	21 11       	cpse	r18, r1
    33d0:	ef cf       	rjmp	.-34     	; 0x33b0 <stringCompare+0x26>
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	07 c0       	rjmp	.+14     	; 0x33e4 <stringCompare+0x5a>
    33d6:	82 e0       	ldi	r24, 0x02	; 2
    33d8:	05 c0       	rjmp	.+10     	; 0x33e4 <stringCompare+0x5a>
    33da:	83 e0       	ldi	r24, 0x03	; 3
    33dc:	03 c0       	rjmp	.+6      	; 0x33e4 <stringCompare+0x5a>
    33de:	82 e0       	ldi	r24, 0x02	; 2
    33e0:	01 c0       	rjmp	.+2      	; 0x33e4 <stringCompare+0x5a>
    33e2:	83 e0       	ldi	r24, 0x03	; 3
    33e4:	df 91       	pop	r29
    33e6:	cf 91       	pop	r28
    33e8:	1f 91       	pop	r17
    33ea:	0f 91       	pop	r16
    33ec:	ff 90       	pop	r15
    33ee:	08 95       	ret

000033f0 <EmptyString>:
    33f0:	ac 01       	movw	r20, r24
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	02 c0       	rjmp	.+4      	; 0x33fa <EmptyString+0xa>
    33f6:	9f 5f       	subi	r25, 0xFF	; 255
    33f8:	10 82       	st	Z, r1
    33fa:	fa 01       	movw	r30, r20
    33fc:	e9 0f       	add	r30, r25
    33fe:	f1 1d       	adc	r31, r1
    3400:	20 81       	ld	r18, Z
    3402:	21 11       	cpse	r18, r1
    3404:	f8 cf       	rjmp	.-16     	; 0x33f6 <EmptyString+0x6>
    3406:	08 95       	ret

00003408 <stringCopy>:
    3408:	dc 01       	movw	r26, r24
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	05 c0       	rjmp	.+10     	; 0x3418 <stringCopy+0x10>
    340e:	fb 01       	movw	r30, r22
    3410:	e2 0f       	add	r30, r18
    3412:	f3 1f       	adc	r31, r19
    3414:	40 83       	st	Z, r20
    3416:	9f 5f       	subi	r25, 0xFF	; 255
    3418:	29 2f       	mov	r18, r25
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	fd 01       	movw	r30, r26
    341e:	e2 0f       	add	r30, r18
    3420:	f3 1f       	adc	r31, r19
    3422:	40 81       	ld	r20, Z
    3424:	41 11       	cpse	r20, r1
    3426:	f3 cf       	rjmp	.-26     	; 0x340e <stringCopy+0x6>
    3428:	08 95       	ret

0000342a <integerToString>:
    342a:	0f 93       	push	r16
    342c:	1f 93       	push	r17
    342e:	cf 93       	push	r28
    3430:	df 93       	push	r29
    3432:	fc 01       	movw	r30, r24
    3434:	8b 01       	movw	r16, r22
    3436:	41 30       	cpi	r20, 0x01	; 1
    3438:	09 f0       	breq	.+2      	; 0x343c <integerToString+0x12>
    343a:	40 c0       	rjmp	.+128    	; 0x34bc <integerToString+0x92>
    343c:	c0 e0       	ldi	r28, 0x00	; 0
    343e:	d0 e0       	ldi	r29, 0x00	; 0
    3440:	6a e0       	ldi	r22, 0x0A	; 10
    3442:	70 e0       	ldi	r23, 0x00	; 0
    3444:	0e 94 96 20 	call	0x412c	; 0x412c <__divmodhi4>
    3448:	cb 01       	movw	r24, r22
    344a:	00 97       	sbiw	r24, 0x00	; 0
    344c:	11 f0       	breq	.+4      	; 0x3452 <integerToString+0x28>
    344e:	21 96       	adiw	r28, 0x01	; 1
    3450:	f7 cf       	rjmp	.-18     	; 0x3440 <integerToString+0x16>
    3452:	de 01       	movw	r26, r28
    3454:	11 96       	adiw	r26, 0x01	; 1
    3456:	a0 0f       	add	r26, r16
    3458:	b1 1f       	adc	r27, r17
    345a:	1c 92       	st	X, r1
    345c:	2d c0       	rjmp	.+90     	; 0x34b8 <integerToString+0x8e>
    345e:	a8 01       	movw	r20, r16
    3460:	4c 0f       	add	r20, r28
    3462:	5d 1f       	adc	r21, r29
    3464:	9f 01       	movw	r18, r30
    3466:	ad ec       	ldi	r26, 0xCD	; 205
    3468:	bc ec       	ldi	r27, 0xCC	; 204
    346a:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <__umulhisi3>
    346e:	96 95       	lsr	r25
    3470:	87 95       	ror	r24
    3472:	96 95       	lsr	r25
    3474:	87 95       	ror	r24
    3476:	96 95       	lsr	r25
    3478:	87 95       	ror	r24
    347a:	9c 01       	movw	r18, r24
    347c:	22 0f       	add	r18, r18
    347e:	33 1f       	adc	r19, r19
    3480:	88 0f       	add	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	88 0f       	add	r24, r24
    3486:	99 1f       	adc	r25, r25
    3488:	88 0f       	add	r24, r24
    348a:	99 1f       	adc	r25, r25
    348c:	82 0f       	add	r24, r18
    348e:	93 1f       	adc	r25, r19
    3490:	9f 01       	movw	r18, r30
    3492:	28 1b       	sub	r18, r24
    3494:	39 0b       	sbc	r19, r25
    3496:	c9 01       	movw	r24, r18
    3498:	80 5d       	subi	r24, 0xD0	; 208
    349a:	da 01       	movw	r26, r20
    349c:	8c 93       	st	X, r24
    349e:	9f 01       	movw	r18, r30
    34a0:	ad ec       	ldi	r26, 0xCD	; 205
    34a2:	bc ec       	ldi	r27, 0xCC	; 204
    34a4:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <__umulhisi3>
    34a8:	fc 01       	movw	r30, r24
    34aa:	f6 95       	lsr	r31
    34ac:	e7 95       	ror	r30
    34ae:	f6 95       	lsr	r31
    34b0:	e7 95       	ror	r30
    34b2:	f6 95       	lsr	r31
    34b4:	e7 95       	ror	r30
    34b6:	21 97       	sbiw	r28, 0x01	; 1
    34b8:	30 97       	sbiw	r30, 0x00	; 0
    34ba:	89 f6       	brne	.-94     	; 0x345e <integerToString+0x34>
    34bc:	df 91       	pop	r29
    34be:	cf 91       	pop	r28
    34c0:	1f 91       	pop	r17
    34c2:	0f 91       	pop	r16
    34c4:	08 95       	ret

000034c6 <stringToFloat>:

float32_t stringToFloat(uint8_t* string)
{
    34c6:	8f 92       	push	r8
    34c8:	9f 92       	push	r9
    34ca:	af 92       	push	r10
    34cc:	bf 92       	push	r11
    34ce:	cf 92       	push	r12
    34d0:	df 92       	push	r13
    34d2:	ef 92       	push	r14
    34d4:	ff 92       	push	r15
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
    34de:	ec 01       	movw	r28, r24
	uint8_t strLen = stringLength(string)-1;
    34e0:	0e 94 b9 19 	call	0x3372	; 0x3372 <stringLength>
    34e4:	0f ef       	ldi	r16, 0xFF	; 255
    34e6:	08 0f       	add	r16, r24
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
    34e8:	c1 2c       	mov	r12, r1
    34ea:	d1 2c       	mov	r13, r1
    34ec:	76 01       	movw	r14, r12
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    34ee:	10 e0       	ldi	r17, 0x00	; 0
    34f0:	1e c0       	rjmp	.+60     	; 0x352e <stringToFloat+0x68>
	{
		if(string[u8_loopIndex] == '.')
    34f2:	fe 01       	movw	r30, r28
    34f4:	e1 0f       	add	r30, r17
    34f6:	f1 1d       	adc	r31, r1
    34f8:	60 81       	ld	r22, Z
    34fa:	6e 32       	cpi	r22, 0x2E	; 46
    34fc:	11 f4       	brne	.+4      	; 0x3502 <stringToFloat+0x3c>
		{
			u8_loopIndex++;
    34fe:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    3500:	18 c0       	rjmp	.+48     	; 0x3532 <stringToFloat+0x6c>
		}
		f32_num += string[u8_loopIndex] - '0';
    3502:	70 e0       	ldi	r23, 0x00	; 0
    3504:	60 53       	subi	r22, 0x30	; 48
    3506:	71 09       	sbc	r23, r1
    3508:	07 2e       	mov	r0, r23
    350a:	00 0c       	add	r0, r0
    350c:	88 0b       	sbc	r24, r24
    350e:	99 0b       	sbc	r25, r25
    3510:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__floatsisf>
    3514:	a7 01       	movw	r20, r14
    3516:	96 01       	movw	r18, r12
    3518:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__addsf3>
		f32_num *= 10;
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	40 e2       	ldi	r20, 0x20	; 32
    3522:	51 e4       	ldi	r21, 0x41	; 65
    3524:	0e 94 29 20 	call	0x4052	; 0x4052 <__mulsf3>
    3528:	6b 01       	movw	r12, r22
    352a:	7c 01       	movw	r14, r24
{
	uint8_t strLen = stringLength(string)-1;
	uint8_t u8_loopIndex=0;
	float32_t f32_digit = 1;
	float32_t f32_num = 0;
	for(u8_loopIndex=0 ;u8_loopIndex<strLen; u8_loopIndex++)
    352c:	1f 5f       	subi	r17, 0xFF	; 255
    352e:	10 17       	cp	r17, r16
    3530:	00 f3       	brcs	.-64     	; 0x34f2 <stringToFloat+0x2c>
			break;
		}
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	40 e2       	ldi	r20, 0x20	; 32
    3538:	51 e4       	ldi	r21, 0x41	; 65
    353a:	c7 01       	movw	r24, r14
    353c:	b6 01       	movw	r22, r12
    353e:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__divsf3>
    3542:	4b 01       	movw	r8, r22
    3544:	5c 01       	movw	r10, r24
	f32_digit = 1;
    3546:	0f 2e       	mov	r0, r31
    3548:	c1 2c       	mov	r12, r1
    354a:	d1 2c       	mov	r13, r1
    354c:	f0 e8       	ldi	r31, 0x80	; 128
    354e:	ef 2e       	mov	r14, r31
    3550:	ff e3       	ldi	r31, 0x3F	; 63
    3552:	ff 2e       	mov	r15, r31
    3554:	f0 2d       	mov	r31, r0
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    3556:	24 c0       	rjmp	.+72     	; 0x35a0 <stringToFloat+0xda>
	{
		f32_digit/=10;
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	40 e2       	ldi	r20, 0x20	; 32
    355e:	51 e4       	ldi	r21, 0x41	; 65
    3560:	c7 01       	movw	r24, r14
    3562:	b6 01       	movw	r22, r12
    3564:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__divsf3>
    3568:	6b 01       	movw	r12, r22
    356a:	7c 01       	movw	r14, r24
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
    356c:	fe 01       	movw	r30, r28
    356e:	e1 0f       	add	r30, r17
    3570:	f1 1d       	adc	r31, r1
    3572:	60 81       	ld	r22, Z
    3574:	70 e0       	ldi	r23, 0x00	; 0
    3576:	60 53       	subi	r22, 0x30	; 48
    3578:	71 09       	sbc	r23, r1
    357a:	07 2e       	mov	r0, r23
    357c:	00 0c       	add	r0, r0
    357e:	88 0b       	sbc	r24, r24
    3580:	99 0b       	sbc	r25, r25
    3582:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__floatsisf>
    3586:	a7 01       	movw	r20, r14
    3588:	96 01       	movw	r18, r12
    358a:	0e 94 29 20 	call	0x4052	; 0x4052 <__mulsf3>
    358e:	9b 01       	movw	r18, r22
    3590:	ac 01       	movw	r20, r24
    3592:	c5 01       	movw	r24, r10
    3594:	b4 01       	movw	r22, r8
    3596:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__addsf3>
    359a:	4b 01       	movw	r8, r22
    359c:	5c 01       	movw	r10, r24
		f32_num += string[u8_loopIndex] - '0';
		f32_num *= 10;
	}
	f32_num /= 10;
	f32_digit = 1;
	for(;u8_loopIndex<strLen; u8_loopIndex++)
    359e:	1f 5f       	subi	r17, 0xFF	; 255
    35a0:	10 17       	cp	r17, r16
    35a2:	d0 f2       	brcs	.-76     	; 0x3558 <stringToFloat+0x92>
	{
		f32_digit/=10;
		f32_num += (string[u8_loopIndex] - '0')*f32_digit;
	}
	return f32_num;
}
    35a4:	c5 01       	movw	r24, r10
    35a6:	b4 01       	movw	r22, r8
    35a8:	df 91       	pop	r29
    35aa:	cf 91       	pop	r28
    35ac:	1f 91       	pop	r17
    35ae:	0f 91       	pop	r16
    35b0:	ff 90       	pop	r15
    35b2:	ef 90       	pop	r14
    35b4:	df 90       	pop	r13
    35b6:	cf 90       	pop	r12
    35b8:	bf 90       	pop	r11
    35ba:	af 90       	pop	r10
    35bc:	9f 90       	pop	r9
    35be:	8f 90       	pop	r8
    35c0:	08 95       	ret

000035c2 <floatToString>:

void floatToString(float32_t f32_num, uint8_t* string)
{
    35c2:	8f 92       	push	r8
    35c4:	9f 92       	push	r9
    35c6:	af 92       	push	r10
    35c8:	bf 92       	push	r11
    35ca:	cf 92       	push	r12
    35cc:	df 92       	push	r13
    35ce:	ef 92       	push	r14
    35d0:	ff 92       	push	r15
    35d2:	0f 93       	push	r16
    35d4:	1f 93       	push	r17
    35d6:	cf 93       	push	r28
    35d8:	df 93       	push	r29
    35da:	4b 01       	movw	r8, r22
    35dc:	5c 01       	movw	r10, r24
    35de:	8a 01       	movw	r16, r20
	uint32_t u32_num = (uint32_t)f32_num;
    35e0:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <__fixunssfsi>
    35e4:	c6 2e       	mov	r12, r22
    35e6:	d7 2e       	mov	r13, r23
    35e8:	e8 2e       	mov	r14, r24
    35ea:	f9 2e       	mov	r15, r25
    35ec:	26 2f       	mov	r18, r22
    35ee:	37 2f       	mov	r19, r23
    35f0:	48 2f       	mov	r20, r24
    35f2:	59 2f       	mov	r21, r25
	uint8_t u8_digitCount=0;
    35f4:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    35f6:	09 c0       	rjmp	.+18     	; 0x360a <floatToString+0x48>
	{
		u32_num/=10;
    35f8:	ca 01       	movw	r24, r20
    35fa:	b9 01       	movw	r22, r18
    35fc:	2a e0       	ldi	r18, 0x0A	; 10
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	40 e0       	ldi	r20, 0x00	; 0
    3602:	50 e0       	ldi	r21, 0x00	; 0
    3604:	0e 94 aa 20 	call	0x4154	; 0x4154 <__udivmodsi4>
		u8_digitCount++;
    3608:	df 5f       	subi	r29, 0xFF	; 255
{
	uint32_t u32_num = (uint32_t)f32_num;
	uint8_t u8_digitCount=0;
	uint8_t u8_indexDot=0;
	uint32_t temp = 0;
	while(u32_num !=0)
    360a:	21 15       	cp	r18, r1
    360c:	31 05       	cpc	r19, r1
    360e:	41 05       	cpc	r20, r1
    3610:	51 05       	cpc	r21, r1
    3612:	91 f7       	brne	.-28     	; 0x35f8 <floatToString+0x36>
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
    3614:	cf ef       	ldi	r28, 0xFF	; 255
    3616:	cd 0f       	add	r28, r29
	while(u32_num !=0)
	{
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
    3618:	6c 2d       	mov	r22, r12
    361a:	7d 2d       	mov	r23, r13
    361c:	8e 2d       	mov	r24, r14
    361e:	9f 2d       	mov	r25, r15
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    3620:	14 c0       	rjmp	.+40     	; 0x364a <floatToString+0x88>
	{
		temp = (u32_num % 10)+ '0';
    3622:	2a e0       	ldi	r18, 0x0A	; 10
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	40 e0       	ldi	r20, 0x00	; 0
    3628:	50 e0       	ldi	r21, 0x00	; 0
    362a:	0e 94 aa 20 	call	0x4154	; 0x4154 <__udivmodsi4>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	c0 96       	adiw	r24, 0x30	; 48
    3634:	a1 1d       	adc	r26, r1
    3636:	b1 1d       	adc	r27, r1
		string[u8_digitCount--] = temp;
    3638:	f8 01       	movw	r30, r16
    363a:	ec 0f       	add	r30, r28
    363c:	f1 1d       	adc	r31, r1
    363e:	80 83       	st	Z, r24
		u32_num /= 10;
    3640:	62 2f       	mov	r22, r18
    3642:	73 2f       	mov	r23, r19
    3644:	84 2f       	mov	r24, r20
    3646:	95 2f       	mov	r25, r21
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
	{
		temp = (u32_num % 10)+ '0';
		string[u8_digitCount--] = temp;
    3648:	c1 50       	subi	r28, 0x01	; 1
		u32_num/=10;
		u8_digitCount++;
	}
	u32_num = (uint32_t)f32_num;
	u8_indexDot = u8_digitCount--;
	while (u32_num)
    364a:	61 15       	cp	r22, r1
    364c:	71 05       	cpc	r23, r1
    364e:	81 05       	cpc	r24, r1
    3650:	91 05       	cpc	r25, r1
    3652:	39 f7       	brne	.-50     	; 0x3622 <floatToString+0x60>
		string[u8_digitCount--] = temp;
		u32_num /= 10;

	}
	u32_num = (uint32_t)f32_num;
	f32_num -= u32_num;
    3654:	6c 2d       	mov	r22, r12
    3656:	7d 2d       	mov	r23, r13
    3658:	8e 2d       	mov	r24, r14
    365a:	9f 2d       	mov	r25, r15
    365c:	0e 94 77 1f 	call	0x3eee	; 0x3eee <__floatunsisf>
    3660:	9b 01       	movw	r18, r22
    3662:	ac 01       	movw	r20, r24
    3664:	c5 01       	movw	r24, r10
    3666:	b4 01       	movw	r22, r8
    3668:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__subsf3>
	u32_num = f32_num*10;
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	40 e2       	ldi	r20, 0x20	; 32
    3672:	51 e4       	ldi	r21, 0x41	; 65
    3674:	0e 94 29 20 	call	0x4052	; 0x4052 <__mulsf3>
    3678:	6b 01       	movw	r12, r22
    367a:	7c 01       	movw	r14, r24
    367c:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <__fixunssfsi>
	string[u8_indexDot++] = '.';
    3680:	21 e0       	ldi	r18, 0x01	; 1
    3682:	2d 0f       	add	r18, r29
    3684:	f8 01       	movw	r30, r16
    3686:	ed 0f       	add	r30, r29
    3688:	f1 1d       	adc	r31, r1
    368a:	3e e2       	ldi	r19, 0x2E	; 46
    368c:	30 83       	st	Z, r19
	string[u8_indexDot++] = u32_num + '0';
    368e:	de 5f       	subi	r29, 0xFE	; 254
    3690:	f8 01       	movw	r30, r16
    3692:	e2 0f       	add	r30, r18
    3694:	f1 1d       	adc	r31, r1
    3696:	20 e3       	ldi	r18, 0x30	; 48
    3698:	26 0f       	add	r18, r22
    369a:	20 83       	st	Z, r18
	f32_num *=10;
	f32_num -= u32_num;
    369c:	0e 94 77 1f 	call	0x3eee	; 0x3eee <__floatunsisf>
    36a0:	9b 01       	movw	r18, r22
    36a2:	ac 01       	movw	r20, r24
    36a4:	c7 01       	movw	r24, r14
    36a6:	b6 01       	movw	r22, r12
    36a8:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__subsf3>
	u32_num = f32_num*10;
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	40 e2       	ldi	r20, 0x20	; 32
    36b2:	51 e4       	ldi	r21, 0x41	; 65
    36b4:	0e 94 29 20 	call	0x4052	; 0x4052 <__mulsf3>
    36b8:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <__fixunssfsi>
	string[u8_indexDot] = u32_num + '0';
    36bc:	f8 01       	movw	r30, r16
    36be:	ed 0f       	add	r30, r29
    36c0:	f1 1d       	adc	r31, r1
    36c2:	60 5d       	subi	r22, 0xD0	; 208
    36c4:	60 83       	st	Z, r22
    36c6:	df 91       	pop	r29
    36c8:	cf 91       	pop	r28
    36ca:	1f 91       	pop	r17
    36cc:	0f 91       	pop	r16
    36ce:	ff 90       	pop	r15
    36d0:	ef 90       	pop	r14
    36d2:	df 90       	pop	r13
    36d4:	cf 90       	pop	r12
    36d6:	bf 90       	pop	r11
    36d8:	af 90       	pop	r10
    36da:	9f 90       	pop	r9
    36dc:	8f 90       	pop	r8
    36de:	08 95       	ret

000036e0 <waveFunction>:
* Parameters (out): None
* Return value: None
* Description: Function to be called inside the timer's ISR.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
void waveFunction(void)
{
    36e0:	0f 93       	push	r16
    36e2:	1f 93       	push	r17
	/* Toggle the Pin of the PWM Channel */
	if(Dio_togglePin(SWPwm_Channels[gu8_currentPwmChannel].u8_DioChannelID) != DIO_STATUS_ERROR_OK)
    36e4:	e0 91 d3 06 	lds	r30, 0x06D3	; 0x8006d3 <gu8_currentPwmChannel>
    36e8:	f0 e0       	ldi	r31, 0x00	; 0
    36ea:	ee 0f       	add	r30, r30
    36ec:	ff 1f       	adc	r31, r31
    36ee:	e5 59       	subi	r30, 0x95	; 149
    36f0:	fa 4f       	sbci	r31, 0xFA	; 250
    36f2:	80 81       	ld	r24, Z
    36f4:	0e 94 12 14 	call	0x2824	; 0x2824 <Dio_togglePin>
    36f8:	81 30       	cpi	r24, 0x01	; 1
    36fa:	09 f0       	breq	.+2      	; 0x36fe <waveFunction+0x1e>
    36fc:	76 c0       	rjmp	.+236    	; 0x37ea <waveFunction+0x10a>
		return;
	/* Check if the PWM Channel is still in Running State */
	if (gstr_ChannelsData[gu8_currentPwmChannel].enuChannelState == SWPWM_RUNNING)
    36fe:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <gu8_currentPwmChannel>
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	9c 01       	movw	r18, r24
    3706:	22 0f       	add	r18, r18
    3708:	33 1f       	adc	r19, r19
    370a:	f9 01       	movw	r30, r18
    370c:	ee 0f       	add	r30, r30
    370e:	ff 1f       	adc	r31, r31
    3710:	ee 0f       	add	r30, r30
    3712:	ff 1f       	adc	r31, r31
    3714:	ee 0f       	add	r30, r30
    3716:	ff 1f       	adc	r31, r31
    3718:	e2 1b       	sub	r30, r18
    371a:	f3 0b       	sbc	r31, r19
    371c:	ec 52       	subi	r30, 0x2C	; 44
    371e:	f9 4f       	sbci	r31, 0xF9	; 249
    3720:	25 85       	ldd	r18, Z+13	; 0x0d
    3722:	22 30       	cpi	r18, 0x02	; 2
    3724:	09 f0       	breq	.+2      	; 0x3728 <waveFunction+0x48>
    3726:	61 c0       	rjmp	.+194    	; 0x37ea <waveFunction+0x10a>
	{
		/* Start the Timer again with the new ticks assigned */
		if(GptStart_aSync(SWPwm_Channels[gu8_currentPwmChannel].u8_GptChannelID,\
    3728:	88 0f       	add	r24, r24
    372a:	99 1f       	adc	r25, r25
    372c:	fc 01       	movw	r30, r24
    372e:	ee 0f       	add	r30, r30
    3730:	ff 1f       	adc	r31, r31
    3732:	ee 0f       	add	r30, r30
    3734:	ff 1f       	adc	r31, r31
    3736:	ee 0f       	add	r30, r30
    3738:	ff 1f       	adc	r31, r31
    373a:	e8 1b       	sub	r30, r24
    373c:	f9 0b       	sbc	r31, r25
    373e:	ec 52       	subi	r30, 0x2C	; 44
    3740:	f9 4f       	sbci	r31, 0xF9	; 249
    3742:	41 85       	ldd	r20, Z+9	; 0x09
    3744:	52 85       	ldd	r21, Z+10	; 0x0a
    3746:	63 85       	ldd	r22, Z+11	; 0x0b
    3748:	74 85       	ldd	r23, Z+12	; 0x0c
    374a:	fc 01       	movw	r30, r24
    374c:	e5 59       	subi	r30, 0x95	; 149
    374e:	fa 4f       	sbci	r31, 0xFA	; 250
    3750:	20 e7       	ldi	r18, 0x70	; 112
    3752:	3b e1       	ldi	r19, 0x1B	; 27
    3754:	81 81       	ldd	r24, Z+1	; 0x01
    3756:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <GptStart_aSync>
    375a:	81 30       	cpi	r24, 0x01	; 1
    375c:	09 f0       	breq	.+2      	; 0x3760 <waveFunction+0x80>
    375e:	45 c0       	rjmp	.+138    	; 0x37ea <waveFunction+0x10a>
		                  gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks,\
						   waveFunction) != GPT_STATUS_ERROR_OK)	return;
		
		/* Replace the next ticks to be counted between ONTicks and OFFTicks*/
		if(gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks == gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks)
    3760:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <gu8_currentPwmChannel>
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	9c 01       	movw	r18, r24
    3768:	22 0f       	add	r18, r18
    376a:	33 1f       	adc	r19, r19
    376c:	f9 01       	movw	r30, r18
    376e:	ee 0f       	add	r30, r30
    3770:	ff 1f       	adc	r31, r31
    3772:	ee 0f       	add	r30, r30
    3774:	ff 1f       	adc	r31, r31
    3776:	ee 0f       	add	r30, r30
    3778:	ff 1f       	adc	r31, r31
    377a:	e2 1b       	sub	r30, r18
    377c:	f3 0b       	sbc	r31, r19
    377e:	ec 52       	subi	r30, 0x2C	; 44
    3780:	f9 4f       	sbci	r31, 0xF9	; 249
    3782:	01 85       	ldd	r16, Z+9	; 0x09
    3784:	12 85       	ldd	r17, Z+10	; 0x0a
    3786:	23 85       	ldd	r18, Z+11	; 0x0b
    3788:	34 85       	ldd	r19, Z+12	; 0x0c
    378a:	45 81       	ldd	r20, Z+5	; 0x05
    378c:	56 81       	ldd	r21, Z+6	; 0x06
    378e:	67 81       	ldd	r22, Z+7	; 0x07
    3790:	70 85       	ldd	r23, Z+8	; 0x08
    3792:	04 17       	cp	r16, r20
    3794:	15 07       	cpc	r17, r21
    3796:	26 07       	cpc	r18, r22
    3798:	37 07       	cpc	r19, r23
    379a:	b1 f4       	brne	.+44     	; 0x37c8 <waveFunction+0xe8>
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_ONTicks;
    379c:	88 0f       	add	r24, r24
    379e:	99 1f       	adc	r25, r25
    37a0:	fc 01       	movw	r30, r24
    37a2:	ee 0f       	add	r30, r30
    37a4:	ff 1f       	adc	r31, r31
    37a6:	ee 0f       	add	r30, r30
    37a8:	ff 1f       	adc	r31, r31
    37aa:	ee 0f       	add	r30, r30
    37ac:	ff 1f       	adc	r31, r31
    37ae:	e8 1b       	sub	r30, r24
    37b0:	f9 0b       	sbc	r31, r25
    37b2:	ec 52       	subi	r30, 0x2C	; 44
    37b4:	f9 4f       	sbci	r31, 0xF9	; 249
    37b6:	81 81       	ldd	r24, Z+1	; 0x01
    37b8:	92 81       	ldd	r25, Z+2	; 0x02
    37ba:	a3 81       	ldd	r26, Z+3	; 0x03
    37bc:	b4 81       	ldd	r27, Z+4	; 0x04
    37be:	81 87       	std	Z+9, r24	; 0x09
    37c0:	92 87       	std	Z+10, r25	; 0x0a
    37c2:	a3 87       	std	Z+11, r26	; 0x0b
    37c4:	b4 87       	std	Z+12, r27	; 0x0c
    37c6:	11 c0       	rjmp	.+34     	; 0x37ea <waveFunction+0x10a>
		else
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks;
    37c8:	88 0f       	add	r24, r24
    37ca:	99 1f       	adc	r25, r25
    37cc:	fc 01       	movw	r30, r24
    37ce:	ee 0f       	add	r30, r30
    37d0:	ff 1f       	adc	r31, r31
    37d2:	ee 0f       	add	r30, r30
    37d4:	ff 1f       	adc	r31, r31
    37d6:	ee 0f       	add	r30, r30
    37d8:	ff 1f       	adc	r31, r31
    37da:	e8 1b       	sub	r30, r24
    37dc:	f9 0b       	sbc	r31, r25
    37de:	ec 52       	subi	r30, 0x2C	; 44
    37e0:	f9 4f       	sbci	r31, 0xF9	; 249
    37e2:	41 87       	std	Z+9, r20	; 0x09
    37e4:	52 87       	std	Z+10, r21	; 0x0a
    37e6:	63 87       	std	Z+11, r22	; 0x0b
    37e8:	74 87       	std	Z+12, r23	; 0x0c
	}
}
    37ea:	1f 91       	pop	r17
    37ec:	0f 91       	pop	r16
    37ee:	08 95       	ret

000037f0 <SWPwm_Init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
    37f0:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <genu_SWPwmModStatus>
    37f4:	81 30       	cpi	r24, 0x01	; 1
    37f6:	91 f0       	breq	.+36     	; 0x381c <SWPwm_Init+0x2c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
    37f8:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <GptInit>
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
    37fc:	81 30       	cpi	r24, 0x01	; 1
    37fe:	11 f0       	breq	.+4      	; 0x3804 <SWPwm_Init+0x14>
    3800:	83 30       	cpi	r24, 0x03	; 3
    3802:	71 f4       	brne	.+28     	; 0x3820 <SWPwm_Init+0x30>
		return SWPWM_STATUS_ERROR_NOK;
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
    3804:	82 e9       	ldi	r24, 0x92	; 146
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	0e 94 8b 12 	call	0x2516	; 0x2516 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
    380c:	81 30       	cpi	r24, 0x01	; 1
    380e:	11 f0       	breq	.+4      	; 0x3814 <SWPwm_Init+0x24>
    3810:	87 30       	cpi	r24, 0x07	; 7
    3812:	41 f4       	brne	.+16     	; 0x3824 <SWPwm_Init+0x34>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <genu_SWPwmModStatus>
	return SWPWM_STATUS_ERROR_OK;
    381a:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_ERROR_NOK;
    381c:	80 e0       	ldi	r24, 0x00	; 0
    381e:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
		return SWPWM_STATUS_ERROR_NOK;
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	08 95       	ret
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return SWPWM_STATUS_ERROR_NOK;
    3824:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
	return SWPWM_STATUS_ERROR_OK;
}
    3826:	08 95       	ret

00003828 <SWPwm_Start>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Start(u8SWPwm_Channel_t u8_ChannelID, uint32_t u32_Freq, uint8_t u8_DutyCycle)
{
    3828:	4f 92       	push	r4
    382a:	5f 92       	push	r5
    382c:	6f 92       	push	r6
    382e:	7f 92       	push	r7
    3830:	8f 92       	push	r8
    3832:	9f 92       	push	r9
    3834:	af 92       	push	r10
    3836:	bf 92       	push	r11
    3838:	cf 92       	push	r12
    383a:	df 92       	push	r13
    383c:	ef 92       	push	r14
    383e:	ff 92       	push	r15
    3840:	0f 93       	push	r16
    3842:	1f 93       	push	r17
    3844:	cf 93       	push	r28
    3846:	df 93       	push	r29
    3848:	00 d0       	rcall	.+0      	; 0x384a <SWPwm_Start+0x22>
    384a:	00 d0       	rcall	.+0      	; 0x384c <SWPwm_Start+0x24>
    384c:	00 d0       	rcall	.+0      	; 0x384e <SWPwm_Start+0x26>
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    3852:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <genu_SWPwmModStatus>
    3856:	91 30       	cpi	r25, 0x01	; 1
    3858:	09 f0       	breq	.+2      	; 0x385c <SWPwm_Start+0x34>
    385a:	f2 c0       	rjmp	.+484    	; 0x3a40 <SWPwm_Start+0x218>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    385c:	81 11       	cpse	r24, r1
    385e:	f2 c0       	rjmp	.+484    	; 0x3a44 <SWPwm_Start+0x21c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
    3860:	25 36       	cpi	r18, 0x65	; 101
    3862:	08 f0       	brcs	.+2      	; 0x3866 <SWPwm_Start+0x3e>
    3864:	f1 c0       	rjmp	.+482    	; 0x3a48 <SWPwm_Start+0x220>
	{
		return SWPWM_STATUS_DC_OUTRANGE;
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
    3866:	e8 2f       	mov	r30, r24
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	fe 83       	std	Y+6, r31	; 0x06
    386c:	ed 83       	std	Y+5, r30	; 0x05
    386e:	df 01       	movw	r26, r30
    3870:	aa 0f       	add	r26, r26
    3872:	bb 1f       	adc	r27, r27
    3874:	fd 01       	movw	r30, r26
    3876:	ee 0f       	add	r30, r30
    3878:	ff 1f       	adc	r31, r31
    387a:	ee 0f       	add	r30, r30
    387c:	ff 1f       	adc	r31, r31
    387e:	ee 0f       	add	r30, r30
    3880:	ff 1f       	adc	r31, r31
    3882:	ea 1b       	sub	r30, r26
    3884:	fb 0b       	sbc	r31, r27
    3886:	ec 52       	subi	r30, 0x2C	; 44
    3888:	f9 4f       	sbci	r31, 0xF9	; 249
    388a:	95 85       	ldd	r25, Z+13	; 0x0d
    388c:	92 30       	cpi	r25, 0x02	; 2
    388e:	09 f4       	brne	.+2      	; 0x3892 <SWPwm_Start+0x6a>
    3890:	dd c0       	rjmp	.+442    	; 0x3a4c <SWPwm_Start+0x224>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
    3892:	22 23       	and	r18, r18
    3894:	09 f4       	brne	.+2      	; 0x3898 <SWPwm_Start+0x70>
    3896:	dc c0       	rjmp	.+440    	; 0x3a50 <SWPwm_Start+0x228>
    3898:	12 2f       	mov	r17, r18
    389a:	c8 2e       	mov	r12, r24
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
	}else if(u8_DutyCycle == 100)
    389c:	24 36       	cpi	r18, 0x64	; 100
    389e:	61 f4       	brne	.+24     	; 0x38b8 <SWPwm_Start+0x90>
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    38a0:	fd 01       	movw	r30, r26
    38a2:	e5 59       	subi	r30, 0x95	; 149
    38a4:	fa 4f       	sbci	r31, 0xFA	; 250
    38a6:	61 e0       	ldi	r22, 0x01	; 1
    38a8:	80 81       	ld	r24, Z
    38aa:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    38ae:	81 30       	cpi	r24, 0x01	; 1
    38b0:	09 f4       	brne	.+2      	; 0x38b4 <SWPwm_Start+0x8c>
    38b2:	d0 c0       	rjmp	.+416    	; 0x3a54 <SWPwm_Start+0x22c>
			return SWPWM_STATUS_ERROR_NOK;
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	d5 c0       	rjmp	.+426    	; 0x3a62 <SWPwm_Start+0x23a>
		return SWPWM_STATUS_ERROR_OK;
	}
	
	float32_t f32_wavePeriodTime = (float32_t)1 / u32_Freq;					/* The Periodic Time for the Generated Pulse in Seconds */
    38b8:	cb 01       	movw	r24, r22
    38ba:	ba 01       	movw	r22, r20
    38bc:	0e 94 77 1f 	call	0x3eee	; 0x3eee <__floatunsisf>
    38c0:	9b 01       	movw	r18, r22
    38c2:	ac 01       	movw	r20, r24
    38c4:	60 e0       	ldi	r22, 0x00	; 0
    38c6:	70 e0       	ldi	r23, 0x00	; 0
    38c8:	80 e8       	ldi	r24, 0x80	; 128
    38ca:	9f e3       	ldi	r25, 0x3F	; 63
    38cc:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__divsf3>
    38d0:	4b 01       	movw	r8, r22
    38d2:	5c 01       	movw	r10, r24
	float32_t f32_waveONTime = (f32_wavePeriodTime*u8_DutyCycle) / 100;		/* The HIGH Level Time in Seconds */
    38d4:	61 2f       	mov	r22, r17
    38d6:	70 e0       	ldi	r23, 0x00	; 0
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__floatsisf>
    38e0:	a5 01       	movw	r20, r10
    38e2:	94 01       	movw	r18, r8
    38e4:	0e 94 29 20 	call	0x4052	; 0x4052 <__mulsf3>
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	48 ec       	ldi	r20, 0xC8	; 200
    38ee:	52 e4       	ldi	r21, 0x42	; 66
    38f0:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__divsf3>
    38f4:	2b 01       	movw	r4, r22
    38f6:	3c 01       	movw	r6, r24
	float32_t f32_waveOFFTime = f32_wavePeriodTime - f32_waveONTime;		/* The LOW Level Time in Seconds */
    38f8:	9b 01       	movw	r18, r22
    38fa:	ac 01       	movw	r20, r24
    38fc:	c5 01       	movw	r24, r10
    38fe:	b4 01       	movw	r22, r8
    3900:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__subsf3>
    3904:	4b 01       	movw	r8, r22
    3906:	5c 01       	movw	r10, r24
	float32_t f32_systemPeriodTime = 0.0;
	uint16_t  u16_prescalerValue = 0;
	
	/* Get the Prescaler Value of the used Timer Channel */
	switch(Timers_Configurations[SWPwm_Channels[u8_ChannelID].u8_GptChannelID].enuClock_Src)
    3908:	ed 81       	ldd	r30, Y+5	; 0x05
    390a:	fe 81       	ldd	r31, Y+6	; 0x06
    390c:	ee 0f       	add	r30, r30
    390e:	ff 1f       	adc	r31, r31
    3910:	e5 59       	subi	r30, 0x95	; 149
    3912:	fa 4f       	sbci	r31, 0xFA	; 250
    3914:	d1 80       	ldd	r13, Z+1	; 0x01
    3916:	8d 2d       	mov	r24, r13
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	fc 01       	movw	r30, r24
    391c:	ee 0f       	add	r30, r30
    391e:	ff 1f       	adc	r31, r31
    3920:	8e 0f       	add	r24, r30
    3922:	9f 1f       	adc	r25, r31
    3924:	fc 01       	movw	r30, r24
    3926:	e8 59       	subi	r30, 0x98	; 152
    3928:	fa 4f       	sbci	r31, 0xFA	; 250
    392a:	e1 81       	ldd	r30, Z+1	; 0x01
    392c:	8e 2f       	mov	r24, r30
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	fc 01       	movw	r30, r24
    3932:	31 97       	sbiw	r30, 0x01	; 1
    3934:	e7 30       	cpi	r30, 0x07	; 7
    3936:	f1 05       	cpc	r31, r1
    3938:	08 f0       	brcs	.+2      	; 0x393c <SWPwm_Start+0x114>
    393a:	8e c0       	rjmp	.+284    	; 0x3a58 <SWPwm_Start+0x230>
    393c:	e6 5d       	subi	r30, 0xD6	; 214
    393e:	ff 4f       	sbci	r31, 0xFF	; 255
    3940:	0c 94 cc 20 	jmp	0x4198	; 0x4198 <__tablejump2__>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
    3944:	61 e0       	ldi	r22, 0x01	; 1
    3946:	70 e0       	ldi	r23, 0x00	; 0
    3948:	0b c0       	rjmp	.+22     	; 0x3960 <SWPwm_Start+0x138>
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
			break;
		case GPT_CLK_SRC_PRSCLR_64:
			u16_prescalerValue = 64;
    394a:	60 e4       	ldi	r22, 0x40	; 64
    394c:	70 e0       	ldi	r23, 0x00	; 0
			break;
    394e:	08 c0       	rjmp	.+16     	; 0x3960 <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_256:
			u16_prescalerValue = 256;
    3950:	60 e0       	ldi	r22, 0x00	; 0
    3952:	71 e0       	ldi	r23, 0x01	; 1
			break;
    3954:	05 c0       	rjmp	.+10     	; 0x3960 <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_1024:
			u16_prescalerValue = 1024;
    3956:	60 e0       	ldi	r22, 0x00	; 0
    3958:	74 e0       	ldi	r23, 0x04	; 4
			break;
    395a:	02 c0       	rjmp	.+4      	; 0x3960 <SWPwm_Start+0x138>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
    395c:	68 e0       	ldi	r22, 0x08	; 8
    395e:	70 e0       	ldi	r23, 0x00	; 0
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
	}
	
	f32_systemPeriodTime = (float32_t)u16_prescalerValue/SYS_CLOCK_FREQUENCY;				/* The Controllers Periodic Time in seconds based on the System Clock Frequency */
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	0e 94 77 1f 	call	0x3eee	; 0x3eee <__floatunsisf>
    3968:	20 e0       	ldi	r18, 0x00	; 0
    396a:	34 e2       	ldi	r19, 0x24	; 36
    396c:	44 e7       	ldi	r20, 0x74	; 116
    396e:	59 e4       	ldi	r21, 0x49	; 73
    3970:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__divsf3>
    3974:	69 83       	std	Y+1, r22	; 0x01
    3976:	7a 83       	std	Y+2, r23	; 0x02
    3978:	8b 83       	std	Y+3, r24	; 0x03
    397a:	9c 83       	std	Y+4, r25	; 0x04
	gu8_currentPwmChannel = u8_ChannelID;
    397c:	c0 92 d3 06 	sts	0x06D3, r12	; 0x8006d3 <gu8_currentPwmChannel>
	gstr_ChannelsData[u8_ChannelID].u32_ONTicks = f32_waveONTime/f32_systemPeriodTime;		/* The HIGH Level Time in Ticks */
    3980:	9b 01       	movw	r18, r22
    3982:	ac 01       	movw	r20, r24
    3984:	c3 01       	movw	r24, r6
    3986:	b2 01       	movw	r22, r4
    3988:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__divsf3>
    398c:	ed 80       	ldd	r14, Y+5	; 0x05
    398e:	fe 80       	ldd	r15, Y+6	; 0x06
    3990:	ee 0c       	add	r14, r14
    3992:	ff 1c       	adc	r15, r15
    3994:	87 01       	movw	r16, r14
    3996:	00 0f       	add	r16, r16
    3998:	11 1f       	adc	r17, r17
    399a:	00 0f       	add	r16, r16
    399c:	11 1f       	adc	r17, r17
    399e:	00 0f       	add	r16, r16
    39a0:	11 1f       	adc	r17, r17
    39a2:	0e 19       	sub	r16, r14
    39a4:	1f 09       	sbc	r17, r15
    39a6:	0c 52       	subi	r16, 0x2C	; 44
    39a8:	19 4f       	sbci	r17, 0xF9	; 249
    39aa:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <__fixunssfsi>
    39ae:	f8 01       	movw	r30, r16
    39b0:	61 83       	std	Z+1, r22	; 0x01
    39b2:	72 83       	std	Z+2, r23	; 0x02
    39b4:	83 83       	std	Z+3, r24	; 0x03
    39b6:	94 83       	std	Z+4, r25	; 0x04
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
    39b8:	29 81       	ldd	r18, Y+1	; 0x01
    39ba:	3a 81       	ldd	r19, Y+2	; 0x02
    39bc:	4b 81       	ldd	r20, Y+3	; 0x03
    39be:	5c 81       	ldd	r21, Y+4	; 0x04
    39c0:	c5 01       	movw	r24, r10
    39c2:	b4 01       	movw	r22, r8
    39c4:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__divsf3>
    39c8:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <__fixunssfsi>
    39cc:	f8 01       	movw	r30, r16
    39ce:	65 83       	std	Z+5, r22	; 0x05
    39d0:	76 83       	std	Z+6, r23	; 0x06
    39d2:	87 83       	std	Z+7, r24	; 0x07
    39d4:	90 87       	std	Z+8, r25	; 0x08
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;
    39d6:	c0 82       	st	Z, r12

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    39d8:	f7 01       	movw	r30, r14
    39da:	e5 59       	subi	r30, 0x95	; 149
    39dc:	fa 4f       	sbci	r31, 0xFA	; 250
    39de:	61 e0       	ldi	r22, 0x01	; 1
    39e0:	80 81       	ld	r24, Z
    39e2:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    39e6:	81 30       	cpi	r24, 0x01	; 1
    39e8:	c9 f5       	brne	.+114    	; 0x3a5c <SWPwm_Start+0x234>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
    39ea:	8e e0       	ldi	r24, 0x0E	; 14
    39ec:	2d 81       	ldd	r18, Y+5	; 0x05
    39ee:	3e 81       	ldd	r19, Y+6	; 0x06
    39f0:	82 9f       	mul	r24, r18
    39f2:	f0 01       	movw	r30, r0
    39f4:	83 9f       	mul	r24, r19
    39f6:	f0 0d       	add	r31, r0
    39f8:	11 24       	eor	r1, r1
    39fa:	ec 52       	subi	r30, 0x2C	; 44
    39fc:	f9 4f       	sbci	r31, 0xF9	; 249
    39fe:	41 81       	ldd	r20, Z+1	; 0x01
    3a00:	52 81       	ldd	r21, Z+2	; 0x02
    3a02:	63 81       	ldd	r22, Z+3	; 0x03
    3a04:	74 81       	ldd	r23, Z+4	; 0x04
    3a06:	20 e7       	ldi	r18, 0x70	; 112
    3a08:	3b e1       	ldi	r19, 0x1B	; 27
    3a0a:	8d 2d       	mov	r24, r13
    3a0c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <GptStart_aSync>
    3a10:	81 30       	cpi	r24, 0x01	; 1
    3a12:	31 f5       	brne	.+76     	; 0x3a60 <SWPwm_Start+0x238>
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
	
	/* Assign the Next Ticks to be counted by the Asynchronous Timer */
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
    3a14:	8e e0       	ldi	r24, 0x0E	; 14
    3a16:	2d 81       	ldd	r18, Y+5	; 0x05
    3a18:	3e 81       	ldd	r19, Y+6	; 0x06
    3a1a:	82 9f       	mul	r24, r18
    3a1c:	f0 01       	movw	r30, r0
    3a1e:	83 9f       	mul	r24, r19
    3a20:	f0 0d       	add	r31, r0
    3a22:	11 24       	eor	r1, r1
    3a24:	ec 52       	subi	r30, 0x2C	; 44
    3a26:	f9 4f       	sbci	r31, 0xF9	; 249
    3a28:	85 81       	ldd	r24, Z+5	; 0x05
    3a2a:	96 81       	ldd	r25, Z+6	; 0x06
    3a2c:	a7 81       	ldd	r26, Z+7	; 0x07
    3a2e:	b0 85       	ldd	r27, Z+8	; 0x08
    3a30:	81 87       	std	Z+9, r24	; 0x09
    3a32:	92 87       	std	Z+10, r25	; 0x0a
    3a34:	a3 87       	std	Z+11, r26	; 0x0b
    3a36:	b4 87       	std	Z+12, r27	; 0x0c
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
    3a38:	82 e0       	ldi	r24, 0x02	; 2
    3a3a:	85 87       	std	Z+13, r24	; 0x0d

	return SWPWM_STATUS_ERROR_OK;
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	11 c0       	rjmp	.+34     	; 0x3a62 <SWPwm_Start+0x23a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    3a40:	82 e0       	ldi	r24, 0x02	; 2
    3a42:	0f c0       	rjmp	.+30     	; 0x3a62 <SWPwm_Start+0x23a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    3a44:	83 e0       	ldi	r24, 0x03	; 3
    3a46:	0d c0       	rjmp	.+26     	; 0x3a62 <SWPwm_Start+0x23a>
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
	{
		return SWPWM_STATUS_DC_OUTRANGE;
    3a48:	84 e0       	ldi	r24, 0x04	; 4
    3a4a:	0b c0       	rjmp	.+22     	; 0x3a62 <SWPwm_Start+0x23a>
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    3a4c:	85 e0       	ldi	r24, 0x05	; 5
    3a4e:	09 c0       	rjmp	.+18     	; 0x3a62 <SWPwm_Start+0x23a>
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	07 c0       	rjmp	.+14     	; 0x3a62 <SWPwm_Start+0x23a>
	}else if(u8_DutyCycle == 100)
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return SWPWM_STATUS_ERROR_NOK;
		return SWPWM_STATUS_ERROR_OK;
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	05 c0       	rjmp	.+10     	; 0x3a62 <SWPwm_Start+0x23a>
			break;
		case GPT_CLK_SRC_PRSCLR_EXT_RISE:
			u16_prescalerValue = 1;
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
    3a58:	80 e0       	ldi	r24, 0x00	; 0
    3a5a:	03 c0       	rjmp	.+6      	; 0x3a62 <SWPwm_Start+0x23a>
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	01 c0       	rjmp	.+2      	; 0x3a62 <SWPwm_Start+0x23a>
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
    3a60:	80 e0       	ldi	r24, 0x00	; 0
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;

	return SWPWM_STATUS_ERROR_OK;
}
    3a62:	26 96       	adiw	r28, 0x06	; 6
    3a64:	0f b6       	in	r0, 0x3f	; 63
    3a66:	f8 94       	cli
    3a68:	de bf       	out	0x3e, r29	; 62
    3a6a:	0f be       	out	0x3f, r0	; 63
    3a6c:	cd bf       	out	0x3d, r28	; 61
    3a6e:	df 91       	pop	r29
    3a70:	cf 91       	pop	r28
    3a72:	1f 91       	pop	r17
    3a74:	0f 91       	pop	r16
    3a76:	ff 90       	pop	r15
    3a78:	ef 90       	pop	r14
    3a7a:	df 90       	pop	r13
    3a7c:	cf 90       	pop	r12
    3a7e:	bf 90       	pop	r11
    3a80:	af 90       	pop	r10
    3a82:	9f 90       	pop	r9
    3a84:	8f 90       	pop	r8
    3a86:	7f 90       	pop	r7
    3a88:	6f 90       	pop	r6
    3a8a:	5f 90       	pop	r5
    3a8c:	4f 90       	pop	r4
    3a8e:	08 95       	ret

00003a90 <SWPwm_Stop>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Stop(u8SWPwm_Channel_t u8_ChannelID)
{
    3a90:	cf 93       	push	r28
    3a92:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    3a94:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <genu_SWPwmModStatus>
    3a98:	91 30       	cpi	r25, 0x01	; 1
    3a9a:	b1 f5       	brne	.+108    	; 0x3b08 <SWPwm_Stop+0x78>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    3a9c:	81 11       	cpse	r24, r1
    3a9e:	36 c0       	rjmp	.+108    	; 0x3b0c <SWPwm_Stop+0x7c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
    3aa0:	c8 2f       	mov	r28, r24
    3aa2:	d0 e0       	ldi	r29, 0x00	; 0
    3aa4:	ce 01       	movw	r24, r28
    3aa6:	88 0f       	add	r24, r24
    3aa8:	99 1f       	adc	r25, r25
    3aaa:	fc 01       	movw	r30, r24
    3aac:	ee 0f       	add	r30, r30
    3aae:	ff 1f       	adc	r31, r31
    3ab0:	ee 0f       	add	r30, r30
    3ab2:	ff 1f       	adc	r31, r31
    3ab4:	ee 0f       	add	r30, r30
    3ab6:	ff 1f       	adc	r31, r31
    3ab8:	e8 1b       	sub	r30, r24
    3aba:	f9 0b       	sbc	r31, r25
    3abc:	ec 52       	subi	r30, 0x2C	; 44
    3abe:	f9 4f       	sbci	r31, 0xF9	; 249
    3ac0:	85 85       	ldd	r24, Z+13	; 0x0d
    3ac2:	82 30       	cpi	r24, 0x02	; 2
    3ac4:	29 f5       	brne	.+74     	; 0x3b10 <SWPwm_Stop+0x80>
	
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
    3ac6:	fe 01       	movw	r30, r28
    3ac8:	ee 0f       	add	r30, r30
    3aca:	ff 1f       	adc	r31, r31
    3acc:	e5 59       	subi	r30, 0x95	; 149
    3ace:	fa 4f       	sbci	r31, 0xFA	; 250
    3ad0:	60 e0       	ldi	r22, 0x00	; 0
    3ad2:	80 81       	ld	r24, Z
    3ad4:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Dio_writePin>
    3ad8:	81 30       	cpi	r24, 0x01	; 1
    3ada:	e1 f4       	brne	.+56     	; 0x3b14 <SWPwm_Stop+0x84>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the State of the PWM Channel to STOPPED */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
    3adc:	8e e0       	ldi	r24, 0x0E	; 14
    3ade:	8c 9f       	mul	r24, r28
    3ae0:	f0 01       	movw	r30, r0
    3ae2:	8d 9f       	mul	r24, r29
    3ae4:	f0 0d       	add	r31, r0
    3ae6:	11 24       	eor	r1, r1
    3ae8:	ec 52       	subi	r30, 0x2C	; 44
    3aea:	f9 4f       	sbci	r31, 0xF9	; 249
    3aec:	83 e0       	ldi	r24, 0x03	; 3
    3aee:	85 87       	std	Z+13, r24	; 0x0d
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
    3af0:	fe 01       	movw	r30, r28
    3af2:	ee 0f       	add	r30, r30
    3af4:	ff 1f       	adc	r31, r31
    3af6:	e5 59       	subi	r30, 0x95	; 149
    3af8:	fa 4f       	sbci	r31, 0xFA	; 250
    3afa:	81 81       	ldd	r24, Z+1	; 0x01
    3afc:	0e 94 42 16 	call	0x2c84	; 0x2c84 <GptStop>
    3b00:	81 30       	cpi	r24, 0x01	; 1
    3b02:	51 f0       	breq	.+20     	; 0x3b18 <SWPwm_Stop+0x88>
		return SWPWM_STATUS_ERROR_NOK;
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	09 c0       	rjmp	.+18     	; 0x3b1a <SWPwm_Stop+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    3b08:	82 e0       	ldi	r24, 0x02	; 2
    3b0a:	07 c0       	rjmp	.+14     	; 0x3b1a <SWPwm_Stop+0x8a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    3b0c:	83 e0       	ldi	r24, 0x03	; 3
    3b0e:	05 c0       	rjmp	.+10     	; 0x3b1a <SWPwm_Stop+0x8a>
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    3b10:	85 e0       	ldi	r24, 0x05	; 5
    3b12:	03 c0       	rjmp	.+6      	; 0x3b1a <SWPwm_Stop+0x8a>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    3b14:	80 e0       	ldi	r24, 0x00	; 0
    3b16:	01 c0       	rjmp	.+2      	; 0x3b1a <SWPwm_Stop+0x8a>
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
	
	return SWPWM_STATUS_ERROR_OK;
    3b18:	81 e0       	ldi	r24, 0x01	; 1
}
    3b1a:	df 91       	pop	r29
    3b1c:	cf 91       	pop	r28
    3b1e:	08 95       	ret

00003b20 <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
    3b20:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <u8_Uart_Status>
    3b24:	81 30       	cpi	r24, 0x01	; 1
    3b26:	81 f0       	breq	.+32     	; 0x3b48 <Uart_init+0x28>
    3b28:	10 bc       	out	0x20, r1	; 32
    3b2a:	87 e6       	ldi	r24, 0x67	; 103
    3b2c:	89 b9       	out	0x09, r24	; 9
    3b2e:	82 e0       	ldi	r24, 0x02	; 2
    3b30:	8b b9       	out	0x0b, r24	; 11
    3b32:	88 e1       	ldi	r24, 0x18	; 24
    3b34:	8a b9       	out	0x0a, r24	; 10
    3b36:	80 e8       	ldi	r24, 0x80	; 128
    3b38:	80 bd       	out	0x20, r24	; 32
    3b3a:	80 b5       	in	r24, 0x20	; 32
    3b3c:	86 68       	ori	r24, 0x86	; 134
    3b3e:	80 bd       	out	0x20, r24	; 32
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <u8_Uart_Status>
    3b46:	08 95       	ret
    3b48:	87 e0       	ldi	r24, 0x07	; 7
    3b4a:	08 95       	ret

00003b4c <Uart_sendByte>:
    3b4c:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <u8_Uart_Status>
    3b50:	99 23       	and	r25, r25
    3b52:	29 f0       	breq	.+10     	; 0x3b5e <Uart_sendByte+0x12>
    3b54:	5d 9b       	sbis	0x0b, 5	; 11
    3b56:	fe cf       	rjmp	.-4      	; 0x3b54 <Uart_sendByte+0x8>
    3b58:	8c b9       	out	0x0c, r24	; 12
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	08 95       	ret
    3b5e:	86 e0       	ldi	r24, 0x06	; 6
    3b60:	08 95       	ret

00003b62 <Uart_sendPacket>:
    3b62:	ef 92       	push	r14
    3b64:	ff 92       	push	r15
    3b66:	0f 93       	push	r16
    3b68:	1f 93       	push	r17
    3b6a:	cf 93       	push	r28
    3b6c:	df 93       	push	r29
    3b6e:	20 91 e2 06 	lds	r18, 0x06E2	; 0x8006e2 <u8_Uart_Status>
    3b72:	22 23       	and	r18, r18
    3b74:	99 f0       	breq	.+38     	; 0x3b9c <Uart_sendPacket+0x3a>
    3b76:	8b 01       	movw	r16, r22
    3b78:	7c 01       	movw	r14, r24
    3b7a:	c0 e0       	ldi	r28, 0x00	; 0
    3b7c:	d0 e0       	ldi	r29, 0x00	; 0
    3b7e:	09 c0       	rjmp	.+18     	; 0x3b92 <Uart_sendPacket+0x30>
    3b80:	f7 01       	movw	r30, r14
    3b82:	ec 0f       	add	r30, r28
    3b84:	fd 1f       	adc	r31, r29
    3b86:	80 81       	ld	r24, Z
    3b88:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <Uart_sendByte>
    3b8c:	81 30       	cpi	r24, 0x01	; 1
    3b8e:	41 f4       	brne	.+16     	; 0x3ba0 <Uart_sendPacket+0x3e>
    3b90:	21 96       	adiw	r28, 0x01	; 1
    3b92:	c0 17       	cp	r28, r16
    3b94:	d1 07       	cpc	r29, r17
    3b96:	a0 f3       	brcs	.-24     	; 0x3b80 <Uart_sendPacket+0x1e>
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	03 c0       	rjmp	.+6      	; 0x3ba2 <Uart_sendPacket+0x40>
    3b9c:	86 e0       	ldi	r24, 0x06	; 6
    3b9e:	01 c0       	rjmp	.+2      	; 0x3ba2 <Uart_sendPacket+0x40>
    3ba0:	80 e0       	ldi	r24, 0x00	; 0
    3ba2:	df 91       	pop	r29
    3ba4:	cf 91       	pop	r28
    3ba6:	1f 91       	pop	r17
    3ba8:	0f 91       	pop	r16
    3baa:	ff 90       	pop	r15
    3bac:	ef 90       	pop	r14
    3bae:	08 95       	ret

00003bb0 <Uart_EnableNotification_RXC>:
    3bb0:	9c 01       	movw	r18, r24
    3bb2:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <u8_Uart_Status>
    3bb6:	99 23       	and	r25, r25
    3bb8:	61 f0       	breq	.+24     	; 0x3bd2 <Uart_EnableNotification_RXC+0x22>
    3bba:	21 15       	cp	r18, r1
    3bbc:	31 05       	cpc	r19, r1
    3bbe:	59 f0       	breq	.+22     	; 0x3bd6 <Uart_EnableNotification_RXC+0x26>
    3bc0:	8a b1       	in	r24, 0x0a	; 10
    3bc2:	80 68       	ori	r24, 0x80	; 128
    3bc4:	8a b9       	out	0x0a, r24	; 10
    3bc6:	30 93 e6 06 	sts	0x06E6, r19	; 0x8006e6 <Uart_RXC_CallBackPtr+0x1>
    3bca:	20 93 e5 06 	sts	0x06E5, r18	; 0x8006e5 <Uart_RXC_CallBackPtr>
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	08 95       	ret
    3bd2:	86 e0       	ldi	r24, 0x06	; 6
    3bd4:	08 95       	ret
    3bd6:	85 e0       	ldi	r24, 0x05	; 5
    3bd8:	08 95       	ret

00003bda <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
    3bda:	8c b1       	in	r24, 0x0c	; 12
}
    3bdc:	08 95       	ret

00003bde <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
    3bde:	1f 92       	push	r1
    3be0:	0f 92       	push	r0
    3be2:	0f b6       	in	r0, 0x3f	; 63
    3be4:	0f 92       	push	r0
    3be6:	11 24       	eor	r1, r1
    3be8:	2f 93       	push	r18
    3bea:	3f 93       	push	r19
    3bec:	4f 93       	push	r20
    3bee:	5f 93       	push	r21
    3bf0:	6f 93       	push	r22
    3bf2:	7f 93       	push	r23
    3bf4:	8f 93       	push	r24
    3bf6:	9f 93       	push	r25
    3bf8:	af 93       	push	r26
    3bfa:	bf 93       	push	r27
    3bfc:	ef 93       	push	r30
    3bfe:	ff 93       	push	r31
    3c00:	e0 91 e7 06 	lds	r30, 0x06E7	; 0x8006e7 <Uart_TXC_CallBackPtr>
    3c04:	f0 91 e8 06 	lds	r31, 0x06E8	; 0x8006e8 <Uart_TXC_CallBackPtr+0x1>
    3c08:	09 95       	icall
    3c0a:	ff 91       	pop	r31
    3c0c:	ef 91       	pop	r30
    3c0e:	bf 91       	pop	r27
    3c10:	af 91       	pop	r26
    3c12:	9f 91       	pop	r25
    3c14:	8f 91       	pop	r24
    3c16:	7f 91       	pop	r23
    3c18:	6f 91       	pop	r22
    3c1a:	5f 91       	pop	r21
    3c1c:	4f 91       	pop	r20
    3c1e:	3f 91       	pop	r19
    3c20:	2f 91       	pop	r18
    3c22:	0f 90       	pop	r0
    3c24:	0f be       	out	0x3f, r0	; 63
    3c26:	0f 90       	pop	r0
    3c28:	1f 90       	pop	r1
    3c2a:	18 95       	reti

00003c2c <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
    3c2c:	1f 92       	push	r1
    3c2e:	0f 92       	push	r0
    3c30:	0f b6       	in	r0, 0x3f	; 63
    3c32:	0f 92       	push	r0
    3c34:	11 24       	eor	r1, r1
    3c36:	2f 93       	push	r18
    3c38:	3f 93       	push	r19
    3c3a:	4f 93       	push	r20
    3c3c:	5f 93       	push	r21
    3c3e:	6f 93       	push	r22
    3c40:	7f 93       	push	r23
    3c42:	8f 93       	push	r24
    3c44:	9f 93       	push	r25
    3c46:	af 93       	push	r26
    3c48:	bf 93       	push	r27
    3c4a:	ef 93       	push	r30
    3c4c:	ff 93       	push	r31
    3c4e:	e0 91 e5 06 	lds	r30, 0x06E5	; 0x8006e5 <Uart_RXC_CallBackPtr>
    3c52:	f0 91 e6 06 	lds	r31, 0x06E6	; 0x8006e6 <Uart_RXC_CallBackPtr+0x1>
    3c56:	09 95       	icall
    3c58:	ff 91       	pop	r31
    3c5a:	ef 91       	pop	r30
    3c5c:	bf 91       	pop	r27
    3c5e:	af 91       	pop	r26
    3c60:	9f 91       	pop	r25
    3c62:	8f 91       	pop	r24
    3c64:	7f 91       	pop	r23
    3c66:	6f 91       	pop	r22
    3c68:	5f 91       	pop	r21
    3c6a:	4f 91       	pop	r20
    3c6c:	3f 91       	pop	r19
    3c6e:	2f 91       	pop	r18
    3c70:	0f 90       	pop	r0
    3c72:	0f be       	out	0x3f, r0	; 63
    3c74:	0f 90       	pop	r0
    3c76:	1f 90       	pop	r1
    3c78:	18 95       	reti

00003c7a <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
    3c7a:	1f 92       	push	r1
    3c7c:	0f 92       	push	r0
    3c7e:	0f b6       	in	r0, 0x3f	; 63
    3c80:	0f 92       	push	r0
    3c82:	11 24       	eor	r1, r1
    3c84:	2f 93       	push	r18
    3c86:	3f 93       	push	r19
    3c88:	4f 93       	push	r20
    3c8a:	5f 93       	push	r21
    3c8c:	6f 93       	push	r22
    3c8e:	7f 93       	push	r23
    3c90:	8f 93       	push	r24
    3c92:	9f 93       	push	r25
    3c94:	af 93       	push	r26
    3c96:	bf 93       	push	r27
    3c98:	ef 93       	push	r30
    3c9a:	ff 93       	push	r31
    3c9c:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <Uart_UDRE_CallBackPtr>
    3ca0:	f0 91 e4 06 	lds	r31, 0x06E4	; 0x8006e4 <Uart_UDRE_CallBackPtr+0x1>
    3ca4:	09 95       	icall
    3ca6:	ff 91       	pop	r31
    3ca8:	ef 91       	pop	r30
    3caa:	bf 91       	pop	r27
    3cac:	af 91       	pop	r26
    3cae:	9f 91       	pop	r25
    3cb0:	8f 91       	pop	r24
    3cb2:	7f 91       	pop	r23
    3cb4:	6f 91       	pop	r22
    3cb6:	5f 91       	pop	r21
    3cb8:	4f 91       	pop	r20
    3cba:	3f 91       	pop	r19
    3cbc:	2f 91       	pop	r18
    3cbe:	0f 90       	pop	r0
    3cc0:	0f be       	out	0x3f, r0	; 63
    3cc2:	0f 90       	pop	r0
    3cc4:	1f 90       	pop	r1
    3cc6:	18 95       	reti

00003cc8 <__subsf3>:
    3cc8:	50 58       	subi	r21, 0x80	; 128

00003cca <__addsf3>:
    3cca:	bb 27       	eor	r27, r27
    3ccc:	aa 27       	eor	r26, r26
    3cce:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <__addsf3x>
    3cd2:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__fp_round>
    3cd6:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <__fp_pscA>
    3cda:	38 f0       	brcs	.+14     	; 0x3cea <__addsf3+0x20>
    3cdc:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__fp_pscB>
    3ce0:	20 f0       	brcs	.+8      	; 0x3cea <__addsf3+0x20>
    3ce2:	39 f4       	brne	.+14     	; 0x3cf2 <__addsf3+0x28>
    3ce4:	9f 3f       	cpi	r25, 0xFF	; 255
    3ce6:	19 f4       	brne	.+6      	; 0x3cee <__addsf3+0x24>
    3ce8:	26 f4       	brtc	.+8      	; 0x3cf2 <__addsf3+0x28>
    3cea:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <__fp_nan>
    3cee:	0e f4       	brtc	.+2      	; 0x3cf2 <__addsf3+0x28>
    3cf0:	e0 95       	com	r30
    3cf2:	e7 fb       	bst	r30, 7
    3cf4:	0c 94 d8 1f 	jmp	0x3fb0	; 0x3fb0 <__fp_inf>

00003cf8 <__addsf3x>:
    3cf8:	e9 2f       	mov	r30, r25
    3cfa:	0e 94 00 20 	call	0x4000	; 0x4000 <__fp_split3>
    3cfe:	58 f3       	brcs	.-42     	; 0x3cd6 <__addsf3+0xc>
    3d00:	ba 17       	cp	r27, r26
    3d02:	62 07       	cpc	r22, r18
    3d04:	73 07       	cpc	r23, r19
    3d06:	84 07       	cpc	r24, r20
    3d08:	95 07       	cpc	r25, r21
    3d0a:	20 f0       	brcs	.+8      	; 0x3d14 <__addsf3x+0x1c>
    3d0c:	79 f4       	brne	.+30     	; 0x3d2c <__addsf3x+0x34>
    3d0e:	a6 f5       	brtc	.+104    	; 0x3d78 <__addsf3x+0x80>
    3d10:	0c 94 22 20 	jmp	0x4044	; 0x4044 <__fp_zero>
    3d14:	0e f4       	brtc	.+2      	; 0x3d18 <__addsf3x+0x20>
    3d16:	e0 95       	com	r30
    3d18:	0b 2e       	mov	r0, r27
    3d1a:	ba 2f       	mov	r27, r26
    3d1c:	a0 2d       	mov	r26, r0
    3d1e:	0b 01       	movw	r0, r22
    3d20:	b9 01       	movw	r22, r18
    3d22:	90 01       	movw	r18, r0
    3d24:	0c 01       	movw	r0, r24
    3d26:	ca 01       	movw	r24, r20
    3d28:	a0 01       	movw	r20, r0
    3d2a:	11 24       	eor	r1, r1
    3d2c:	ff 27       	eor	r31, r31
    3d2e:	59 1b       	sub	r21, r25
    3d30:	99 f0       	breq	.+38     	; 0x3d58 <__addsf3x+0x60>
    3d32:	59 3f       	cpi	r21, 0xF9	; 249
    3d34:	50 f4       	brcc	.+20     	; 0x3d4a <__addsf3x+0x52>
    3d36:	50 3e       	cpi	r21, 0xE0	; 224
    3d38:	68 f1       	brcs	.+90     	; 0x3d94 <__addsf3x+0x9c>
    3d3a:	1a 16       	cp	r1, r26
    3d3c:	f0 40       	sbci	r31, 0x00	; 0
    3d3e:	a2 2f       	mov	r26, r18
    3d40:	23 2f       	mov	r18, r19
    3d42:	34 2f       	mov	r19, r20
    3d44:	44 27       	eor	r20, r20
    3d46:	58 5f       	subi	r21, 0xF8	; 248
    3d48:	f3 cf       	rjmp	.-26     	; 0x3d30 <__addsf3x+0x38>
    3d4a:	46 95       	lsr	r20
    3d4c:	37 95       	ror	r19
    3d4e:	27 95       	ror	r18
    3d50:	a7 95       	ror	r26
    3d52:	f0 40       	sbci	r31, 0x00	; 0
    3d54:	53 95       	inc	r21
    3d56:	c9 f7       	brne	.-14     	; 0x3d4a <__addsf3x+0x52>
    3d58:	7e f4       	brtc	.+30     	; 0x3d78 <__addsf3x+0x80>
    3d5a:	1f 16       	cp	r1, r31
    3d5c:	ba 0b       	sbc	r27, r26
    3d5e:	62 0b       	sbc	r22, r18
    3d60:	73 0b       	sbc	r23, r19
    3d62:	84 0b       	sbc	r24, r20
    3d64:	ba f0       	brmi	.+46     	; 0x3d94 <__addsf3x+0x9c>
    3d66:	91 50       	subi	r25, 0x01	; 1
    3d68:	a1 f0       	breq	.+40     	; 0x3d92 <__addsf3x+0x9a>
    3d6a:	ff 0f       	add	r31, r31
    3d6c:	bb 1f       	adc	r27, r27
    3d6e:	66 1f       	adc	r22, r22
    3d70:	77 1f       	adc	r23, r23
    3d72:	88 1f       	adc	r24, r24
    3d74:	c2 f7       	brpl	.-16     	; 0x3d66 <__addsf3x+0x6e>
    3d76:	0e c0       	rjmp	.+28     	; 0x3d94 <__addsf3x+0x9c>
    3d78:	ba 0f       	add	r27, r26
    3d7a:	62 1f       	adc	r22, r18
    3d7c:	73 1f       	adc	r23, r19
    3d7e:	84 1f       	adc	r24, r20
    3d80:	48 f4       	brcc	.+18     	; 0x3d94 <__addsf3x+0x9c>
    3d82:	87 95       	ror	r24
    3d84:	77 95       	ror	r23
    3d86:	67 95       	ror	r22
    3d88:	b7 95       	ror	r27
    3d8a:	f7 95       	ror	r31
    3d8c:	9e 3f       	cpi	r25, 0xFE	; 254
    3d8e:	08 f0       	brcs	.+2      	; 0x3d92 <__addsf3x+0x9a>
    3d90:	b0 cf       	rjmp	.-160    	; 0x3cf2 <__addsf3+0x28>
    3d92:	93 95       	inc	r25
    3d94:	88 0f       	add	r24, r24
    3d96:	08 f0       	brcs	.+2      	; 0x3d9a <__addsf3x+0xa2>
    3d98:	99 27       	eor	r25, r25
    3d9a:	ee 0f       	add	r30, r30
    3d9c:	97 95       	ror	r25
    3d9e:	87 95       	ror	r24
    3da0:	08 95       	ret

00003da2 <__cmpsf2>:
    3da2:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__fp_cmp>
    3da6:	08 f4       	brcc	.+2      	; 0x3daa <__cmpsf2+0x8>
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	08 95       	ret

00003dac <__divsf3>:
    3dac:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__divsf3x>
    3db0:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__fp_round>
    3db4:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__fp_pscB>
    3db8:	58 f0       	brcs	.+22     	; 0x3dd0 <__divsf3+0x24>
    3dba:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <__fp_pscA>
    3dbe:	40 f0       	brcs	.+16     	; 0x3dd0 <__divsf3+0x24>
    3dc0:	29 f4       	brne	.+10     	; 0x3dcc <__divsf3+0x20>
    3dc2:	5f 3f       	cpi	r21, 0xFF	; 255
    3dc4:	29 f0       	breq	.+10     	; 0x3dd0 <__divsf3+0x24>
    3dc6:	0c 94 d8 1f 	jmp	0x3fb0	; 0x3fb0 <__fp_inf>
    3dca:	51 11       	cpse	r21, r1
    3dcc:	0c 94 23 20 	jmp	0x4046	; 0x4046 <__fp_szero>
    3dd0:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <__fp_nan>

00003dd4 <__divsf3x>:
    3dd4:	0e 94 00 20 	call	0x4000	; 0x4000 <__fp_split3>
    3dd8:	68 f3       	brcs	.-38     	; 0x3db4 <__divsf3+0x8>

00003dda <__divsf3_pse>:
    3dda:	99 23       	and	r25, r25
    3ddc:	b1 f3       	breq	.-20     	; 0x3dca <__divsf3+0x1e>
    3dde:	55 23       	and	r21, r21
    3de0:	91 f3       	breq	.-28     	; 0x3dc6 <__divsf3+0x1a>
    3de2:	95 1b       	sub	r25, r21
    3de4:	55 0b       	sbc	r21, r21
    3de6:	bb 27       	eor	r27, r27
    3de8:	aa 27       	eor	r26, r26
    3dea:	62 17       	cp	r22, r18
    3dec:	73 07       	cpc	r23, r19
    3dee:	84 07       	cpc	r24, r20
    3df0:	38 f0       	brcs	.+14     	; 0x3e00 <__divsf3_pse+0x26>
    3df2:	9f 5f       	subi	r25, 0xFF	; 255
    3df4:	5f 4f       	sbci	r21, 0xFF	; 255
    3df6:	22 0f       	add	r18, r18
    3df8:	33 1f       	adc	r19, r19
    3dfa:	44 1f       	adc	r20, r20
    3dfc:	aa 1f       	adc	r26, r26
    3dfe:	a9 f3       	breq	.-22     	; 0x3dea <__divsf3_pse+0x10>
    3e00:	35 d0       	rcall	.+106    	; 0x3e6c <__divsf3_pse+0x92>
    3e02:	0e 2e       	mov	r0, r30
    3e04:	3a f0       	brmi	.+14     	; 0x3e14 <__divsf3_pse+0x3a>
    3e06:	e0 e8       	ldi	r30, 0x80	; 128
    3e08:	32 d0       	rcall	.+100    	; 0x3e6e <__divsf3_pse+0x94>
    3e0a:	91 50       	subi	r25, 0x01	; 1
    3e0c:	50 40       	sbci	r21, 0x00	; 0
    3e0e:	e6 95       	lsr	r30
    3e10:	00 1c       	adc	r0, r0
    3e12:	ca f7       	brpl	.-14     	; 0x3e06 <__divsf3_pse+0x2c>
    3e14:	2b d0       	rcall	.+86     	; 0x3e6c <__divsf3_pse+0x92>
    3e16:	fe 2f       	mov	r31, r30
    3e18:	29 d0       	rcall	.+82     	; 0x3e6c <__divsf3_pse+0x92>
    3e1a:	66 0f       	add	r22, r22
    3e1c:	77 1f       	adc	r23, r23
    3e1e:	88 1f       	adc	r24, r24
    3e20:	bb 1f       	adc	r27, r27
    3e22:	26 17       	cp	r18, r22
    3e24:	37 07       	cpc	r19, r23
    3e26:	48 07       	cpc	r20, r24
    3e28:	ab 07       	cpc	r26, r27
    3e2a:	b0 e8       	ldi	r27, 0x80	; 128
    3e2c:	09 f0       	breq	.+2      	; 0x3e30 <__divsf3_pse+0x56>
    3e2e:	bb 0b       	sbc	r27, r27
    3e30:	80 2d       	mov	r24, r0
    3e32:	bf 01       	movw	r22, r30
    3e34:	ff 27       	eor	r31, r31
    3e36:	93 58       	subi	r25, 0x83	; 131
    3e38:	5f 4f       	sbci	r21, 0xFF	; 255
    3e3a:	3a f0       	brmi	.+14     	; 0x3e4a <__divsf3_pse+0x70>
    3e3c:	9e 3f       	cpi	r25, 0xFE	; 254
    3e3e:	51 05       	cpc	r21, r1
    3e40:	78 f0       	brcs	.+30     	; 0x3e60 <__divsf3_pse+0x86>
    3e42:	0c 94 d8 1f 	jmp	0x3fb0	; 0x3fb0 <__fp_inf>
    3e46:	0c 94 23 20 	jmp	0x4046	; 0x4046 <__fp_szero>
    3e4a:	5f 3f       	cpi	r21, 0xFF	; 255
    3e4c:	e4 f3       	brlt	.-8      	; 0x3e46 <__divsf3_pse+0x6c>
    3e4e:	98 3e       	cpi	r25, 0xE8	; 232
    3e50:	d4 f3       	brlt	.-12     	; 0x3e46 <__divsf3_pse+0x6c>
    3e52:	86 95       	lsr	r24
    3e54:	77 95       	ror	r23
    3e56:	67 95       	ror	r22
    3e58:	b7 95       	ror	r27
    3e5a:	f7 95       	ror	r31
    3e5c:	9f 5f       	subi	r25, 0xFF	; 255
    3e5e:	c9 f7       	brne	.-14     	; 0x3e52 <__divsf3_pse+0x78>
    3e60:	88 0f       	add	r24, r24
    3e62:	91 1d       	adc	r25, r1
    3e64:	96 95       	lsr	r25
    3e66:	87 95       	ror	r24
    3e68:	97 f9       	bld	r25, 7
    3e6a:	08 95       	ret
    3e6c:	e1 e0       	ldi	r30, 0x01	; 1
    3e6e:	66 0f       	add	r22, r22
    3e70:	77 1f       	adc	r23, r23
    3e72:	88 1f       	adc	r24, r24
    3e74:	bb 1f       	adc	r27, r27
    3e76:	62 17       	cp	r22, r18
    3e78:	73 07       	cpc	r23, r19
    3e7a:	84 07       	cpc	r24, r20
    3e7c:	ba 07       	cpc	r27, r26
    3e7e:	20 f0       	brcs	.+8      	; 0x3e88 <__divsf3_pse+0xae>
    3e80:	62 1b       	sub	r22, r18
    3e82:	73 0b       	sbc	r23, r19
    3e84:	84 0b       	sbc	r24, r20
    3e86:	ba 0b       	sbc	r27, r26
    3e88:	ee 1f       	adc	r30, r30
    3e8a:	88 f7       	brcc	.-30     	; 0x3e6e <__divsf3_pse+0x94>
    3e8c:	e0 95       	com	r30
    3e8e:	08 95       	ret

00003e90 <__fixunssfsi>:
    3e90:	0e 94 08 20 	call	0x4010	; 0x4010 <__fp_splitA>
    3e94:	88 f0       	brcs	.+34     	; 0x3eb8 <__fixunssfsi+0x28>
    3e96:	9f 57       	subi	r25, 0x7F	; 127
    3e98:	98 f0       	brcs	.+38     	; 0x3ec0 <__fixunssfsi+0x30>
    3e9a:	b9 2f       	mov	r27, r25
    3e9c:	99 27       	eor	r25, r25
    3e9e:	b7 51       	subi	r27, 0x17	; 23
    3ea0:	b0 f0       	brcs	.+44     	; 0x3ece <__fixunssfsi+0x3e>
    3ea2:	e1 f0       	breq	.+56     	; 0x3edc <__fixunssfsi+0x4c>
    3ea4:	66 0f       	add	r22, r22
    3ea6:	77 1f       	adc	r23, r23
    3ea8:	88 1f       	adc	r24, r24
    3eaa:	99 1f       	adc	r25, r25
    3eac:	1a f0       	brmi	.+6      	; 0x3eb4 <__fixunssfsi+0x24>
    3eae:	ba 95       	dec	r27
    3eb0:	c9 f7       	brne	.-14     	; 0x3ea4 <__fixunssfsi+0x14>
    3eb2:	14 c0       	rjmp	.+40     	; 0x3edc <__fixunssfsi+0x4c>
    3eb4:	b1 30       	cpi	r27, 0x01	; 1
    3eb6:	91 f0       	breq	.+36     	; 0x3edc <__fixunssfsi+0x4c>
    3eb8:	0e 94 22 20 	call	0x4044	; 0x4044 <__fp_zero>
    3ebc:	b1 e0       	ldi	r27, 0x01	; 1
    3ebe:	08 95       	ret
    3ec0:	0c 94 22 20 	jmp	0x4044	; 0x4044 <__fp_zero>
    3ec4:	67 2f       	mov	r22, r23
    3ec6:	78 2f       	mov	r23, r24
    3ec8:	88 27       	eor	r24, r24
    3eca:	b8 5f       	subi	r27, 0xF8	; 248
    3ecc:	39 f0       	breq	.+14     	; 0x3edc <__fixunssfsi+0x4c>
    3ece:	b9 3f       	cpi	r27, 0xF9	; 249
    3ed0:	cc f3       	brlt	.-14     	; 0x3ec4 <__fixunssfsi+0x34>
    3ed2:	86 95       	lsr	r24
    3ed4:	77 95       	ror	r23
    3ed6:	67 95       	ror	r22
    3ed8:	b3 95       	inc	r27
    3eda:	d9 f7       	brne	.-10     	; 0x3ed2 <__fixunssfsi+0x42>
    3edc:	3e f4       	brtc	.+14     	; 0x3eec <__fixunssfsi+0x5c>
    3ede:	90 95       	com	r25
    3ee0:	80 95       	com	r24
    3ee2:	70 95       	com	r23
    3ee4:	61 95       	neg	r22
    3ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ee8:	8f 4f       	sbci	r24, 0xFF	; 255
    3eea:	9f 4f       	sbci	r25, 0xFF	; 255
    3eec:	08 95       	ret

00003eee <__floatunsisf>:
    3eee:	e8 94       	clt
    3ef0:	09 c0       	rjmp	.+18     	; 0x3f04 <__floatsisf+0x12>

00003ef2 <__floatsisf>:
    3ef2:	97 fb       	bst	r25, 7
    3ef4:	3e f4       	brtc	.+14     	; 0x3f04 <__floatsisf+0x12>
    3ef6:	90 95       	com	r25
    3ef8:	80 95       	com	r24
    3efa:	70 95       	com	r23
    3efc:	61 95       	neg	r22
    3efe:	7f 4f       	sbci	r23, 0xFF	; 255
    3f00:	8f 4f       	sbci	r24, 0xFF	; 255
    3f02:	9f 4f       	sbci	r25, 0xFF	; 255
    3f04:	99 23       	and	r25, r25
    3f06:	a9 f0       	breq	.+42     	; 0x3f32 <__floatsisf+0x40>
    3f08:	f9 2f       	mov	r31, r25
    3f0a:	96 e9       	ldi	r25, 0x96	; 150
    3f0c:	bb 27       	eor	r27, r27
    3f0e:	93 95       	inc	r25
    3f10:	f6 95       	lsr	r31
    3f12:	87 95       	ror	r24
    3f14:	77 95       	ror	r23
    3f16:	67 95       	ror	r22
    3f18:	b7 95       	ror	r27
    3f1a:	f1 11       	cpse	r31, r1
    3f1c:	f8 cf       	rjmp	.-16     	; 0x3f0e <__floatsisf+0x1c>
    3f1e:	fa f4       	brpl	.+62     	; 0x3f5e <__floatsisf+0x6c>
    3f20:	bb 0f       	add	r27, r27
    3f22:	11 f4       	brne	.+4      	; 0x3f28 <__floatsisf+0x36>
    3f24:	60 ff       	sbrs	r22, 0
    3f26:	1b c0       	rjmp	.+54     	; 0x3f5e <__floatsisf+0x6c>
    3f28:	6f 5f       	subi	r22, 0xFF	; 255
    3f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f2c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f30:	16 c0       	rjmp	.+44     	; 0x3f5e <__floatsisf+0x6c>
    3f32:	88 23       	and	r24, r24
    3f34:	11 f0       	breq	.+4      	; 0x3f3a <__floatsisf+0x48>
    3f36:	96 e9       	ldi	r25, 0x96	; 150
    3f38:	11 c0       	rjmp	.+34     	; 0x3f5c <__floatsisf+0x6a>
    3f3a:	77 23       	and	r23, r23
    3f3c:	21 f0       	breq	.+8      	; 0x3f46 <__floatsisf+0x54>
    3f3e:	9e e8       	ldi	r25, 0x8E	; 142
    3f40:	87 2f       	mov	r24, r23
    3f42:	76 2f       	mov	r23, r22
    3f44:	05 c0       	rjmp	.+10     	; 0x3f50 <__floatsisf+0x5e>
    3f46:	66 23       	and	r22, r22
    3f48:	71 f0       	breq	.+28     	; 0x3f66 <__floatsisf+0x74>
    3f4a:	96 e8       	ldi	r25, 0x86	; 134
    3f4c:	86 2f       	mov	r24, r22
    3f4e:	70 e0       	ldi	r23, 0x00	; 0
    3f50:	60 e0       	ldi	r22, 0x00	; 0
    3f52:	2a f0       	brmi	.+10     	; 0x3f5e <__floatsisf+0x6c>
    3f54:	9a 95       	dec	r25
    3f56:	66 0f       	add	r22, r22
    3f58:	77 1f       	adc	r23, r23
    3f5a:	88 1f       	adc	r24, r24
    3f5c:	da f7       	brpl	.-10     	; 0x3f54 <__floatsisf+0x62>
    3f5e:	88 0f       	add	r24, r24
    3f60:	96 95       	lsr	r25
    3f62:	87 95       	ror	r24
    3f64:	97 f9       	bld	r25, 7
    3f66:	08 95       	ret

00003f68 <__fp_cmp>:
    3f68:	99 0f       	add	r25, r25
    3f6a:	00 08       	sbc	r0, r0
    3f6c:	55 0f       	add	r21, r21
    3f6e:	aa 0b       	sbc	r26, r26
    3f70:	e0 e8       	ldi	r30, 0x80	; 128
    3f72:	fe ef       	ldi	r31, 0xFE	; 254
    3f74:	16 16       	cp	r1, r22
    3f76:	17 06       	cpc	r1, r23
    3f78:	e8 07       	cpc	r30, r24
    3f7a:	f9 07       	cpc	r31, r25
    3f7c:	c0 f0       	brcs	.+48     	; 0x3fae <__fp_cmp+0x46>
    3f7e:	12 16       	cp	r1, r18
    3f80:	13 06       	cpc	r1, r19
    3f82:	e4 07       	cpc	r30, r20
    3f84:	f5 07       	cpc	r31, r21
    3f86:	98 f0       	brcs	.+38     	; 0x3fae <__fp_cmp+0x46>
    3f88:	62 1b       	sub	r22, r18
    3f8a:	73 0b       	sbc	r23, r19
    3f8c:	84 0b       	sbc	r24, r20
    3f8e:	95 0b       	sbc	r25, r21
    3f90:	39 f4       	brne	.+14     	; 0x3fa0 <__fp_cmp+0x38>
    3f92:	0a 26       	eor	r0, r26
    3f94:	61 f0       	breq	.+24     	; 0x3fae <__fp_cmp+0x46>
    3f96:	23 2b       	or	r18, r19
    3f98:	24 2b       	or	r18, r20
    3f9a:	25 2b       	or	r18, r21
    3f9c:	21 f4       	brne	.+8      	; 0x3fa6 <__fp_cmp+0x3e>
    3f9e:	08 95       	ret
    3fa0:	0a 26       	eor	r0, r26
    3fa2:	09 f4       	brne	.+2      	; 0x3fa6 <__fp_cmp+0x3e>
    3fa4:	a1 40       	sbci	r26, 0x01	; 1
    3fa6:	a6 95       	lsr	r26
    3fa8:	8f ef       	ldi	r24, 0xFF	; 255
    3faa:	81 1d       	adc	r24, r1
    3fac:	81 1d       	adc	r24, r1
    3fae:	08 95       	ret

00003fb0 <__fp_inf>:
    3fb0:	97 f9       	bld	r25, 7
    3fb2:	9f 67       	ori	r25, 0x7F	; 127
    3fb4:	80 e8       	ldi	r24, 0x80	; 128
    3fb6:	70 e0       	ldi	r23, 0x00	; 0
    3fb8:	60 e0       	ldi	r22, 0x00	; 0
    3fba:	08 95       	ret

00003fbc <__fp_nan>:
    3fbc:	9f ef       	ldi	r25, 0xFF	; 255
    3fbe:	80 ec       	ldi	r24, 0xC0	; 192
    3fc0:	08 95       	ret

00003fc2 <__fp_pscA>:
    3fc2:	00 24       	eor	r0, r0
    3fc4:	0a 94       	dec	r0
    3fc6:	16 16       	cp	r1, r22
    3fc8:	17 06       	cpc	r1, r23
    3fca:	18 06       	cpc	r1, r24
    3fcc:	09 06       	cpc	r0, r25
    3fce:	08 95       	ret

00003fd0 <__fp_pscB>:
    3fd0:	00 24       	eor	r0, r0
    3fd2:	0a 94       	dec	r0
    3fd4:	12 16       	cp	r1, r18
    3fd6:	13 06       	cpc	r1, r19
    3fd8:	14 06       	cpc	r1, r20
    3fda:	05 06       	cpc	r0, r21
    3fdc:	08 95       	ret

00003fde <__fp_round>:
    3fde:	09 2e       	mov	r0, r25
    3fe0:	03 94       	inc	r0
    3fe2:	00 0c       	add	r0, r0
    3fe4:	11 f4       	brne	.+4      	; 0x3fea <__fp_round+0xc>
    3fe6:	88 23       	and	r24, r24
    3fe8:	52 f0       	brmi	.+20     	; 0x3ffe <__fp_round+0x20>
    3fea:	bb 0f       	add	r27, r27
    3fec:	40 f4       	brcc	.+16     	; 0x3ffe <__fp_round+0x20>
    3fee:	bf 2b       	or	r27, r31
    3ff0:	11 f4       	brne	.+4      	; 0x3ff6 <__fp_round+0x18>
    3ff2:	60 ff       	sbrs	r22, 0
    3ff4:	04 c0       	rjmp	.+8      	; 0x3ffe <__fp_round+0x20>
    3ff6:	6f 5f       	subi	r22, 0xFF	; 255
    3ff8:	7f 4f       	sbci	r23, 0xFF	; 255
    3ffa:	8f 4f       	sbci	r24, 0xFF	; 255
    3ffc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ffe:	08 95       	ret

00004000 <__fp_split3>:
    4000:	57 fd       	sbrc	r21, 7
    4002:	90 58       	subi	r25, 0x80	; 128
    4004:	44 0f       	add	r20, r20
    4006:	55 1f       	adc	r21, r21
    4008:	59 f0       	breq	.+22     	; 0x4020 <__fp_splitA+0x10>
    400a:	5f 3f       	cpi	r21, 0xFF	; 255
    400c:	71 f0       	breq	.+28     	; 0x402a <__fp_splitA+0x1a>
    400e:	47 95       	ror	r20

00004010 <__fp_splitA>:
    4010:	88 0f       	add	r24, r24
    4012:	97 fb       	bst	r25, 7
    4014:	99 1f       	adc	r25, r25
    4016:	61 f0       	breq	.+24     	; 0x4030 <__fp_splitA+0x20>
    4018:	9f 3f       	cpi	r25, 0xFF	; 255
    401a:	79 f0       	breq	.+30     	; 0x403a <__fp_splitA+0x2a>
    401c:	87 95       	ror	r24
    401e:	08 95       	ret
    4020:	12 16       	cp	r1, r18
    4022:	13 06       	cpc	r1, r19
    4024:	14 06       	cpc	r1, r20
    4026:	55 1f       	adc	r21, r21
    4028:	f2 cf       	rjmp	.-28     	; 0x400e <__fp_split3+0xe>
    402a:	46 95       	lsr	r20
    402c:	f1 df       	rcall	.-30     	; 0x4010 <__fp_splitA>
    402e:	08 c0       	rjmp	.+16     	; 0x4040 <__fp_splitA+0x30>
    4030:	16 16       	cp	r1, r22
    4032:	17 06       	cpc	r1, r23
    4034:	18 06       	cpc	r1, r24
    4036:	99 1f       	adc	r25, r25
    4038:	f1 cf       	rjmp	.-30     	; 0x401c <__fp_splitA+0xc>
    403a:	86 95       	lsr	r24
    403c:	71 05       	cpc	r23, r1
    403e:	61 05       	cpc	r22, r1
    4040:	08 94       	sec
    4042:	08 95       	ret

00004044 <__fp_zero>:
    4044:	e8 94       	clt

00004046 <__fp_szero>:
    4046:	bb 27       	eor	r27, r27
    4048:	66 27       	eor	r22, r22
    404a:	77 27       	eor	r23, r23
    404c:	cb 01       	movw	r24, r22
    404e:	97 f9       	bld	r25, 7
    4050:	08 95       	ret

00004052 <__mulsf3>:
    4052:	0e 94 3c 20 	call	0x4078	; 0x4078 <__mulsf3x>
    4056:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__fp_round>
    405a:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <__fp_pscA>
    405e:	38 f0       	brcs	.+14     	; 0x406e <__mulsf3+0x1c>
    4060:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__fp_pscB>
    4064:	20 f0       	brcs	.+8      	; 0x406e <__mulsf3+0x1c>
    4066:	95 23       	and	r25, r21
    4068:	11 f0       	breq	.+4      	; 0x406e <__mulsf3+0x1c>
    406a:	0c 94 d8 1f 	jmp	0x3fb0	; 0x3fb0 <__fp_inf>
    406e:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <__fp_nan>
    4072:	11 24       	eor	r1, r1
    4074:	0c 94 23 20 	jmp	0x4046	; 0x4046 <__fp_szero>

00004078 <__mulsf3x>:
    4078:	0e 94 00 20 	call	0x4000	; 0x4000 <__fp_split3>
    407c:	70 f3       	brcs	.-36     	; 0x405a <__mulsf3+0x8>

0000407e <__mulsf3_pse>:
    407e:	95 9f       	mul	r25, r21
    4080:	c1 f3       	breq	.-16     	; 0x4072 <__mulsf3+0x20>
    4082:	95 0f       	add	r25, r21
    4084:	50 e0       	ldi	r21, 0x00	; 0
    4086:	55 1f       	adc	r21, r21
    4088:	62 9f       	mul	r22, r18
    408a:	f0 01       	movw	r30, r0
    408c:	72 9f       	mul	r23, r18
    408e:	bb 27       	eor	r27, r27
    4090:	f0 0d       	add	r31, r0
    4092:	b1 1d       	adc	r27, r1
    4094:	63 9f       	mul	r22, r19
    4096:	aa 27       	eor	r26, r26
    4098:	f0 0d       	add	r31, r0
    409a:	b1 1d       	adc	r27, r1
    409c:	aa 1f       	adc	r26, r26
    409e:	64 9f       	mul	r22, r20
    40a0:	66 27       	eor	r22, r22
    40a2:	b0 0d       	add	r27, r0
    40a4:	a1 1d       	adc	r26, r1
    40a6:	66 1f       	adc	r22, r22
    40a8:	82 9f       	mul	r24, r18
    40aa:	22 27       	eor	r18, r18
    40ac:	b0 0d       	add	r27, r0
    40ae:	a1 1d       	adc	r26, r1
    40b0:	62 1f       	adc	r22, r18
    40b2:	73 9f       	mul	r23, r19
    40b4:	b0 0d       	add	r27, r0
    40b6:	a1 1d       	adc	r26, r1
    40b8:	62 1f       	adc	r22, r18
    40ba:	83 9f       	mul	r24, r19
    40bc:	a0 0d       	add	r26, r0
    40be:	61 1d       	adc	r22, r1
    40c0:	22 1f       	adc	r18, r18
    40c2:	74 9f       	mul	r23, r20
    40c4:	33 27       	eor	r19, r19
    40c6:	a0 0d       	add	r26, r0
    40c8:	61 1d       	adc	r22, r1
    40ca:	23 1f       	adc	r18, r19
    40cc:	84 9f       	mul	r24, r20
    40ce:	60 0d       	add	r22, r0
    40d0:	21 1d       	adc	r18, r1
    40d2:	82 2f       	mov	r24, r18
    40d4:	76 2f       	mov	r23, r22
    40d6:	6a 2f       	mov	r22, r26
    40d8:	11 24       	eor	r1, r1
    40da:	9f 57       	subi	r25, 0x7F	; 127
    40dc:	50 40       	sbci	r21, 0x00	; 0
    40de:	9a f0       	brmi	.+38     	; 0x4106 <__mulsf3_pse+0x88>
    40e0:	f1 f0       	breq	.+60     	; 0x411e <__mulsf3_pse+0xa0>
    40e2:	88 23       	and	r24, r24
    40e4:	4a f0       	brmi	.+18     	; 0x40f8 <__mulsf3_pse+0x7a>
    40e6:	ee 0f       	add	r30, r30
    40e8:	ff 1f       	adc	r31, r31
    40ea:	bb 1f       	adc	r27, r27
    40ec:	66 1f       	adc	r22, r22
    40ee:	77 1f       	adc	r23, r23
    40f0:	88 1f       	adc	r24, r24
    40f2:	91 50       	subi	r25, 0x01	; 1
    40f4:	50 40       	sbci	r21, 0x00	; 0
    40f6:	a9 f7       	brne	.-22     	; 0x40e2 <__mulsf3_pse+0x64>
    40f8:	9e 3f       	cpi	r25, 0xFE	; 254
    40fa:	51 05       	cpc	r21, r1
    40fc:	80 f0       	brcs	.+32     	; 0x411e <__mulsf3_pse+0xa0>
    40fe:	0c 94 d8 1f 	jmp	0x3fb0	; 0x3fb0 <__fp_inf>
    4102:	0c 94 23 20 	jmp	0x4046	; 0x4046 <__fp_szero>
    4106:	5f 3f       	cpi	r21, 0xFF	; 255
    4108:	e4 f3       	brlt	.-8      	; 0x4102 <__mulsf3_pse+0x84>
    410a:	98 3e       	cpi	r25, 0xE8	; 232
    410c:	d4 f3       	brlt	.-12     	; 0x4102 <__mulsf3_pse+0x84>
    410e:	86 95       	lsr	r24
    4110:	77 95       	ror	r23
    4112:	67 95       	ror	r22
    4114:	b7 95       	ror	r27
    4116:	f7 95       	ror	r31
    4118:	e7 95       	ror	r30
    411a:	9f 5f       	subi	r25, 0xFF	; 255
    411c:	c1 f7       	brne	.-16     	; 0x410e <__mulsf3_pse+0x90>
    411e:	fe 2b       	or	r31, r30
    4120:	88 0f       	add	r24, r24
    4122:	91 1d       	adc	r25, r1
    4124:	96 95       	lsr	r25
    4126:	87 95       	ror	r24
    4128:	97 f9       	bld	r25, 7
    412a:	08 95       	ret

0000412c <__divmodhi4>:
    412c:	97 fb       	bst	r25, 7
    412e:	07 2e       	mov	r0, r23
    4130:	16 f4       	brtc	.+4      	; 0x4136 <__divmodhi4+0xa>
    4132:	00 94       	com	r0
    4134:	07 d0       	rcall	.+14     	; 0x4144 <__divmodhi4_neg1>
    4136:	77 fd       	sbrc	r23, 7
    4138:	09 d0       	rcall	.+18     	; 0x414c <__divmodhi4_neg2>
    413a:	0e 94 f6 20 	call	0x41ec	; 0x41ec <__udivmodhi4>
    413e:	07 fc       	sbrc	r0, 7
    4140:	05 d0       	rcall	.+10     	; 0x414c <__divmodhi4_neg2>
    4142:	3e f4       	brtc	.+14     	; 0x4152 <__divmodhi4_exit>

00004144 <__divmodhi4_neg1>:
    4144:	90 95       	com	r25
    4146:	81 95       	neg	r24
    4148:	9f 4f       	sbci	r25, 0xFF	; 255
    414a:	08 95       	ret

0000414c <__divmodhi4_neg2>:
    414c:	70 95       	com	r23
    414e:	61 95       	neg	r22
    4150:	7f 4f       	sbci	r23, 0xFF	; 255

00004152 <__divmodhi4_exit>:
    4152:	08 95       	ret

00004154 <__udivmodsi4>:
    4154:	a1 e2       	ldi	r26, 0x21	; 33
    4156:	1a 2e       	mov	r1, r26
    4158:	aa 1b       	sub	r26, r26
    415a:	bb 1b       	sub	r27, r27
    415c:	fd 01       	movw	r30, r26
    415e:	0d c0       	rjmp	.+26     	; 0x417a <__udivmodsi4_ep>

00004160 <__udivmodsi4_loop>:
    4160:	aa 1f       	adc	r26, r26
    4162:	bb 1f       	adc	r27, r27
    4164:	ee 1f       	adc	r30, r30
    4166:	ff 1f       	adc	r31, r31
    4168:	a2 17       	cp	r26, r18
    416a:	b3 07       	cpc	r27, r19
    416c:	e4 07       	cpc	r30, r20
    416e:	f5 07       	cpc	r31, r21
    4170:	20 f0       	brcs	.+8      	; 0x417a <__udivmodsi4_ep>
    4172:	a2 1b       	sub	r26, r18
    4174:	b3 0b       	sbc	r27, r19
    4176:	e4 0b       	sbc	r30, r20
    4178:	f5 0b       	sbc	r31, r21

0000417a <__udivmodsi4_ep>:
    417a:	66 1f       	adc	r22, r22
    417c:	77 1f       	adc	r23, r23
    417e:	88 1f       	adc	r24, r24
    4180:	99 1f       	adc	r25, r25
    4182:	1a 94       	dec	r1
    4184:	69 f7       	brne	.-38     	; 0x4160 <__udivmodsi4_loop>
    4186:	60 95       	com	r22
    4188:	70 95       	com	r23
    418a:	80 95       	com	r24
    418c:	90 95       	com	r25
    418e:	9b 01       	movw	r18, r22
    4190:	ac 01       	movw	r20, r24
    4192:	bd 01       	movw	r22, r26
    4194:	cf 01       	movw	r24, r30
    4196:	08 95       	ret

00004198 <__tablejump2__>:
    4198:	ee 0f       	add	r30, r30
    419a:	ff 1f       	adc	r31, r31
    419c:	05 90       	lpm	r0, Z+
    419e:	f4 91       	lpm	r31, Z
    41a0:	e0 2d       	mov	r30, r0
    41a2:	09 94       	ijmp

000041a4 <__umulhisi3>:
    41a4:	a2 9f       	mul	r26, r18
    41a6:	b0 01       	movw	r22, r0
    41a8:	b3 9f       	mul	r27, r19
    41aa:	c0 01       	movw	r24, r0
    41ac:	a3 9f       	mul	r26, r19
    41ae:	70 0d       	add	r23, r0
    41b0:	81 1d       	adc	r24, r1
    41b2:	11 24       	eor	r1, r1
    41b4:	91 1d       	adc	r25, r1
    41b6:	b2 9f       	mul	r27, r18
    41b8:	70 0d       	add	r23, r0
    41ba:	81 1d       	adc	r24, r1
    41bc:	11 24       	eor	r1, r1
    41be:	91 1d       	adc	r25, r1
    41c0:	08 95       	ret

000041c2 <__adddi3_s8>:
    41c2:	00 24       	eor	r0, r0
    41c4:	a7 fd       	sbrc	r26, 7
    41c6:	00 94       	com	r0
    41c8:	2a 0f       	add	r18, r26
    41ca:	30 1d       	adc	r19, r0
    41cc:	40 1d       	adc	r20, r0
    41ce:	50 1d       	adc	r21, r0
    41d0:	60 1d       	adc	r22, r0
    41d2:	70 1d       	adc	r23, r0
    41d4:	80 1d       	adc	r24, r0
    41d6:	90 1d       	adc	r25, r0
    41d8:	08 95       	ret

000041da <__cmpdi2>:
    41da:	2a 15       	cp	r18, r10
    41dc:	3b 05       	cpc	r19, r11
    41de:	4c 05       	cpc	r20, r12
    41e0:	5d 05       	cpc	r21, r13
    41e2:	6e 05       	cpc	r22, r14
    41e4:	7f 05       	cpc	r23, r15
    41e6:	80 07       	cpc	r24, r16
    41e8:	91 07       	cpc	r25, r17
    41ea:	08 95       	ret

000041ec <__udivmodhi4>:
    41ec:	aa 1b       	sub	r26, r26
    41ee:	bb 1b       	sub	r27, r27
    41f0:	51 e1       	ldi	r21, 0x11	; 17
    41f2:	07 c0       	rjmp	.+14     	; 0x4202 <__udivmodhi4_ep>

000041f4 <__udivmodhi4_loop>:
    41f4:	aa 1f       	adc	r26, r26
    41f6:	bb 1f       	adc	r27, r27
    41f8:	a6 17       	cp	r26, r22
    41fa:	b7 07       	cpc	r27, r23
    41fc:	10 f0       	brcs	.+4      	; 0x4202 <__udivmodhi4_ep>
    41fe:	a6 1b       	sub	r26, r22
    4200:	b7 0b       	sbc	r27, r23

00004202 <__udivmodhi4_ep>:
    4202:	88 1f       	adc	r24, r24
    4204:	99 1f       	adc	r25, r25
    4206:	5a 95       	dec	r21
    4208:	a9 f7       	brne	.-22     	; 0x41f4 <__udivmodhi4_loop>
    420a:	80 95       	com	r24
    420c:	90 95       	com	r25
    420e:	bc 01       	movw	r22, r24
    4210:	cd 01       	movw	r24, r26
    4212:	08 95       	ret

00004214 <_exit>:
    4214:	f8 94       	cli

00004216 <__stop_program>:
    4216:	ff cf       	rjmp	.-2      	; 0x4216 <__stop_program>
